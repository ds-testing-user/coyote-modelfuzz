//------------------------------------------------------------------------------
// <auto-generated>
// Well, not really. This is just a trick to get StyleCop off my back.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Coyote.Actors;

namespace MicroBenchmark;

public class AppMaster : StateMachine
{
    private Dictionary<ulong, ActorId> Workers;

    private int NumWorkers;

    private ActorId Terminator;

    [Start]
    [OnEventDoAction(typeof(RegisterWorkerEvent), nameof(HandleRegisterWorker))]
    [OnEventDoAction(typeof(RegisterTerminatorEvent), nameof(HandleRegisterTerminator))]
    [OnEventDoAction(typeof(RequestEvent), nameof(HandleRequest))]
    private class Init : State { }

    [OnEventDoAction(typeof(RequestEvent), nameof(HandleRequest))]
    private class InProgress : State { }

    protected override Task OnInitializeAsync(Event initialEvent)
    {
        var setup = initialEvent as MasterSetupEvent;
        this.NumWorkers = setup.NumWorkers;
        this.Terminator = null;
        this.Workers = new Dictionary<ulong, ActorId>();
        return Task.CompletedTask;
    }

    public virtual async Task HandleRegisterWorker(Event e)
    {
        var reg = e as RegisterWorkerEvent;
        this.Workers.Add(reg.WorkerId, reg.Id);
        await Task.CompletedTask;
        this.Logger.WriteLine("Registered worker: " + reg.Id);
    }

    public virtual async Task HandleRegisterTerminator(Event e)
    {
        var reg = e as RegisterTerminatorEvent;
        this.Terminator = reg.Id;
        await Task.CompletedTask;
        this.Logger.WriteLine("Registered worker: " + reg.Id);
    }

    private void HandleRequest(Event e)
    {
        var req = e as RequestEvent;
        if (this.Workers.Count == this.NumWorkers && this.Terminator != null)
        {
            this.SendEvent(this.Workers[req.W1], new ExecuteEvent(req.Request, this.Workers[req.W1]));
            this.SendEvent(this.Terminator, new TerminateEvent(this.Workers[req.W1]));
        }
    }
}
