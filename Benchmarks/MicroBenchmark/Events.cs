//------------------------------------------------------------------------------
// <auto-generated>
// Well, not really. This is just a trick to get StyleCop off my back.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Runtime.Serialization;
using Microsoft.Coyote.Actors;

namespace MicroBenchmark
{
    public class InitEvent : Event { }

    public class ManagerSetupEvent : Event
    {
        internal List<ActorId> Workers;

        internal ActorId Terminator;

        internal ActorId Client;

        public ManagerSetupEvent(List<ActorId> workers, ActorId terminator, ActorId client)
        {
            this.Workers = workers;
            this.Terminator = terminator;
            this.Client = client;
        }
    }

    public class ClientSetupEvent : Event
    {
        internal ActorId AppMaster;

        internal int NumWorkers;

        public ClientSetupEvent(ActorId appMaster, int numworkers)
        {
            this.AppMaster = appMaster;
            this.NumWorkers = numworkers;
        }
    }

    public class WorkerSetupEvent : Event
    {
        internal ActorId AppMaster;

        internal int NumExecutes;

        public WorkerSetupEvent(ActorId appMaster, int numExecutes)
        {
            this.AppMaster = appMaster;
            this.NumExecutes = numExecutes;
        }
    }

    public class TerminatorSetupEvent : Event
    {
        internal ActorId AppMaster;

        public TerminatorSetupEvent(ActorId appMaster)
        {
            this.AppMaster = appMaster;
        }
    }

    public class MasterSetupEvent : Event
    {
        internal int NumWorkers;

        public MasterSetupEvent(int numWorkers)
        {
            this.NumWorkers = numWorkers;
        }
    }


    [DataContract]
    public class RegisterWorkerEvent : Event
    {
        public ActorId Id;

        public ulong WorkerId;

        public RegisterWorkerEvent(ActorId id)
        {
            this.Id = id;
            this.WorkerId = this.Id.Value - 1;
        }

        public override Dictionary<string, object> GetParams()
        {
            return new Dictionary<string, object>() { { "worker_id", this.WorkerId } };
        }
    }

    [DataContract]
    public class RegisterTerminatorEvent : Event
    {
        public ActorId Id;

        public RegisterTerminatorEvent(ActorId id)
        {
            this.Id = id;
        }
    }

    [DataContract]
    public class TerminateEvent : Event
    {
        public ActorId Id;

        private ulong WorkerId;

        public TerminateEvent(ActorId id)
        {
            this.Id = id;
            this.WorkerId = this.Id.Value - 1;
        }

        public override Dictionary<string, object> GetParams()
        {
            return new Dictionary<string, object>() { { "worker_id", this.WorkerId } };
        }
    }

    [DataContract]
    public class RequestEvent : Event
    {
        public int Request;

        public ulong W1;

        public RequestEvent(int request, ulong w1)
        {
            this.Request = request;
            this.W1 = w1;
        }

        public override Dictionary<string, object> GetParams()
        {
            return new Dictionary<string, object>() { { "request_id", this.Request }, { "worker_id", this.W1} };
        }
    }

    [DataContract]
    public class ExecuteEvent : Event
    {
        public int Request;

        public ActorId Worker;

        private ulong WorkerId;

        public ExecuteEvent(int request, ActorId worker)
        {
            this.Request = request;
            this.Worker = worker;
            this.WorkerId = this.Worker.Value - 1;
        }

        public override Dictionary<string, object> GetParams()
        {
            return new Dictionary<string, object>() { { "request_id", this.Request }, { "worker_id", this.WorkerId } };
        }
    }

    [DataContract]
    public class FlushEvent : Event
    {
        public ActorId Id;

        private ulong WorkerId;

        public FlushEvent(ActorId id)
        {
            this.Id = id;
            this.WorkerId = this.Id.Value - 1;
        }

        public override Dictionary<string, object> GetParams()
        {
            return new Dictionary<string, object>() { { "worker_id", this.WorkerId } };
        }
    }
}
