//------------------------------------------------------------------------------
// <auto-generated>
// Well, not really. This is just a trick to get StyleCop off my back.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Coyote.Actors;

namespace MicroBenchmark;

public class Worker : StateMachine
{
    private WorkerSetupEvent WorkerInfo;

    private HashSet<int> Requests = null;

    private int FlushFlag;

    private int N;

    [Start]
    [OnEventDoAction(typeof(ExecuteEvent), nameof(HandleExecute))]
    [OnEventDoAction(typeof(FlushEvent), nameof(HandleFlush))]
    private class Working : State { }

    [OnEventDoAction(typeof(ExecuteEvent), nameof(HandleExecute))]
    private class Flushed : State { }

    [OnEventDoAction(typeof(FlushEvent), nameof(HandleFlush))]
    private class Completed : State { }

    protected override Task OnInitializeAsync(Event initialEvent)
    {
        var setup = initialEvent as WorkerSetupEvent;
        this.WorkerInfo = setup;
        this.N = setup.NumExecutes;
        this.Requests = new HashSet<int>();
        this.FlushFlag = -1;
        this.SendEvent(this.WorkerInfo.AppMaster, new RegisterWorkerEvent(this.Id));
        // this.RaiseGotoStateEvent<Working>();
        return Task.CompletedTask;
    }

    private void HandleExecute(Event e)
    {
        var ex = e as ExecuteEvent;
        this.Requests.Add(ex.Request);
        this.N--;
        if (this.N > 0 && this.FlushFlag == -1)
        {
            this.SendEvent(this.Id, new ExecuteEvent(ex.Request + 1, this.Id));
        }

        this.Assert(this.N != 0 || this.FlushFlag != 1, "AssertionFailure");

        if (this.N == 0)
        {
            this.RaiseGotoStateEvent<Completed>();
        }
    }

    private void HandleFlush()
    {
        this.FlushFlag = this.N;
        // this.Requests = null;
        this.RaiseGotoStateEvent<Flushed>();
    }

    private void HandleInit()
    {
        this.Logger.WriteLine("Starting HandleInit");
        this.SendEvent(this.WorkerInfo.AppMaster, new RegisterWorkerEvent(this.Id));
        this.RaiseGotoStateEvent<Working>();
    }
}
