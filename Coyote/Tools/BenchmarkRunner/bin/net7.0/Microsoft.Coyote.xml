<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Coyote</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Coyote.Configuration">
            <summary>
            The Coyote runtime and testing configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.OutputFilePath">
            <summary>
            The output path.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.AssemblyToBeAnalyzed">
            <summary>
            The assembly to be analyzed for bugs.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.TestMethodName">
            <summary>
            Test method to be used.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.TestingIterations">
            <summary>
            Number of testing iterations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.TestingTimeout">
            <summary>
            Timeout in seconds after which no more testing iterations will run.
            </summary>
            <remarks>
            Setting this value overrides the <see cref="P:Microsoft.Coyote.Configuration.TestingIterations"/> value.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.RandomGeneratorSeed">
            <summary>
            Custom seed to be used by the random value generator. By default,
            this value is null indicating that no seed has been set.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.ExplorationStrategy">
            <summary>
            The exploration strategy to use during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.StrategyBound">
            <summary>
            A strategy-specific bound.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.PortfolioMode">
            <summary>
            The exploration strategy portfolio mode that is enabled during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsPartiallyControlledConcurrencyAllowed">
            <summary>
            If enabled and uncontrolled concurrency is detected, then the runtime will attempt to partially
            control the concurrency of the application, instead of immediately failing with an error.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsPartiallyControlledDataNondeterminismAllowed">
            <summary>
            If enabled and uncontrolled data non-determinism is detected, then the runtime will attempt
            to partially control the data non-determinism of the application, instead of immediately
            failing with an error.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsSystematicFuzzingEnabled">
            <summary>
            If enabled, the systematic fuzzing policy is used during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsSystematicFuzzingFallbackEnabled">
            <summary>
            If enabled and uncontrolled concurrency is detected, then the tester automatically switches
            to systematic fuzzing, instead of failing with an error.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.MaxFuzzingDelay">
            <summary>
            Value that controls the maximum time an operation might get delayed during systematic fuzzing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsLivenessCheckingEnabled">
            <summary>
            If enabled, liveness checking is enabled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsCollectionAccessRaceCheckingEnabled">
            <summary>
            If enabled, checking races at collection accesses is enabled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsLockAccessRaceCheckingEnabled">
            <summary>
            If enabled, checking races at lock accesses is enabled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsAtomicOperationRaceCheckingEnabled">
            <summary>
            If enabled, checking races at atomic operations is enabled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsSharedStateReductionEnabled">
            <summary>
            If enabled, shared state reduction is enabled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.RunTestIterationsToCompletion">
            <summary>
            If true, the tester runs all iterations up to a bound, even if a bug is found.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.MaxUnfairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore for unfair schedulers.
            By default this is set to 10,000 steps.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.MaxFairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore for fair schedulers.
            By default this is set to 100,000 steps.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.UserExplicitlySetMaxFairSchedulingSteps">
            <summary>
            True if the user has explicitly set the fair scheduling steps.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.ConsiderDepthBoundHitAsBug">
            <summary>
            If true, then the Coyote tester will consider an execution
            that hits the depth bound as buggy.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.TimeoutDelay">
            <summary>
            Value that controls the probability of triggering a timeout during systematic testing.
            Decrease the value to increase the frequency of timeouts (e.g. a value of 1 corresponds
            to a 50% probability), or increase the value to decrease the frequency (e.g. a value of
            10 corresponds to a 10% probability).
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.DeadlockTimeout">
            <summary>
            Value that controls how much time the deadlock monitor should wait during concurrency testing
            before reporting a potential deadlock. This value is in milliseconds.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.ReportPotentialDeadlocksAsBugs">
            <summary>
            If enabled then report any potential deadlock as a bug, else skip to the next test iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.UncontrolledConcurrencyResolutionAttempts">
            <summary>
            Value that controls how many times the runtime can check if each instance
            of uncontrolled concurrency has resolved during testing before timing out.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.UncontrolledConcurrencyResolutionDelay">
            <summary>
            Value that controls how much time the runtime should wait between each attempt
            to resolve uncontrolled concurrency during testing before timing out.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.LivenessTemperatureThreshold">
            <summary>
            The liveness temperature threshold. If it is 0 then it is disabled. By default
            this value is assigned to <see cref="P:Microsoft.Coyote.Configuration.MaxFairSchedulingSteps"/> / 2.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.UserExplicitlySetLivenessTemperatureThreshold">
            <summary>
            True if the user has explicitly set the liveness temperature threshold.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsImplicitProgramStateHashingEnabled">
            <summary>
            If enabled, runtime and automatically inferred program state is used to contribute
            to the computed program state at each scheduling step during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.IsMonitoringEnabledOutsideTesting">
            <summary>
            If enabled, safety monitors can run outside the scope of the testing engine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsActorQuiescenceCheckingEnabledOutsideTesting">
            <summary>
            If enabled, the runtime can check for actor quiescence outside the scope of the testing engine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsSchedulingSuppressionWeak">
            <summary>
            If enabled, the runtime can bypass scheduling suppression to avoid deadlocking during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.AttachDebugger">
            <summary>
            Attaches the debugger during trace replay.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.ReproducibleTrace">
            <summary>
            The trace to be replayed during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.VerbosityLevel">
            <summary>
            The level of verbosity to use during logging.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.IsConsoleLoggingEnabled">
            <summary>
            If true, then console logging is enabled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Configuration.IsUncontrolledInvocationStackTraceLoggingEnabled">
            <summary>
            Enables logging of stack traces when uncontrolled invocations are detected during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsActivityCoverageReported">
            <summary>
            Enables activity coverage reporting during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsScheduleCoverageReported">
            <summary>
            Enables schedule coverage reporting during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsCoverageInfoSerialized">
            <summary>
            Serialize the reported coverage information.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsTraceVisualizationEnabled">
            <summary>
            If true, requests a DGML graph of the iteration that contains a bug, if a bug is found.
            This is different from a coverage activity graph, as it will also show actor instances.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsXmlLogEnabled">
            <summary>
            Produce an XML formatted runtime log file.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.IsTelemetryEnabled">
            <summary>
            If true, then anonymized telemetry is enabled, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.NumDelays">
            <summary>
            Number of delays to be injected into the schedule.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Configuration.MutatorType">
            <summary>
            Number of delays to be injected into the schedule.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Configuration"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.Create">
            <summary>
            Creates a new configuration with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithOutputFilePath(System.String)">
            <summary>
            Sets output file path.
            </summary>
            <param name="outputPath">Output file path.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithRunMode(System.Int32)">
            <summary>
            Sets output file path.
            </summary>
            <param name="runMode">Output file path.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithVerbosityEnabled(Microsoft.Coyote.Logging.VerbosityLevel)">
            <summary>
            Updates the configuration to use the specified verbosity level, or <see cref="F:Microsoft.Coyote.Logging.VerbosityLevel.Info"/>,
            if no level is specified. The default verbosity level is <see cref="F:Microsoft.Coyote.Logging.VerbosityLevel.Error"/>.
            </summary>
            <param name="level">The level of verbosity used during logging.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithConsoleLoggingEnabled(System.Boolean)">
            <summary>
            Updates the configuration to log all runtime messages to the console, unless overridden by a custom <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
            <param name="isEnabled">If true, then logs all runtime messages to the console.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTestingIterations(System.UInt32)">
            <summary>
            Updates the configuration with the specified number of iterations to run during systematic testing.
            </summary>
            <param name="iterations">The number of iterations to run.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTestingTimeout(System.Int32)">
            <summary>
            Updates the configuration with the specified systematic testing timeout in seconds.
            </summary>
            <param name="timeout">The timeout value in seconds.</param>
            <remarks>
            Setting this value overrides the <see cref="P:Microsoft.Coyote.Configuration.TestingIterations"/> value.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithReproducibleTrace(System.String)">
            <summary>
            Updates the configuration to try reproduce the specified trace during systematic testing.
            </summary>
            <param name="trace">The trace to be reproduced.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithRandomChoiceStrategy">
            <summary>
            Updates the configuration to use the random choice exploration strategy during systematic testing.
            </summary>
            <remarks>
            Note that explicitly setting this strategy disables the default exploration mode
            that uses a tuned portfolio of strategies.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithRoundRobinFuzzingStrategy">
            <summary>
            Updates the configuration to use the interleaved round robin fuzzing exploration strategy during systematic testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithActorBasedDFSStrategy">
            <summary>
            Updates the configuration to use the actor-based dfs exploration strategy during systematic testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithInterleavedFuzzingStrategy">
            <summary>
            Updates the configuration to use the interleaved round robin fuzzing exploration strategy during systematic testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithRandomStrategy">
            <summary>
            Updates the configuration to use the random exploration strategy during systematic testing.
            </summary>
            <remarks>
            Note that explicitly setting this strategy disables the default exploration mode
            that uses a tuned portfolio of strategies.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithProbabilisticStrategy(System.UInt32)">
            <summary>
            Updates the configuration to use the probabilistic exploration strategy during systematic testing.
            You can specify a value controlling the probability of each scheduling decision. This value is
            specified as the integer N in the equation 0.5 to the power of N. So for N=1, the probability is
            0.5, for N=2 the probability is 0.25, N=3 you get 0.125, etc. By default, this value is 3.
            </summary>
            <param name="probabilityLevel">The probability level.</param>
            <remarks>
            Note that explicitly setting this strategy disables the default exploration mode
            that uses a tuned portfolio of strategies.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithPrioritizationStrategy(System.Boolean,System.UInt32)">
            <summary>
            Updates the configuration to use the priority-based exploration strategy during systematic testing.
            You can specify if you want to enable liveness checking, which is disabled by default, and an upper
            bound of possible priority changes, which by default can be up to 10.
            </summary>
            <param name="isFair">If true, enable liveness checking by using fair scheduling.</param>
            <param name="priorityChangeBound">Upper bound of possible priority changes per test iteration.</param>
            <remarks>
            Note that explicitly setting this strategy disables the default exploration mode
            that uses a tuned portfolio of strategies.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithDelayBoundingStrategy(System.Boolean,System.UInt32)">
            <summary>
            Updates the configuration to use the delay-bounding exploration strategy during systematic testing.
            You can specify if you want to enable liveness checking, which is disabled by default, and an upper
            bound of possible delays, which by default can be up to 10.
            </summary>
            <param name="isFair">If true, enable liveness checking by using fair scheduling.</param>
            <param name="delayBound">Upper bound of possible priority delays per test iteration.</param>
            <remarks>
            Note that explicitly setting this strategy disables the default exploration mode
            that uses a tuned portfolio of strategies.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithQLearningStrategy">
            <summary>
            Updates the configuration to use the Q-learning exploration strategy during systematic testing.
            </summary>
            <remarks>
            Note that explicitly setting this strategy disables the default exploration mode
            that uses a tuned portfolio of strategies.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithQLearningTLAStrategy">
            <summary>
            Updates the configuration to use the Q-learning exploration strategy during systematic testing.
            </summary>
            <remarks>
            Note that explicitly setting this strategy disables the default exploration mode
            that uses a tuned portfolio of strategies.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithDFSStrategy">
            <summary>
            Updates the configuration to use the dfs exploration strategy during systematic testing.
            </summary>
            <remarks>
            Note that explicitly setting this strategy disables the default exploration mode
            that uses a tuned portfolio of strategies.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithPortfolioMode(System.Boolean)">
            <summary>
            Updates the configuration to use fair or unfair portfolio mode during testing. Portfolio
            mode uses a tuned portfolio of strategies, instead of the default or user-specified strategy.
            If fair mode is enabled, then the portfolio will upgrade any unfair strategies to fair,
            by adding a fair execution suffix after the the max fair scheduling steps bound has been
            reached. By default, fair portfolio mode is enabled.
            </summary>
            <param name="isFair">
            If true, which is the default value, then the portfolio mode is fair, else it is unfair.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithPartiallyControlledConcurrencyAllowed(System.Boolean)">
            <summary>
            Updates the configuration with partially controlled concurrency allowed or disallowed.
            </summary>
            <param name="isAllowed">If true, then partially controlled concurrency is allowed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithPartiallyControlledDataNondeterminismAllowed(System.Boolean)">
            <summary>
            Updates the configuration with partially controlled data non-determinism allowed or disallowed.
            </summary>
            <param name="isAllowed">If true, then partially controlled data non-determinism is allowed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithSystematicFuzzingEnabled(System.Boolean)">
            <summary>
            Updates the configuration with systematic fuzzing enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then systematic fuzzing is enabled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithSystematicFuzzingFallbackEnabled(System.Boolean)">
            <summary>
            Updates the configuration with systematic fuzzing fallback enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then systematic fuzzing fallback is enabled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithMaxFuzzingDelay(System.UInt32)">
            <summary>
            Updates the value that controls the maximum time an operation might get delayed
            during systematic fuzzing.
            </summary>
            <param name="delay">The maximum delay during systematic fuzzing, which by default is 1000.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithCollectionAccessRaceCheckingEnabled(System.Boolean)">
            <summary>
            Updates the configuration with race checking for collection accesses enabled or disabled.
            If this race checking strategy is enabled, then the runtime will explore interleavings
            when concurrent operations try to access collections.
            </summary>
            <param name="isEnabled">If true, then checking races at collection accesses is enabled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithLockAccessRaceCheckingEnabled(System.Boolean)">
            <summary>
            Updates the configuration with race checking for lock accesses enabled or disabled.
            If this race checking strategy is enabled, then the runtime will explore interleavings
            when concurrent operations try to access lock-based synchronization primitives.
            </summary>
            <param name="isEnabled">If true, then checking races at lock accesses is enabled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithAtomicOperationRaceCheckingEnabled(System.Boolean)">
            <summary>
            Updates the configuration with race checking for atomic operations enabled or disabled.
            If this race checking strategy is enabled, then the runtime will explore interleavings
            when invoking atomic operations, such as <see cref="T:System.Threading.Interlocked"/> methods.
            </summary>
            <param name="isEnabled">If true, then checking races at atomic operations is enabled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithSharedStateReductionEnabled(System.Boolean)">
            <summary>
            Updates the configuration with shared state reduction enabled or disabled. If this
            reduction strategy is enabled, then the runtime will attempt to reduce the schedule
            space by taking into account any 'READ' and 'WRITE' operations declared by invoking
            <see cref="M:Microsoft.Coyote.Runtime.SchedulingPoint.Read(System.String,System.Collections.Generic.IEqualityComparer{System.String})"/> and <see cref="M:Microsoft.Coyote.Runtime.SchedulingPoint.Write(System.String,System.Collections.Generic.IEqualityComparer{System.String})"/>.
            </summary>
            <param name="isEnabled">If true, then shared state reduction is enabled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithNoBugTraceRepro(System.Boolean)">
            <summary>
            Updates the configuration with the ability to reproduce bug traces enabled or disabled.
            Disabling reproducibility allows skipping errors due to uncontrolled concurrency, for
            example when the program is only partially rewritten, or there is external concurrency
            that is not mocked, or when the program uses an API that is not yet supported.
            </summary>
            <param name="isDisabled">If true, then reproducing bug traces is disabled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithMaxSchedulingSteps(System.UInt32)">
            <summary>
            Updates the configuration with the specified number of maximum scheduling steps to explore per
            iteration during systematic testing. The <see cref="P:Microsoft.Coyote.Configuration.MaxUnfairSchedulingSteps"/> is assigned the
            <paramref name="maxSteps"/> value, whereas the <see cref="P:Microsoft.Coyote.Configuration.MaxFairSchedulingSteps"/> is assigned
            a value using the default heuristic, which is 10 * <paramref name="maxSteps"/>.
            </summary>
            <param name="maxSteps">The maximum scheduling steps to explore per iteration.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithNumDelays(System.UInt32)">
            <summary>
            Sets the number of delays to be injected into a mutated schedule.
            </summary>
            <param name="delays">The maximum number of delays inserted into the schedule.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithMutatorType(System.String)">
            <summary>
            Sets the type of mutator to be used in the test.
            </summary>
            <param name="mutatorType">The type of mutator .</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithIndexOffset(System.Int32)">
            <summary>
            Sets the type of mutator to be used in the test.
            </summary>
            <param name="indexOffset">The type of mutator .</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithMaxSchedulingSteps(System.UInt32,System.UInt32)">
            <summary>
            Updates the configuration with the specified number of maximum unfair and fair scheduling
            steps to explore per iteration during systematic testing. It is recommended to use
            <see cref="M:Microsoft.Coyote.Configuration.WithMaxSchedulingSteps(System.UInt32)"/> instead of this overloaded method.
            </summary>
            <param name="maxUnfairSteps">The unfair scheduling steps to explore per iteration.</param>
            <param name="maxFairSteps">The fair scheduling steps to explore per iteration.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithLivenessTemperatureThreshold(System.UInt32)">
            <summary>
            Updates the configuration with the specified liveness temperature threshold during
            systematic testing. If this value is 0 it disables liveness checking. It is not
            recommended to explicitly set this value, instead use the default value which is
            assigned to <see cref="P:Microsoft.Coyote.Configuration.MaxFairSchedulingSteps"/> / 2.
            </summary>
            <param name="threshold">The liveness temperature threshold.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTimeoutDelay(System.UInt32)">
            <summary>
            Updates the value that controls the probability of triggering a timeout during systematic testing.
            </summary>
            <param name="delay">The timeout delay during testing, which by default is 10.</param>
            <remarks>
            Increase the value to decrease the probability. This value is not a unit of time.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithDeadlockTimeout(System.UInt32)">
            <summary>
            Updates the value that controls how much time the background deadlock monitor should
            wait during concurrency testing before reporting a potential deadlock.
            </summary>
            <param name="timeout">The timeout value in milliseconds, which by default is 1000.</param>
            <remarks>
            Increase the value to give more time to the test to resolve a potential deadlock.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithPotentialDeadlocksReportedAsBugs(System.Boolean)">
            <summary>
            Updates the value that controls if potential deadlocks should be reported as bugs.
            </summary>
            <param name="reportedAsBugs">If true, then potential deadlocks are reported as bugs.</param>
            <remarks>
            A deadlock is considered to be potential if the runtime cannot fully determine if the
            deadlock is genuine or occurred because of partially-controlled concurrency.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithUncontrolledConcurrencyResolutionTimeout(System.UInt32,System.UInt32)">
            <summary>
            Updates the values that control how much time the runtime should wait for each
            instance of uncontrolled concurrency to resolve before continuing exploration.
            The <paramref name="attempts"/> parameter controls how many times to check if
            uncontrolled concurrency has resolved, whereas the <paramref name="delay"/>
            parameter controls how long the runtime waits between each retry.
            </summary>
            <param name="attempts">The number of attempts, which by default is 10.</param>
            <param name="delay">The delay value is the number of busy loops to perform, which by default is 1000.</param>
            <remarks>
            Increasing each of the values allows more time to try resolve uncontrolled
            concurrency at the cost of slower testing.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithRandomGeneratorSeed(System.UInt32)">
            <summary>
            Updates the seed used by the random value generator during systematic testing.
            </summary>
            <param name="seed">The seed used by the random value generator.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTestIterationsRunToCompletion(System.Boolean)">
            <summary>
            Updates the configuration so that the tester continues running test iterations
            up to a bound, even if a bug is already found.
            </summary>
            <param name="runToCompletion">
            If true, the tester runs all iterations up to a bound, even if a bug is found.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithUncontrolledInvocationStackTraceLoggingEnabled(System.Boolean)">
            <summary>
            Updates the configuration with stack trace logging for uncontrolled invocations enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then stack trace logging for uncontrolled invocations is enabled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithActivityCoverageReported(System.Boolean)">
            <summary>
            Updates the configuration to enable or disable reporting activity coverage.
            </summary>
            <param name="isEnabled">If true, then enables activity coverage.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithScheduleCoverageReported(System.Boolean)">
            <summary>
            Updates the configuration to enable or disable reporting schedule coverage.
            </summary>
            <param name="isEnabled">If true, then enables schedule coverage reporting.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithCoverageInfoSerialized(System.Boolean)">
            <summary>
            Updates the configuration to enable or disable serializing the coverage information.
            </summary>
            <param name="isEnabled">If true, then enables serializing the coverage information.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTraceVisualizationEnabled(System.Boolean)">
            <summary>
            Updates the configuration with trace visualization enabled or disabled.
            If enabled, the testing engine can produce a DGML graph representing
            an execution leading up to a bug.
            </summary>
            <param name="isEnabled">If true, then enables trace visualization.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithXmlLogEnabled(System.Boolean)">
            <summary>
            Updates the configuration with XML log generation enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then enables XML log generation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithTelemetryEnabled(System.Boolean)">
            <summary>
            Updates the configuration with telemetry enabled or disabled.
            </summary>
            <param name="isEnabled">If true, then enables telemetry.</param>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithMonitoringEnabledOutsideTesting(System.Boolean)">
            <summary>
            Updates the configuration to allow safety monitors to run outside
            the scope of the testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithWeakSchedulingSuppressionEnabled(System.Boolean)">
            <summary>
            Updates the configuration to enable weak scheduling suppression during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Configuration.WithActorQuiescenceCheckingEnabledOutsideTesting(System.Boolean)">
            <summary>
            Updates the configuration to allow the runtime to check for actor quiescence
            outside the scope of the testing engine.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Coverage.CoverageGraph">
            <summary>
            A directed graph made up of <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph.Node"/> and <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph.Link"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Coverage.CoverageGraph.InternalNextLinkIndex">
            <summary>
            Last used index for simple link key "a->b".
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Coverage.CoverageGraph.InternalAllocatedLinkIndexes">
            <summary>
            Maps an augmented link key to the index that has been allocated for that link id "a->b(goto)" => 0.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Nodes">
            <summary>
            Returns the current list of nodes (in no particular order).
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Links">
            <summary>
            Returns the current list of links (in no particular order).
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.GetNode(System.String)">
            <summary>
            Gets an existing node or null.
            </summary>
            <param name="id">The id of the node.</param>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.GetOrCreateNode(System.String,System.String,System.String)">
            <summary>
            Gets an existing node or create a new one with the given id and label.
            </summary>
            <returns>Returns the new node or the existing node if it was already defined.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.GetOrCreateNode(Microsoft.Coyote.Coverage.CoverageGraph.Node)">
            <summary>
            Gets an existing node or create a new one with the given id and label.
            </summary>
            <returns>Returns the new node or the existing node if it was already defined.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.GetOrCreateLink(Microsoft.Coyote.Coverage.CoverageGraph.Node,Microsoft.Coyote.Coverage.CoverageGraph.Node,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Gets an existing link or create a new one connecting the given source and target nodes.
            </summary>
            <returns>The new link or the existing link if it was already defined.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.WriteDgml(System.IO.TextWriter,System.Boolean)">
            <summary>
            Serializes the <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> to DGML format.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.LoadDgml(System.String)">
            <summary>
            Loads a DGML formatted file into a new <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> object.
            </summary>
            <param name="graphFilePath">Full path to the DGML file.</param>
            <returns>The loaded <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> object.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.Merge(Microsoft.Coyote.Coverage.CoverageGraph)">
            <summary>
            Merges the given <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> so that this <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> becomes a superset of both graphs.
            </summary>
            <param name="other">The new <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> to merge into this <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/>.</param>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.IsAvailable">
            <summary>
            Checks if the coverage graph is available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.ToString">
            <summary>
            Serialize the <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> to a DGML formatted string.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Coverage.CoverageGraph.Object">
            <summary>
            A <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> object.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Object.Attributes">
            <summary>
            Optional list of attributes for the node.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Object.AttributeLists">
            <summary>
            Optional list of attributes that have a multi-part value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.Object.AddAttribute(System.String,System.String)">
            <summary>
            Adds an attribute to the node.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.Object.AddListAttribute(System.String,System.String)">
            <summary>
            Creates a compound attribute value containing a merged list of unique values.
            </summary>
            <param name="key">The attribute name.</param>
            <param name="value">The new value to add to the unique list.</param>
        </member>
        <member name="T:Microsoft.Coyote.Coverage.CoverageGraph.Node">
            <summary>
            A node of a <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Node.Id">
            <summary>
            The unique id of the node within the <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Node.Label">
            <summary>
            An optional display label for the node (does not need to be unique).
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Node.Category">
            <summary>
            An optional category for the node.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.Node.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph.Node"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.Node.AddDgmlProperties(System.Xml.Linq.XElement)">
            <summary>
            Adds additional properties from XML element.
            </summary>
            <param name="e">An XML element representing the graph node in DGML format.</param>
        </member>
        <member name="T:Microsoft.Coyote.Coverage.CoverageGraph.Link">
            <summary>
            A link represents a directed <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> connection between two <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph.Node"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Link.Label">
            <summary>
            An optional display label for the link.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Link.Category">
            <summary>
            An optional category for the link. The special category "Contains" is reserved for building groups.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Link.Source">
            <summary>
            The source end of the link.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Link.Target">
            <summary>
            The target end of the link.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageGraph.Link.Index">
            <summary>
            The optional link index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.Link.#ctor(Microsoft.Coyote.Coverage.CoverageGraph.Node,Microsoft.Coyote.Coverage.CoverageGraph.Node,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph.Link"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageGraph.Link.AddDgmlProperties(System.Xml.Linq.XElement)">
            <summary>
            Adds additional properties from XML element.
            </summary>
            <param name="e">An XML element representing the graph node in DGML format.</param>
        </member>
        <member name="T:Microsoft.Coyote.Coverage.CoverageInfo">
            <summary>
            Class for storing coverage-specific data across multiple testing iterations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageInfo.CoverageGraph">
            <summary>
            The coverage graph.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageInfo.Monitors">
            <summary>
            Set of known specification monitors.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageInfo.MonitorsToStates">
            <summary>
            Map from specification monitors to set of all states defined in that monitor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageInfo.RegisteredMonitorEvents">
            <summary>
            Set of all all monitor events that can be used for transitioning into each specification monitor state.
            </summary>
            <remarks>
            Set of (specification monitor + "." + state => registered monitor events).
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageInfo.MonitorEventInfo">
            <summary>
            Information about events received by each specification monitor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageInfo.SchedulingPointStackTraces">
            <summary>
            Map from scheduling point types to invocation site stack traces and their frequencies.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Coverage.CoverageInfo.VisitedStates">
            <summary>
            Set of visited program states represented as hashes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Coverage.CoverageInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.IsMonitorDeclared(System.String)">
            <summary>
            Checks if the specification monitor type has already been registered for coverage.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.DeclareMonitorState(System.String,System.String)">
            <summary>
            Declares a specification monitor state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.DeclareMonitorStateEventPair(System.String,System.String,System.String)">
            <summary>
            Declares a registered specification monitor state-event pair.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.AddMonitorState(System.String,System.String)">
            <summary>
            Adds a new specification monitor state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.AddMonitorEvent(System.String,System.String)">
            <summary>
            Adds a new specification monitor event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.DeclareSchedulingPoint(System.String,System.String)">
            <summary>
            Declares a new scheduling point invocation with its stack trace.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.DeclareVisitedState(System.Int32)">
            <summary>
            Declares a new visited state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.Load``1(System.String)">
            <summary>
            Loads the coverage info XML file into a <see cref="T:Microsoft.Coyote.Coverage.CoverageInfo"/> object of the specified type.
            </summary>
            <param name="filename">Path to the file to load.</param>
            <returns>The deserialized coverage info.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.Save(System.String)">
            <summary>
            Saves the coverage info to the given XML file.
            </summary>
            <param name="serFilePath">The path to the file to create.</param>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageInfo.Merge(Microsoft.Coyote.Coverage.CoverageInfo)">
            <summary>
            Merges the information from the specified coverage info. This is not thread-safe.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Coverage.CoverageReporter">
            <summary>
            Reports coverage statistics and information.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Coverage.CoverageReporter.CoverageInfo">
            <summary>
            Data structure containing information regarding testing coverage.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Coverage.CoverageReporter.BuiltInEvents">
            <summary>
            Set of built in events which we hide in the coverage report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.#ctor(Microsoft.Coyote.Coverage.CoverageInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Coverage.CoverageReporter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.TryEmitVisualizationGraph(System.String)">
            <summary>
            Emits the visualization graph, if it is available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.TryEmitActivityCoverageReport(System.String)">
            <summary>
            Emits the activity coverage report, if it is available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.WriteActivityCoverageText(System.IO.TextWriter)">
            <summary>
            Emits the activity coverage report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.IsActivityCoverageAvailable">
            <summary>
            Checks if the activity coverage report is available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.TryEmitScheduleCoverageReport(System.String)">
            <summary>
            Emits the schedule coverage report, if it is available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.WriteScheduleCoverageText(System.IO.TextWriter)">
            <summary>
            Emits the schedule coverage report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.IsScheduleCoverageAvailable">
            <summary>
            Checks if the schedule coverage report is available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.RemoveCoveredEvents(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}})">
            <summary>
            Remove all events from expectedEvent that are found in the graph.
            </summary>
            <param name="expectedEvents">The list of all expected events organized by unique state id.</param>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.CoverageReporter.GetEventIds(Microsoft.Coyote.Coverage.CoverageGraph.Link)">
            <summary>
            Return all events represented by this link.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Coverage.MonitorEventCoverage">
            <summary>
            This class maintains information about events received in each state of each specification monitor.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Coverage.MonitorEventCoverage.EventsProcessed">
            <summary>
            Map from states to the list of events processed by that state. The state id is fully qualified by
            the specification monitor type it belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Coverage.MonitorEventCoverage.EventsRaised">
            <summary>
            Map from states to the list of events raised by that state. The state id is fully qualified by
            the specification monitor type it belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.MonitorEventCoverage.GetEventsProcessed(System.String)">
            <summary>
            Get list of events processed by the given fully qualified state.
            </summary>
            <param name="stateId">The specification monitor qualified state name.</param>
        </member>
        <member name="M:Microsoft.Coyote.Coverage.MonitorEventCoverage.GetEventsRaised(System.String)">
            <summary>
            Get list of events raised by the given state.
            </summary>
            <param name="stateId">The specification monitor qualified state name.</param>
        </member>
        <member name="T:Microsoft.Coyote.Logging.ConsoleLogger">
            <summary>
            Logger that writes text to the console.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.ConsoleLogger.VerbosityLevel">
            <summary>
            The level of verbosity used during logging.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.#ctor(Microsoft.Coyote.Logging.VerbosityLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Logging.ConsoleLogger"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.Dispose">
            <summary>
            Releases any resources held by the logger.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Logging.ConsoleLogger.ConsoleColorManager">
            <summary>
            Sets and restores colors when logging messages to the console.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.ConsoleLogger.ConsoleColorManager.OriginalForegroundColor">
            <summary>
            The original foreground color.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.ConsoleLogger.ConsoleColorManager.Lock">
            <summary>
            Serializes changes to the console color.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.ConsoleColorManager.#ctor(Microsoft.Coyote.Logging.LogSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Logging.ConsoleLogger.ConsoleColorManager"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ConsoleLogger.ConsoleColorManager.Dispose">
            <summary>
            Restores the original console color.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Logging.ILogger">
            <summary>
            A logger is used to capture messages, warnings and errors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(System.String,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
            <param name="arg2">The third object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(System.String,System.Object[])">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <summary>
            Writes a string to the log with the specified verbosity level.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
            <param name="arg2">The third object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string to the log with the specified verbosity level.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(System.String)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(System.String,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
            <param name="arg2">The third object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream
            with the specified verbosity level.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes an informational string to the log.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
            <param name="arg2">The third object to format and write.</param>
        </member>
        <member name="M:Microsoft.Coyote.Logging.ILogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <summary>
            Writes a string followed by a line terminator to the text string or stream
            with the specified verbosity level.
            </summary>
            <param name="severity">The severity of the message being logged.</param>
            <param name="format">The string format to write.</param>
            <param name="args">The arguments needed to format the string.</param>
        </member>
        <member name="T:Microsoft.Coyote.Logging.LogSeverity">
            <summary>
            The severity of the log message being provided to the <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.LogSeverity.Debug">
            <summary>
            Log that contains information useful for debugging purposes.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.LogSeverity.Info">
            <summary>
            Log that contains general information.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.LogSeverity.Warning">
            <summary>
            Log that contains information about a warning.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.LogSeverity.Error">
            <summary>
            Log that contains information about an error.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.LogSeverity.Important">
            <summary>
            Log that contains important information.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Logging.LogWriter">
            <summary>
            Responsible for logging runtime messages using the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>,
            as well as optionally writing all observed messages to memory.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.LogWriter.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Logging.LogWriter.Logger">
            <summary>
            Used to log messages.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.LogWriter.Lock">
            <summary>
            Synchronizes access to the log writer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.#ctor(Microsoft.Coyote.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Logging.LogWriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogDebug(System.String)">
            <summary>
            Logs the specified debug message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogDebug(System.String,System.Object)">
            <summary>
            Logs the specified debug message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogDebug(System.String,System.Object,System.Object)">
            <summary>
            Logs the specified debug message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogDebug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs the specified debug message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogDebug(System.String,System.Object[])">
            <summary>
            Logs the specified debug message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogDebug(System.Func{System.String})">
            <summary>
            Logs the debug message produced by the specified function.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogInfo(System.String)">
            <summary>
            Logs the specified informational message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogInfo(System.String,System.Object)">
            <summary>
            Logs the specified informational message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogInfo(System.String,System.Object,System.Object)">
            <summary>
            Logs the specified informational message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogInfo(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs the specified informational message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogInfo(System.String,System.Object[])">
            <summary>
            Logs the specified informational message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogWarning(System.String)">
            <summary>
            Logs the specified warning message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogWarning(System.String,System.Object)">
            <summary>
            Logs the specified warning message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogWarning(System.String,System.Object,System.Object)">
            <summary>
            Logs the specified warning message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogWarning(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs the specified warning message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogWarning(System.String,System.Object[])">
            <summary>
            Logs the specified warning message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogError(System.String)">
            <summary>
            Logs the specified error message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogError(System.String,System.Object)">
            <summary>
            Logs the specified error message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogError(System.String,System.Object,System.Object)">
            <summary>
            Logs the specified error message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogError(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs the specified error message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogError(System.String,System.Object[])">
            <summary>
            Logs the specified error message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogImportant(System.String)">
            <summary>
            Logs the specified important message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogImportant(System.String,System.Object)">
            <summary>
            Logs the specified important message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogImportant(System.String,System.Object,System.Object)">
            <summary>
            Logs the specified important message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogImportant(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs the specified important message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.LogImportant(System.String,System.Object[])">
            <summary>
            Logs the specified important message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.SetLogger(Microsoft.Coyote.Logging.ILogger)">
            <summary>
            Use this method to override the default <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.IsVerbose(Microsoft.Coyote.Logging.LogSeverity)">
            <summary>
            Checks if the specified log severity can be logged.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.IsVerbose(Microsoft.Coyote.Logging.LogSeverity,Microsoft.Coyote.Logging.VerbosityLevel)">
            <summary>
            Checks if the specified log severity can be logged.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.IsDebugVerbosityEnabled(Microsoft.Coyote.Logging.VerbosityLevel)">
            <summary>
            Checks if debug log severity is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.IsRuntimeLogger">
            <summary>
            Checks if the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/> is a runtime logger.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Dispose(System.Boolean)">
            <summary>
            Releases any resources held by the log writer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.LogWriter.Dispose">
            <summary>
            Releases any resources held by the log writer.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Logging.MemoryLogger">
            <summary>
            Logger that writes all messages to memory.
            </summary>
            <remarks>
            This class is thread-safe.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Logging.MemoryLogger.Builder">
            <summary>
            The underlying string builder.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.MemoryLogger.VerbosityLevel">
            <summary>
            The level of verbosity used during logging.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.MemoryLogger.Lock">
            <summary>
            Synchronizes access to the logger.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.#ctor(Microsoft.Coyote.Logging.VerbosityLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Logging.MemoryLogger"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogger.Dispose">
            <summary>
            Releases any resources held by the logger.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Logging.MemoryLogWriter">
            <summary>
            Responsible for logging runtime messages using the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>,
            as well as writing all observed messages to memory.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.MemoryLogWriter.Builder">
            <summary>
            Buffer where all observed messages are written.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.MemoryLogWriter.IsWritable">
            <summary>
            True if the log writer is able to write logs, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.#ctor(Microsoft.Coyote.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Logging.MemoryLogWriter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.GetObservedMessages">
            <summary>
            Returns any observed messages that have been written in memory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.IsObservable(Microsoft.Coyote.Logging.LogSeverity)">
            <summary>
            Checks if the specified log severity can be observed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.Close">
            <summary>
            Closes the log writer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.MemoryLogWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Logging.NullLogger">
            <summary>
            Logger that discards all log messages.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.NullLogger.Dispose">
            <summary>
            Releases any resources held by the logger.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Logging.TextWriterLogger">
            <summary>
            Logger that writes to the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.TextWriterLogger.Logger">
            <summary>
            The user-provided <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.TextWriterLogger.VerbosityLevel">
            <summary>
            The level of verbosity used during logging.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.#ctor(System.IO.TextWriter,Microsoft.Coyote.Logging.VerbosityLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Logging.TextWriterLogger"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Write(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.WriteLine(Microsoft.Coyote.Logging.LogSeverity,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Logging.TextWriterLogger.Dispose">
            <summary>
            Releases any resources held by the logger.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Logging.VerbosityLevel">
            <summary>
            The level of verbosity used during logging.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.VerbosityLevel.None">
            <summary>
            Discards any log messages.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.VerbosityLevel.Error">
            <summary>
            Logs error messages that are not recoverable.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.VerbosityLevel.Warning">
            <summary>
            Logs warnings highlighting an abnormal or unexpected event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.VerbosityLevel.Info">
            <summary>
            Logs informational messages.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.VerbosityLevel.Debug">
            <summary>
            Logs messages that are useful for debugging.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Logging.VerbosityLevel.Exhaustive">
            <summary>
            Logs the most detailed messages.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Random.Generator">
            <summary>
            Represents a pseudo-random value generator, which is an algorithm that produces
            a sequence of values that meet certain statistical requirements for randomness.
            During systematic testing, the generation of random values is controlled, which
            allows the runtime to explore combinations of choices to find bugs.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/non-determinism" >Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Random.Generator.Runtime">
            <summary>
            The runtime associated with this random value generator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Random.Generator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Random.Generator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Random.Generator.Create">
            <summary>
            Creates a new pseudo-random value generator.
            </summary>
            <returns>The pseudo-random value generator.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Random.Generator.NextBoolean">
            <summary>
            Returns a random boolean, that can be controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Random.Generator.NextInteger(System.Int32)">
            <summary>
            Returns a random integer, that can be controlled during testing.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.IRandomValueGenerator">
            <summary>
            Interface for random value generators.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.IRandomValueGenerator.Seed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IRandomValueGenerator.Next">
            <summary>
            Returns a non-negative random number.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.IRandomValueGenerator.Next(System.Int32)">
            <summary>
            Returns a non-negative random number less than maxValue.
            </summary>
            <param name="maxValue">Exclusive upper bound.</param>
        </member>
        <member name="M:Microsoft.Coyote.IRandomValueGenerator.NextDouble">
            <summary>
            Returns a random floating-point number that is greater
            than or equal to 0.0, and less than 1.0.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.RandomValueGenerator">
            <summary>
            Basic random value generator that uses the <see cref="T:System.Random"/> generator.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.RandomValueGenerator.Random">
            <summary>
            Device for generating random numbers.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.RandomValueGenerator.RandomSeed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.RandomValueGenerator.Seed">
            <summary>
            The seed currently used by the generator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RandomValueGenerator.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.RandomValueGenerator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RandomValueGenerator.Next">
            <summary>
            Returns a non-negative random number.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.RandomValueGenerator.Next(System.Int32)">
            <summary>
            Returns a non-negative random number less than the specified max value.
            </summary>
            <param name="maxValue">Exclusive upper bound.</param>
        </member>
        <member name="M:Microsoft.Coyote.RandomValueGenerator.NextDouble">
            <summary>
            Returns a random floating-point number that is greater
            than or equal to 0.0, and less than 1.0.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1">
            <summary>
            Implements an abstract state machine that can be used to asynchronously pause controlled operations.
            </summary>
            <remarks>
            We should be able to replace this in certain instances with the "AsyncMethodBuilder override" feature in C# 10.
            See: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/async-method-builders.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1.Status">
            <summary>
            The status of the state machine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1.Runtime">
            <summary>
            Responsible for controlling the execution of this state machine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1.CompletionSource">
            <summary>
            Used to signal the completion of this state machine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1.CurrentStatus">
            <summary>
            The current status of this state machine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1.RunContinuationAsynchronously">
            <summary>
            True if the continuation must execute asynchronously, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1.MoveNext">
            <summary>
            Moves the state machine to its next state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.AsyncAwaiterStateMachine`1.System#Runtime#CompilerServices#IAsyncStateMachine#SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Configures the state machine with a heap-allocated replica.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.AsyncConditionAwaiterStateMachine">
            <summary>
            Implements a state machine that can be used to control and asynchronously wait
            for a condition to get resolved during testing.
            </summary>
            <remarks>
            We should be able to replace this in certain instances with the "AsyncMethodBuilder override" feature in C# 10.
            See: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/async-method-builders.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.AsyncConditionAwaiterStateMachine.Condition">
            <summary>
            Condition that must get resolved to complete this state machine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.AsyncConditionAwaiterStateMachine.DebugMsg">
            <summary>
            The debug message to print while waiting for the condition to get resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.AsyncConditionAwaiterStateMachine.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Func{System.Boolean},System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.AsyncConditionAwaiterStateMachine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.AsyncConditionAwaiterStateMachine.RunAsync(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Func{System.Boolean},System.Boolean,System.String)">
            <summary>
            Runs an asynchronous state machine that will pause the specified operation
            until the condition gets resolved and return the result.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.AsyncConditionAwaiterStateMachine.MoveNext">
            <summary>
            Moves the state machine to its next state.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.AsyncTaskAwaiterStateMachine`1">
            <summary>
            Implements a state machine that can be used to control and asynchronously wait
            for the completion of a task during testing.
            </summary>
            <remarks>
            We should be able to replace this in certain instances with the "AsyncMethodBuilder override" feature in C# 10.
            See: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-10.0/async-method-builders.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.AsyncTaskAwaiterStateMachine`1.AwaitedTask">
            <summary>
            Handle that produces the completion of this state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.AsyncTaskAwaiterStateMachine`1.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.AsyncTaskAwaiterStateMachine`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.AsyncTaskAwaiterStateMachine`1.RunAsync(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Runs an asynchronous state machine that will pause the specified operation
            until the task completes and return the result.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.AsyncTaskAwaiterStateMachine`1.MoveNext">
            <summary>
            Moves the state machine to its next state.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.IControllableAwaiter">
            <summary>
            Represents an awaiter that can be controlled during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.IControllableAwaiter.IsControlled">
            <summary>
            True if the awaiter is controlled, else false.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable">
            <summary>
            Provides an awaitable object that pauses the currently executing operation until
            the specified condition gets resolved.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.Awaiter">
            <summary>
            The paused operation awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.Runtime.ControlledOperation,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter">
            <summary>
            Provides an awaiter that that pauses the currently executing operation until
            the specified condition gets resolved.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.Runtime">
            <summary>
            The runtime managing the paused operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.Operation">
            <summary>
            The paused operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.Condition">
            <summary>
            The condition being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.ResumeAsynchronously">
            <summary>
            True if the continuation must execute asynchronously, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.Runtime.ControlledOperation,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.PausedOperationAwaitable.PausedOperationAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled task completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable">
            <summary>
            Provides an awaitable object that pauses the executing operation until a signal happens.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.Awaiter">
            <summary>
            The paused operation awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.Runtime.ControlledOperation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter">
            <summary>
            Provides an awaiter that that pauses the this.Operationly executing operation until a signal happens.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.Runtime">
            <summary>
            The runtime managing the paused operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.Operation">
            <summary>
            The paused operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.Name">
            <summary>
            The name of the signal being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.Awaiter">
            <summary>
            The yield awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.Runtime.ControlledOperation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.SignalAwaitable.SignalAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled task completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter">
            <summary>
            Implements a task awaiter.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.Runtime">
            <summary>
            The runtime controlling this awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.#ctor(System.Threading.Tasks.Task,System.Runtime.CompilerServices.TaskAwaiter@)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.Wrap(System.Runtime.CompilerServices.TaskAwaiter)">
            <summary>
            Wraps the specified task awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter.Wrap``1(System.Runtime.CompilerServices.TaskAwaiter{``0})">
            <summary>
            Wraps the specified generic task awaiter.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1">
            <summary>
            Implements a generic task awaiter.
            </summary>
            <typeparam name="TResult">The type of the produced result.</typeparam>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.Runtime">
            <summary>
            The runtime controlling this awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.#ctor(System.Threading.Tasks.Task{`0},System.Runtime.CompilerServices.TaskAwaiter{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.TaskAwaiter`1.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled task completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter">
            <summary>
            Implements a <see cref="T:System.Threading.Tasks.ValueTask"/> awaiter.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.AwaitedTask">
            <summary>
            The inner task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.Awaiter">
            <summary>
            The value task awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.Runtime">
            <summary>
            The runtime controlling this awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.#ctor(System.Threading.Tasks.ValueTask@)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.#ctor(System.Threading.Tasks.ValueTask@,System.Runtime.CompilerServices.ValueTaskAwaiter@)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled value task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled value task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.Wrap(System.Runtime.CompilerServices.ValueTaskAwaiter)">
            <summary>
            Wraps the specified value task awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.Wrap``1(System.Runtime.CompilerServices.ValueTaskAwaiter{``0})">
            <summary>
            Wraps the specified generic value task awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.TryGetTask(System.Threading.Tasks.ValueTask@,System.Threading.Tasks.Task@)">
            <summary>
            Tries to safely retrieve the payload of a value task if that payload is an asynchronous task.
            If the payload is a <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource"/>, then it returns null.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter.TryGetTask``1(System.Threading.Tasks.ValueTask{``0}@,System.Threading.Tasks.Task{``0}@)">
            <summary>
            Tries to safely retrieve the payload of a value task if that payload is an asynchronous task.
            If the payload is a <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource"/>, then it returns null.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1">
            <summary>
            Implements a <see cref="T:System.Threading.Tasks.ValueTask"/> awaiter.
            </summary>
            <typeparam name="TResult">The type of the produced result.</typeparam>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.AwaitedTask">
            <summary>
            The inner task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.Awaiter">
            <summary>
            The value task awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.Runtime">
            <summary>
            The runtime controlling this awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.#ctor(System.Threading.Tasks.ValueTask{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.#ctor(System.Threading.Tasks.ValueTask{`0}@,System.Runtime.CompilerServices.ValueTaskAwaiter{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the controlled value task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CompilerServices.ValueTaskAwaiter`1.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that is invoked when the controlled value task completes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.CoyoteRuntime">
            <summary>
            Runtime for controlling, scheduling and executing asynchronous operations.
            </summary>
            <remarks>
            Invoking scheduling methods is thread-safe.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ThreadLocalRuntime">
            <summary>
            Provides access to the runtime associated with each controlled thread, or null
            if the current thread is not controlled.
            </summary>
            <remarks>
            In testing mode, each testing iteration uses a unique runtime instance. To safely
            retrieve it from static methods, we store it in each controlled thread local state.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.AsyncLocalRuntime">
            <summary>
            Provides access to the runtime associated with each async local context, or null
            if the current async local context has no associated runtime.
            </summary>
            <remarks>
            In testing mode, each testing iteration uses a unique runtime instance. To safely
            retrieve it from static methods, we store it in each controlled async local state.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.Current">
            <summary>
            The runtime installed in the current execution context.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ExecutingOperation">
            <summary>
            Provides access to the operation executing on each controlled thread
            during systematic testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.IsExecutionControlled">
            <summary>
            If true, the program execution is controlled by the runtime to
            explore interleavings and sources of nondeterminism, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ExecutionControlledUseCount">
            <summary>
            Count of controlled execution runtimes that have been used in this process.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.Id">
            <summary>
            The unique id of this runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.Scheduler">
            <summary>
            Scheduler that controls the execution of operations during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.SchedulingPolicy">
            <summary>
            The operation scheduling policy used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ControlledTaskScheduler">
            <summary>
            Responsible for scheduling controlled tasks.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.SyncContext">
            <summary>
            The synchronization context where controlled operations are executed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.TaskFactory">
            <summary>
            Creates tasks that are controlled and scheduled by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ThreadPool">
            <summary>
            Pool of threads that execute controlled operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.OperationMap">
            <summary>
            Map from unique operation ids to asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.PendingStartOperationMap">
            <summary>
            Map from newly created operations that have not started executing yet
            to an event handler that is set when the operation starts.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ControlledThreads">
            <summary>
            Map from unique controlled thread names to their corresponding operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ControlledTasks">
            <summary>
            Map from controlled tasks to their corresponding operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.UncontrolledTasks">
            <summary>
            Map from known uncontrolled tasks to an optional string with debug information.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.UncontrolledInvocations">
            <summary>
            Set of method calls with uncontrolled concurrency or other sources of nondeterminism.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.SignalMap">
            <summary>
            Map from signal names to their corresponding counters.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.OperationSignalAwaiters">
            <summary>
            Map from operation ids to the name of the signal they are awaiting.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduledOperation">
            <summary>
            The currently scheduled operation during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.Extension">
            <summary>
            The installed runtime extension, which by default is the <see cref="T:Microsoft.Coyote.Runtime.NullRuntimeExtension"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.CoverageInfo">
            <summary>
            Data structure containing information regarding testing coverage.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ValueGenerator">
            <summary>
            Responsible for generating random values.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.LogWriter">
            <summary>
            Responsible for writing to the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.Logger">
            <inheritdoc/>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.LogManager">
            <summary>
            Manages all registered <see cref="T:Microsoft.Coyote.Runtime.IRuntimeLog"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.SpecificationMonitors">
            <summary>
            List of all registered safety and liveness specification monitors.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.TaskLivenessMonitors">
            <summary>
            List of all registered task liveness monitors.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.StateHashingFunctions">
            <summary>
            List of all registered state hashing functions.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.CompletionSource">
            <summary>
            The runtime completion source.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.RuntimeLock">
            <summary>
            Object that is used to synchronize access to the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.CancellationSource">
            <summary>
            Produces tokens for canceling asynchronous operations when the runtime detaches.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.OperationIdCounter">
            <summary>
            Monotonically increasing operation id counter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.IsRunning">
            <summary>
            Records if the runtime is running.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.ExecutionStatus">
            <summary>
            The execution status of the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.LastPostponedSchedulingPoint">
            <summary>
            If this value is not null, then it represents the last scheduling point that
            was postponed, which the runtime will try to schedule in the next available
            thread that invokes a scheduling point.
            </summary>
            <remarks>
            A scheduling point can be postponed in two scenarios. The first scenario is
            when an uncontrolled thread creates a new controlled operation and tries to
            schedule it, but this is only allowed from a controlled thread. In this case,
            the runtime will resume scheduling from the next available controlled thread.
            The second scenario is when a controlled operation waits or completes, but a
            potential deadlock is found due to uncontrolled concurrency that has not been
            resolved yet. In this case, the runtime will resume scheduling from the next
            available uncontrolled thread, unless there is a genuine deadlock.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleSuppressionCount">
            <summary>
            Value that suppresses interleavings of enabled operations when it is non-zero.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.IsSpecificationInvoked">
            <summary>
            True if the runtime is currently executing inside a specification, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.IsUncontrolledConcurrencyDetected">
            <summary>
            True if uncontrolled concurrency was detected, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.UnhandledException">
            <summary>
            Associated with the bug report is an optional unhandled exception.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.CoyoteRuntime.MaxConcurrencyDegree">
            <summary>
            The max number of operations that were enabled at the same time.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.CoyoteRuntime.BugReport">
            <summary>
            Bug report.
            </summary>
        </member>
        <member name="E:Microsoft.Coyote.Runtime.CoyoteRuntime.OnFailure">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Create(Microsoft.Coyote.Configuration,Microsoft.Coyote.IRandomValueGenerator,Microsoft.Coyote.Logging.LogWriter,Microsoft.Coyote.Runtime.LogManager,Microsoft.Coyote.Runtime.IRuntimeExtension)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CoyoteRuntime"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Create(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.OperationScheduler,Microsoft.Coyote.Logging.LogWriter,Microsoft.Coyote.Runtime.LogManager,Microsoft.Coyote.Runtime.IRuntimeExtension)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CoyoteRuntime"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.OperationScheduler,Microsoft.Coyote.IRandomValueGenerator,Microsoft.Coyote.Logging.LogWriter,Microsoft.Coyote.Runtime.LogManager,Microsoft.Coyote.Runtime.IRuntimeExtension)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.CoyoteRuntime"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RunTestAsync(System.Delegate,System.String)">
            <summary>
            Runs the specified test method.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Schedule(System.Threading.Tasks.Task)">
            <summary>
            Schedules the specified task to execute on the controlled thread pool.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Schedule(System.Action,System.Action,System.Action)">
            <summary>
            Schedules the specified continuation to execute on the controlled thread pool.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleOperation(Microsoft.Coyote.Runtime.ControlledOperation,System.Action,System.Action,System.Action)">
            <summary>
            Schedules the specified operation to execute on the controlled thread pool. The operation
            executes the given action alongside an optional pre-condition and post-condition.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleDelay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Schedules the specified delay to be executed asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.UnwrapTask(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>
            Unwraps the specified task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.UnwrapTask``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            Unwraps the specified task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RegisterKnownControlledTask(System.Threading.Tasks.Task)">
            <summary>
            Registers the specified task as a known controlled task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RegisterKnownUncontrolledTask(System.Threading.Tasks.Task,System.String)">
            <summary>
            Registers the specified task as a known uncontrolled task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CreateControlledOperation(Microsoft.Coyote.Runtime.OperationGroup,System.UInt32)">
            <summary>
            Creates a new controlled operation with the specified group and an optional delay.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CreateUserDefinedOperation(Microsoft.Coyote.Runtime.IOperationBuilder)">
            <summary>
            Creates a new user-defined controlled operation from the specified builder.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RegisterNewOperation(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Registers the specified newly created controlled operation.
            </summary>
            <param name="op">The newly created operation to register.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.StartOperation(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Starts the execution of the specified controlled operation.
            </summary>
            <param name="op">The operation to start executing.</param>
            <remarks>
            This method performs a handshake with <see cref="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WaitOperationsStart"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WaitOperationsStart">
            <summary>
            Waits for all recently created operations to start executing.
            </summary>
            <remarks>
            This method performs a handshake with <see cref="M:Microsoft.Coyote.Runtime.CoyoteRuntime.StartOperation(Microsoft.Coyote.Runtime.ControlledOperation)"/>. It is assumed that this
            method is invoked by the same thread executing the operation and that it runs in the scope
            of a <see cref="T:Microsoft.Coyote.Runtime.SynchronizedSection"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.PauseOperation(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Pauses the execution of the specified operation.
            </summary>
            <remarks>
            It is assumed that this method is invoked by the same thread executing the operation
            and that it runs in the scope of a <see cref="T:Microsoft.Coyote.Runtime.SynchronizedSection"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.PauseOperationUntil(Microsoft.Coyote.Runtime.ControlledOperation,System.Func{System.Boolean},System.Boolean,System.String)">
            <summary>
            Pauses the currently executing operation until the specified condition gets resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.PauseOperationUntilAsync(System.Func{System.Boolean},System.Boolean)">
            <summary>
            Asynchronously pauses the currently executing operation until the specified condition gets resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ScheduleNextOperation(Microsoft.Coyote.Runtime.ControlledOperation,Microsoft.Coyote.Runtime.SchedulingPointType,System.Boolean,System.Boolean)">
            <summary>
            Schedules the next enabled operation, which can include the currently executing operation.
            </summary>
            <param name="current">The currently executing operation, if there is one.</param>
            <param name="type">The type of the scheduling point.</param>
            <param name="isSuppressible">True if the interleaving can be suppressed, else false.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <returns>True if an operation other than the current was scheduled, else false.</returns>
            <remarks>
            An enabled operation is one that is not paused nor completed.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.DelayOperation(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Delays the currently executing operation for a non-deterministically chosen amount of time.
            </summary>
            <remarks>
            The delay is chosen non-deterministically by an underlying fuzzing strategy.
            If a delay of 0 is chosen, then the operation is not delayed.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CompleteOperation(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Completes the specified operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.TryResetOperation(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Tries to reset the specified controlled operation so that it can start executing again.
            This is only allowed if the operation is already completed.
            </summary>
            <param name="op">The operation to reset.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.SuppressScheduling">
            <summary>
            Suppresses scheduling points until <see cref="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ResumeScheduling"/> is invoked,
            unless a scheduling point must occur naturally.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ResumeScheduling">
            <summary>
            Resumes scheduling points that were suppressed by invoking <see cref="M:Microsoft.Coyote.Runtime.CoyoteRuntime.SuppressScheduling"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckpointExecutionTrace">
            <summary>
            Sets a checkpoint in the currently explored execution trace, that allows replaying all
            scheduling decisions until the checkpoint in subsequent iterations.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RandomBoolean">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetNextNondeterministicBooleanChoice(System.String,System.String)">
            <summary>
            Returns the next nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RandomInteger(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetNextNondeterministicIntegerChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns the next nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetNondeterministicDelay(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32)">
            <summary>
            Returns a controlled nondeterministic delay for the specified operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.TryEnableOperationsWithResolvedDependencies(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Tries to enable any operations that have their dependencies resolved. It returns
            true if there is at least one operation enabled, else false.
            </summary>
            <remarks>
            It is assumed that this method runs in the scope of a <see cref="T:Microsoft.Coyote.Runtime.SynchronizedSection"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.TryEnableOperation(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Tries to enable the specified operation, if its dependencies have been resolved.
            </summary>
            <remarks>
            It is assumed that this method runs in the scope of a <see cref="T:Microsoft.Coyote.Runtime.SynchronizedSection"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.TryPauseAndResolveUncontrolledTask(System.Threading.Tasks.Task)">
            <summary>
            Pauses the scheduled controlled operation until either the uncontrolled task completes,
            it tries to invoke an uncontrolled scheduling point, or the timeout expires.
            </summary>
            <remarks>
            It is assumed that this method runs in the scope of a <see cref="T:Microsoft.Coyote.Runtime.SynchronizedSection"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetExecutingOperation">
            <summary>
            Returns the currently executing <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/>,
            or null if no such operation is executing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetExecutingOperation``1">
            <summary>
            Returns the currently executing <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/> of the
            specified type, or null if no such operation is executing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.TryGetExecutingOperation(Microsoft.Coyote.Runtime.ControlledOperation@)">
            <summary>
            Tries to return the currently executing <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/>,
            or false if no such operation is executing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetOperationWithId(System.UInt64)">
            <summary>
            Returns the <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/> associated with the specified
            operation id, or null if no such operation exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetOperationWithId``1(System.UInt64)">
            <summary>
            Returns the <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/> of the specified type that is associated
            with the specified operation id, or null if no such operation exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetRegisteredOperations">
            <summary>
            Returns all registered operations.
            </summary>
            <remarks>
            This operation is thread safe because the systematic testing
            runtime serializes the execution.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetNextOperationId">
            <summary>
            Returns the next available unique operation id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RegisterStateHashingFunction(System.Func{System.Int32})">
            <summary>
            Registers a new state hashing function that contributes to computing
            a representation of the program state in each scheduling step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ComputeProgramState">
            <summary>
            Returns the current program state represented by a hash.
            </summary>
            <remarks>
            The hash is updated in each execution step.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RegisterMonitor``1">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.TryCreateMonitor(System.Type)">
            <summary>
            Tries to create a new <see cref="T:Microsoft.Coyote.Specifications.Monitor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Monitor``1(Microsoft.Coyote.Specifications.Monitor.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.InvokeMonitor(System.Type,Microsoft.Coyote.Specifications.Monitor.Event,System.String,System.String,System.String)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor"/> with the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.MonitorTaskCompletion(System.Threading.Tasks.Task)">
            <summary>
            Creates a liveness monitor that checks if the specified task eventually completes execution successfully.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.StartMonitoringDeadlocks">
            <summary>
            Starts running a background monitor that checks for potential deadlocks.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.IsThreadControlled(System.Threading.Thread)">
            <summary>
            Returns true if the specified thread is controlled, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.IsTaskUncontrolled(System.Threading.Tasks.Task)">
            <summary>
            Returns true if the specified task is uncontrolled, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.IsTaskUncontrolled(System.Threading.Tasks.Task,System.String@)">
            <summary>
            Returns true if the specified task is uncontrolled, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckIfAwaitedTaskIsUncontrolled(System.Threading.Tasks.Task)">
            <summary>
            Checks if the awaited task is uncontrolled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckIfReturnedTaskIsUncontrolled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Checks if the task returned from the specified method is uncontrolled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckIfExecutionHasDeadlocked(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Checks if the execution has deadlocked. This happens when there are no more enabled operations,
            but there is one or more paused operations that are waiting some resource to complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckIfExecutionHasDeadlockedAsync">
            <summary>
            Periodically checks if the execution has deadlocked.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckLivenessErrors">
            <summary>
            Checks for liveness errors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckLivenessThresholdExceeded">
            <summary>
            Checks if a liveness monitor exceeded its threshold and, if yes, it reports an error.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CheckIfSchedulingStepsBoundIsReached">
            <summary>
            Checks if the scheduling steps bound has been reached. If yes,
            it stops the scheduler and kills all enabled machines.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyUnhandledException(System.Exception,System.String)">
            <summary>
            Notify that an exception was not handled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyAssertionFailure(System.String)">
            <summary>
            Notify that an assertion has failed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyUncontrolledInvocation(System.String)">
            <summary>
            Notify that an uncontrolled method invocation was detected.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyUncontrolledSynchronizationInvocation(System.String)">
            <summary>
            Notify that an uncontrolled synchronization method invocation was detected.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyUncontrolledDataNondeterministicInvocation(System.String)">
            <summary>
            Notify that an uncontrolled data non-deterministic method invocation was detected.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyUncontrolledCurrentThread">
            <summary>
            Notify that the currently executing thread is uncontrolled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyUncontrolledTaskWait(System.Threading.Tasks.Task)">
            <summary>
            Notify that an uncontrolled task is being waited.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyUncontrolledTaskWait(System.Threading.Tasks.Task,System.String)">
            <summary>
            Notify that an uncontrolled task with a known source is being waited.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.NotifyUncontrolledTaskReturned(System.Threading.Tasks.Task,System.String)">
            <summary>
            Notify that an uncontrolled task was returned.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.TryHandleUncontrolledConcurrency(System.String,System.String)">
            <summary>
            Invoked when uncontrolled concurrency is detected. Based on the test configuration, it can try
            handle the uncontrolled concurrency, else it terminates the current test iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.WrapAndThrowException(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception containing the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.FormatUncontrolledInvocationExceptionMessage(System.String,System.String)">
            <summary>
            Formats the message of the uncontrolled invocation exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.ProcessUnhandledExceptionInOperation(Microsoft.Coyote.Runtime.ControlledOperation,System.Exception)">
            <summary>
            Processes an unhandled exception in the specified controlled operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.FormatExceptionStackTrace(System.Exception)">
            <summary>
            Formats the stack trace of the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.FormatUncontrolledStackTrace(System.Diagnostics.StackTrace)">
            <summary>
            Formats the specified stack trace of an uncontrolled invocation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.FormatSpecificationMonitorStackTrace(System.Diagnostics.StackTrace)">
            <summary>
            Formats the specified stack trace of a specification monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RaiseOnFailureEvent(System.Exception)">
            <summary>
            Raises the <see cref="E:Microsoft.Coyote.Runtime.CoyoteRuntime.OnFailure"/> event with the specified <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.PopulateTestReport(Microsoft.Coyote.Testing.ITestReport,System.UInt32)">
            <summary>
            Populates the specified test report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.BuildCoverageInfo">
            <summary>
            Builds the <see cref="F:Microsoft.Coyote.Runtime.CoyoteRuntime.CoverageInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.GetCoverageGraph">
            <summary>
            Returns the <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> of the current execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.EnterSynchronizedSection">
            <summary>
            Enters the synchronized section of the runtime. When the synchronized section
            gets disposed, the thread will automatically exit it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.SetCurrentExecutionContext(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Sets up the context of the executing controlled thread, allowing future retrieval
            of runtime related data from the same thread, as well as across threads that share
            the same asynchronous control flow.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.CleanCurrentExecutionContext">
            <summary>
            Removes any runtime related data from the context of the executing controlled thread.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RegisterLog(Microsoft.Coyote.Runtime.IRuntimeLog)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.RemoveLog(Microsoft.Coyote.Runtime.IRuntimeLog)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Stop">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Detach(Microsoft.Coyote.Runtime.ExecutionStatus)">
            <summary>
            Detaches the scheduler and interrupts all controlled operations.
            </summary>
            <remarks>
            It is assumed that this method runs in the scope of a <see cref="T:Microsoft.Coyote.Runtime.SynchronizedSection"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.CoyoteRuntime.Dispose">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.AssertionFailureException">
            <summary>
            The exception that is thrown by the Coyote runtime upon assertion failure.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.AssertionFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.AssertionFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ExceptionProvider">
            <summary>
            Provides a set of static methods for working with specific kinds of <see cref="T:System.Exception"/> instances.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExceptionProvider.ThrowIfThreadInterruptedException(System.Object)">
            <summary>
            Checks if the exception object contains a <see cref="T:System.Threading.ThreadInterruptedException"/>
            and, if yes, it re-throws it so that the exception is not silently consumed.
            </summary>
            <param name="exception">The exception object.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExceptionProvider.ThrowUncontrolledInvocationException(System.String)">
            <summary>
            Throws an exception for the specified uncontrolled method invocation.
            </summary>
            <param name="methodName">The name of the invoked method that is not controlled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExceptionProvider.ThrowUncontrolledDataInvocationException(System.String)">
            <summary>
            Throws an exception for the specified uncontrolled data non-deterministic method invocation.
            </summary>
            <param name="methodName">The name of the invoked method that is not controlled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExceptionProvider.ThrowIfReturnedTaskNotControlled(System.Threading.Tasks.Task,System.String)">
            <summary>
            Throws an exception if the task returned by the method with the specified name
            is not controlled during systematic testing.
            </summary>
            <param name="task">The task to check if it is controlled or not.</param>
            <param name="methodName">The name of the method returning the task.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExceptionProvider.ThrowIfReturnedTaskNotControlled``1(System.Threading.Tasks.Task{``0},System.String)">
            <summary>
            Throws an exception if the task returned by the method with the specified name
            is not controlled during systematic testing.
            </summary>
            <param name="task">The task to check if it is controlled or not.</param>
            <param name="methodName">The name of the method returning the task.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExceptionProvider.ThrowIfReturnedValueTaskNotControlled(System.Threading.Tasks.ValueTask@,System.String)">
            <summary>
            Throws an exception if the value task returned by the method with the specified name
            is not controlled during systematic testing.
            </summary>
            <param name="task">The value task to check if it is controlled or not.</param>
            <param name="methodName">The name of the method returning the task.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExceptionProvider.ThrowIfReturnedValueTaskNotControlled``1(System.Threading.Tasks.ValueTask{``0}@,System.String)">
            <summary>
            Throws an exception if the value task returned by the method with the specified name
            is not controlled during systematic testing.
            </summary>
            <param name="task">The value task to check if it is controlled or not.</param>
            <param name="methodName">The name of the method returning the task.</param>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.RuntimeException">
            <summary>
            An exception that is thrown by the Coyote runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.RuntimeException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.RuntimeException"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ExecutionStatus">
            <summary>
            The execution status of the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionStatus.Running">
            <summary>
            The runtime is still executing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionStatus.PathExplored">
            <summary>
            The execution terminated because the path was fully explored.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionStatus.BoundReached">
            <summary>
            The execution terminated because the exploration bound was reached.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionStatus.Deadlocked">
            <summary>
            The execution terminated because of a potential deadlock.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionStatus.ConcurrencyUncontrolled">
            <summary>
            The execution terminated because of uncontrolled concurrency.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionStatus.BugFound">
            <summary>
            The execution terminated because a bug was found.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ExecutionTrace">
            <summary>
            An execution trace implemented as a sequence of steps denoting controlled
            scheduling and nondeterministic decisions taken during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionTrace.Steps">
            <summary>
            The steps of this execution trace.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ExecutionTrace.Length">
            <summary>
            The number of steps in the trace.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ExecutionTrace.Item(System.Int32)">
            <summary>
            Indexes the trace.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.ExecutionTrace"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Create">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Runtime.ExecutionTrace"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.AddSchedulingChoice(System.UInt64,Microsoft.Coyote.Runtime.SchedulingPointType)">
            <summary>
            Adds a scheduling choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.AddNondeterministicBooleanChoice(System.Boolean,Microsoft.Coyote.Runtime.SchedulingPointType)">
            <summary>
            Adds a nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.AddNondeterministicIntegerChoice(System.Int32,Microsoft.Coyote.Runtime.SchedulingPointType)">
            <summary>
            Adds a nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Pop">
            <summary>
            Returns the latest schedule step and removes it from the trace.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Peek">
            <summary>
            Returns the latest schedule step without removing it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.System#Collections#Generic#IEnumerable{Microsoft#Coyote#Runtime#ExecutionTrace#Step}#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Push(Microsoft.Coyote.Runtime.ExecutionTrace.Step)">
            <summary>
            Pushes a new step to the trace.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Append(Microsoft.Coyote.Runtime.ExecutionTrace)">
            <summary>
            Appends the steps from the specified trace.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.ExtendOrReplace(Microsoft.Coyote.Runtime.ExecutionTrace)">
            <summary>
            Extends the trace with any new steps from the specified trace, or replaces the trace
            with the new trace if the two traces diverge.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Clear">
            <summary>
            Clears the trace.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ExecutionTrace.DecisionKind">
            <summary>
            The kind of decision taken during an execution step.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ExecutionTrace.Step">
            <summary>
            Contains metadata related to a single execution step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionTrace.Step.Index">
            <summary>
            The unique index of this execution step.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ExecutionTrace.Step.Kind">
            <summary>
            The kind of controlled decision taken in this execution step.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ExecutionTrace.Step.SchedulingPoint">
            <summary>
            The type of scheduling point encountered in this execution step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionTrace.Step.ScheduledOperationId">
            <summary>
            The id of the scheduled operation. Only relevant if this is
            a regular execution step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionTrace.Step.BooleanChoice">
            <summary>
            The non-deterministic boolean choice value. Only relevant if
            this is a choice execution step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionTrace.Step.IntegerChoice">
            <summary>
            The non-deterministic integer choice value. Only relevant if
            this is a choice execution step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionTrace.Step.Previous">
            <summary>
            The previous execution step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ExecutionTrace.Step.Next">
            <summary>
            The next execution step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Step.CreateSchedulingChoice(System.Int32,System.UInt64,Microsoft.Coyote.Runtime.SchedulingPointType)">
            <summary>
            Creates an execution step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Step.CreateNondeterministicBooleanChoice(System.Int32,System.Boolean,Microsoft.Coyote.Runtime.SchedulingPointType)">
            <summary>
            Creates a nondeterministic boolean choice execution step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Step.CreateNondeterministicIntegerChoice(System.Int32,System.Int32,Microsoft.Coyote.Runtime.SchedulingPointType)">
            <summary>
            Creates a nondeterministic integer choice execution step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Step.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Step.Equals(Microsoft.Coyote.Runtime.ExecutionTrace.Step)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Runtime.ExecutionTrace.Step"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Runtime.ExecutionTrace.Step"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Step.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Step.System#IEquatable{Microsoft#Coyote#Runtime#ExecutionTrace#Step}#Equals(Microsoft.Coyote.Runtime.ExecutionTrace.Step)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Runtime.ExecutionTrace.Step"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Runtime.ExecutionTrace.Step"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ExecutionTrace.Step.System#IComparable{Microsoft#Coyote#Runtime#ExecutionTrace#Step}#CompareTo(Microsoft.Coyote.Runtime.ExecutionTrace.Step)">
            <summary>
            Compares the specified <see cref="T:Microsoft.Coyote.Runtime.ExecutionTrace.Step"/> with the current
            <see cref="T:Microsoft.Coyote.Runtime.ExecutionTrace.Step"/> for ordering or sorting purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.IRuntimeExtension">
            <summary>
            Interface for a Coyote runtime extension.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeExtension.RunTest(System.Delegate,System.Threading.Tasks.Task@)">
            <summary>
            Runs the specified test entry point delegate and returns
            a task that completes when the test is completed.
            </summary>
            <param name="test">The test entry point delegate.</param>
            <param name="task">A task that completes when the test is completed.</param>
            <returns>True if the extension can execute the test, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeExtension.BuildCoverageInfo">
            <summary>
            Builds the extended <see cref="T:Microsoft.Coyote.Coverage.CoverageInfo"/>.
            </summary>
            <remarks>
            This information is only available when <see cref="F:Microsoft.Coyote.Configuration.IsActivityCoverageReported"/> is enabled.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeExtension.GetCoverageInfo">
            <summary>
            Returns the extended <see cref="T:Microsoft.Coyote.Coverage.CoverageInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeExtension.GetCoverageGraph">
            <summary>
            Returns the <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> of the current execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeExtension.WaitUntilQuiescenceAsync">
            <summary>
            Returns a task that completes once all operations managed by the extension reach quiescence.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.NullRuntimeExtension">
            <summary>
            Implementation of a no-op runtime extension.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.NullRuntimeExtension.Instance">
            <summary>
            Gets a cached <see cref="T:Microsoft.Coyote.Runtime.NullRuntimeExtension"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.NullRuntimeExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.NullRuntimeExtension"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.NullRuntimeExtension.Microsoft#Coyote#Runtime#IRuntimeExtension#RunTest(System.Delegate,System.Threading.Tasks.Task@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.NullRuntimeExtension.Microsoft#Coyote#Runtime#IRuntimeExtension#BuildCoverageInfo">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.NullRuntimeExtension.Microsoft#Coyote#Runtime#IRuntimeExtension#GetCoverageInfo">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.NullRuntimeExtension.Microsoft#Coyote#Runtime#IRuntimeExtension#GetCoverageGraph">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.NullRuntimeExtension.Microsoft#Coyote#Runtime#IRuntimeExtension#WaitUntilQuiescenceAsync">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.NullRuntimeExtension.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ICoyoteRuntime">
            <summary>
            Interface that exposes base runtime methods for Coyote.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ICoyoteRuntime.Logger">
            <summary>
            Gets or sets an <see cref="T:Microsoft.Coyote.Logging.ILogger"/> for logging runtime messages.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="E:Microsoft.Coyote.Runtime.ICoyoteRuntime.OnFailure">
            <summary>
            Callback that is fired when an exception is thrown that includes failed assertions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.RegisterMonitor``1">
            <summary>
            Registers a new specification monitor of the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Monitor``1(Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.Event"/>.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event to send to the monitor.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.RandomBoolean">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled during testing.
            </summary>
            <returns>The nondeterministic boolean choice.</returns>
            <remarks>
            See <see href="/coyote/concepts/non-determinism">Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer choice, that can be controlled during testing.
            The value is used to generate an integer in the range [0..maxValue).
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The nondeterministic integer choice.</returns>
            <remarks>
            See <see href="/coyote/concepts/non-determinism">Program non-determinism</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
            <param name="predicate">The predicate to check.</param>
            <param name="s">The message to print if the assertion fails.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.RegisterLog(Microsoft.Coyote.Runtime.IRuntimeLog)">
            <summary>
            Use this method to register an <see cref="T:Microsoft.Coyote.Runtime.IRuntimeLog"/>.
            </summary>
            <param name="log">The log writer to register.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.RemoveLog(Microsoft.Coyote.Runtime.IRuntimeLog)">
            <summary>
            Use this method to unregister a previously registered <see cref="T:Microsoft.Coyote.Runtime.IRuntimeLog"/>.
            </summary>
            <param name="log">The previously registered log writer to unregister.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ICoyoteRuntime.Stop">
            <summary>
            Terminates the runtime, causing any executing operations to eventually complete.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.IRuntimeLog">
            <summary>
            Interface that allows an external module to track what
            is happening in the <see cref="T:Microsoft.Coyote.Runtime.ICoyoteRuntime"/>.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnCreateMonitor(System.String)">
            <summary>
            Invoked when the specified monitor has been created.
            </summary>
            <param name="monitorType">The name of the type of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnMonitorExecuteAction(System.String,System.String,System.String)">
            <summary>
            Invoked when the specified monitor executes an action.
            </summary>
            <param name="monitorType">Name of type of the monitor that is executing the action.</param>
            <param name="stateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Invoked when the specified monitor is about to process an event.
            </summary>
            <param name="monitorType">Name of type of the monitor that will process the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The name of the state the sender is in.</param>
            <param name="e">The event being processed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnMonitorRaiseEvent(System.String,System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Invoked when the specified monitor raised an event.
            </summary>
            <param name="monitorType">Name of type of the monitor raising the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor enters or exits a state.
            </summary>
            <param name="monitorType">The name of the type of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
            is not null, then the temperature is appended to the state name in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Invoked when the specified monitor finds an error.
            </summary>
            <param name="monitorType">The name of the type of the monitor.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnRandom(System.Boolean,System.String,System.String)">
            <summary>
            Invoked when the specified controlled nondeterministic boolean result has been obtained.
            </summary>
            <param name="result">The nondeterministic boolean result.</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnRandom(System.Int32,System.String,System.String)">
            <summary>
            Invoked when the specified controlled nondeterministic integer result has been obtained.
            </summary>
            <param name="result">The nondeterministic integer result.</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnAssertionFailure(System.String)">
            <summary>
            Invoked when the specified assertion failure has occurred.
            </summary>
            <param name="error">The text of the error.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IRuntimeLog.OnCompleted">
            <summary>
            Invoked when a log is complete (and is about to be closed).
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.LogManager">
            <summary>
            Manages all registered <see cref="T:Microsoft.Coyote.Runtime.IRuntimeLog"/> objects.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.LogManager.Logs">
            <summary>
            The set of registered log writers.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogCreateMonitor(System.String)">
            <summary>
            Logs that the specified monitor has been created.
            </summary>
            <param name="monitorType">The name of the type of the monitor that has been created.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogMonitorExecuteAction(System.String,System.String,System.String)">
            <summary>
            Logs that the specified monitor executes an action.
            </summary>
            <param name="monitorType">Name of type of the monitor that is executing the action.</param>
            <param name="stateName">The name of the state in which the action is being executed.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Logs that the specified monitor is about to process an event.
            </summary>
            <param name="monitorType">Name of type of the monitor that will process the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The name of the state the sender is in.</param>
            <param name="e">The event being processed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogMonitorRaiseEvent(System.String,System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Logs that the specified monitor raised an event.
            </summary>
            <param name="monitorType">Name of type of the monitor raising the event.</param>
            <param name="stateName">The name of the state in which the event is being raised.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Logs that the specified monitor enters or exits a state.
            </summary>
            <param name="monitorType">The name of the type of the monitor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited; if <paramref name="isInHotState"/>
            is not null, then the temperature is appended to the statename in brackets, e.g. "stateName[hot]".</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Logs that the specified monitor has found an error.
            </summary>
            <param name="monitorType">The name of the type of the monitor.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="isInHotState">If true, the monitor is in a hot state; if false, the monitor is in a cold state;
            else no liveness state is available.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogRandom(System.Boolean,System.String,System.String)">
            <summary>
            Logs that the specified random boolean result has been obtained.
            </summary>
            <param name="result">The random boolean result.</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogRandom(System.Int32,System.String,System.String)">
            <summary>
            Logs that the specified random integer result has been obtained.
            </summary>
            <param name="result">The random integer result.</param>
            <param name="callerName">The name of the caller, if any.</param>
            <param name="callerType">The type of the caller, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogAssertionFailure(System.String)">
            <summary>
            Logs that the specified assertion failure has occurred.
            </summary>
            <param name="error">The text of the error.</param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.LogCompletion">
            <summary>
            Use this method to notify all logs that the test iteration is complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.RegisterLog(Microsoft.Coyote.Runtime.IRuntimeLog,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Use this method to register an <see cref="T:Microsoft.Coyote.Runtime.IRuntimeLog"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.RemoveLog(Microsoft.Coyote.Runtime.IRuntimeLog)">
            <summary>
            Use this method to unregister a previously registered <see cref="T:Microsoft.Coyote.Runtime.IRuntimeLog"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.LogManager.GetLogsOfType``1">
            <summary>
            Returns all registered logs of type <typeparamref name="TRuntimeLog"/>, if there are any.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter">
            <summary>
            This class implements <see cref="T:Microsoft.Coyote.Runtime.IRuntimeLog"/> and generates output in a a human readable text format.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.LogWriter">
            <summary>
            Logs messages using the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.Logger">
            <summary>
            Used for logging runtime messages.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnCreateMonitor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnMonitorExecuteAction(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnMonitorRaiseEvent(System.String,System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnRandom(System.Boolean,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnRandom(System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnAssertionFailure(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogTextFormatter.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.RuntimeLogXmlFormatter">
            <summary>
            This class implements <see cref="T:Microsoft.Coyote.Runtime.IRuntimeLog"/> and generates log output in an XML format.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.RuntimeLogXmlFormatter.Writer">
            <summary>
            Writes to XML format.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.RuntimeLogXmlFormatter.IsClosed">
            <summary>
            True if the formatter is closed, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeLogXmlFormatter.OnCompleted">
            <summary>
            Invoked when a log is complete (and is about to be closed).
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.OnFailureHandler">
            <summary>
            Handles the <see cref="E:Microsoft.Coyote.Runtime.ICoyoteRuntime.OnFailure"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ControlledOperation">
            <summary>
            Represents an operation that can be controlled during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.Runtime">
            <summary>
            The runtime managing this operation.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ControlledOperation.Id">
            <summary>
            The unique id of this operation.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ControlledOperation.Name">
            <summary>
            The name of this operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.Status">
            <summary>
            The status of this operation. An operation can be scheduled only
            if it is <see cref="F:Microsoft.Coyote.Runtime.OperationStatus.Enabled"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.Group">
            <summary>
            The group where this operation has membership. This can be used
            by the scheduler to optimize exploration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.Continuations">
            <summary>
            Queue of continuations that this operation must execute before it completes.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.Dependency">
            <summary>
            Dependency that must get resolved before this operation can resume executing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.SyncEvent">
            <summary>
            Synchronization mechanism for controlling the execution of this operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.LastSchedulingPoint">
            <summary>
            The type of the last encountered scheduling point.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.LastHashedProgramState">
            <summary>
            A value that represents the hashed program state when this operation last executed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.LastAccessedSharedState">
            <summary>
            A value that represents the shared state being accessed when this
            operation last executed, if there was any such state access.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.IsSourceUncontrolled">
            <summary>
            True if the source of this operation is uncontrolled, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledOperation.IsDependencyUncontrolled">
            <summary>
            True if the dependency is uncontrolled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ControlledOperation.IsRoot">
            <summary>
            True if this is the root operation, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ControlledOperation.IsPaused">
            <summary>
            True if this operation is currently paused, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.#ctor(System.UInt64,System.String,Microsoft.Coyote.Runtime.OperationGroup,Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.ExecuteContinuations">
            <summary>
            Executes all continuations of this operation in order, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.WaitSignal">
            <summary>
            Pauses the execution of this operation until it receives a signal.
            </summary>
            <remarks>
            It is assumed that this method is invoked by the same thread executing this operation.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.Signal">
            <summary>
            Signals this operation to resume its execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.SetContinuationCallback(System.Action)">
            <summary>
            Sets a callback that executes the next continuation of this operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.PauseWithDependency(System.Func{System.Boolean},System.Boolean)">
            <summary>
            Pauses this operation and sets a callback that returns true when the
            dependency causing the pause has been resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.TryEnable">
            <summary>
            Tries to enable this operation if its dependency has been resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.GetHashedState(Microsoft.Coyote.Runtime.SchedulingPolicy)">
            <summary>
            Returns the hashed state of this operation for the specified policy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.ToString">
            <summary>
            Returns a string that represents the current operation id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.Equals(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.System#IEquatable{Microsoft#Coyote#Runtime#ControlledOperation}#Equals(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Runtime.ControlledOperation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledOperation.Dispose">
            <summary>
            Releases any held resources.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.DelayOperation">
            <summary>
            Represents a controlled operation that can be delayed during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.DelayOperation.Delay">
            <summary>
            The value until the operation may resume executing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.DelayOperation.#ctor(System.UInt64,System.String,System.UInt32,Microsoft.Coyote.Runtime.OperationGroup,Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.DelayOperation"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.IOperationBuilder">
            <summary>
            Interface of a controlled operation builder.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.IOperationBuilder.Name">
            <summary>
            The name of the operation being built.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.IOperationBuilder.GroupId">
            <summary>
            Optional id of the operation group that contains the operation being built.
            If multiple operations have the same group id, then the test engine can use
            this information to optimize exploration.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.IOperationBuilder.HashedStateCallback">
            <summary>
            Optional callback that returns the hashed state of the operation being built.
            If provided, it can be used by the test engine to optimize exploration.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.Operation">
            <summary>
            Provides a set of static methods for instrumenting concurrency primitives
            that can then be controlled during testing.
            </summary>
            <remarks>
            These methods are thread-safe and no-op unless the test engine is attached.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.GetNextId">
            <summary>
            Returns the next available unique operation id, or null if the test engine is detached.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.CreateNext">
            <summary>
            Creates a new controlled operation and returns its unique id, or null
            if the test engine is detached.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.CreateFrom(Microsoft.Coyote.Runtime.IOperationBuilder)">
            <summary>
            Creates a new controlled operation from the specified builder and returns its
            unique id, or null if the test engine is detached.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.Start(System.UInt64)">
            <summary>
            Starts executing the operation with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.PauseUntil(System.Func{System.Boolean})">
            <summary>
            Pauses the currently executing operation until the specified condition gets resolved.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.PauseUntilCompleted(System.UInt64)">
            <summary>
            Pauses the currently executing operation until the operation with the specified id completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.PauseUntilAsync(System.Func{System.Boolean},System.Boolean)">
            <summary>
            Asynchronously pauses the currently executing operation until the operation with the specified id completes.
            If <paramref name="resumeAsynchronously"/> is set to true, then after the asynchronous pause, a new operation
            will be created to execute the continuation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.PauseUntilCompletedAsync(System.UInt64,System.Boolean)">
            <summary>
            Asynchronously pauses the currently executing operation until the operation with the specified id completes.
            If <paramref name="resumeAsynchronously"/> is set to true, then after the asynchronous pause, a new operation
            will be created to execute the continuation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.ScheduleNext">
            <summary>
            Schedules the next enabled operation, which can include the currently executing operation.
            </summary>
            <remarks>
            An enabled operation is one that is not blocked nor completed.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.Complete">
            <summary>
            Completes the currently executing operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.Operation.TryReset(System.UInt64)">
            <summary>
            Tries to reset the the operation with the specified id so that it can be reused.
            This is only allowed if the operation is already completed.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.OperationGroup">
            <summary>
            Represents a group of controlled operations that can be scheduled together during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationGroup.Id">
            <summary>
            The unique id of this group.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationGroup.Owner">
            <summary>
            The controlled operation that owns this group.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationGroup.Members">
            <summary>
            The controlled operations that are members of this group.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.#ctor(System.Nullable{System.Guid},Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.OperationGroup"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.Create(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Runtime.OperationGroup"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.Create(System.Nullable{System.Guid},Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Runtime.OperationGroup"/> instance with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.RegisterMember(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Registers the specified operation as a member of this group.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the members of this group.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the members of this group.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.IsMember(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Returns true if the specified operation is a member of this group, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.IsCompleted">
            <summary>
            Determines whether all members of this group are completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.ToString">
            <summary>
            Returns a string that represents the current group id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.Equals(Microsoft.Coyote.Runtime.OperationGroup)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Runtime.OperationGroup"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Runtime.OperationGroup"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationGroup.System#IEquatable{Microsoft#Coyote#Runtime#OperationGroup}#Equals(Microsoft.Coyote.Runtime.OperationGroup)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Runtime.OperationGroup"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Runtime.OperationGroup"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.OperationStatus">
            <summary>
            The status of a controlled operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationStatus.None">
            <summary>
            The operation does not have a status yet.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationStatus.Enabled">
            <summary>
            The operation is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationStatus.Paused">
            <summary>
            The operation is paused until a dependency is resolved.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationStatus.PausedOnDelay">
            <summary>
            The operation is paused until a delay completes.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationStatus.PausedOnResource">
            <summary>
            The operation is paused until it acquires a resource.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationStatus.PausedOnReceive">
            <summary>
            The operation is paused until receives an event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationStatus.Suppressed">
            <summary>
            The operation is suppressed until it is resumed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationStatus.Completed">
            <summary>
            The operation is completed.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.UserDefinedOperation">
            <summary>
            Represents a controlled operation that can be delayed during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.UserDefinedOperation.GroupId">
            <summary>
            Optional id of the operation group that contains the operation being built.
            If multiple operations have the same group id, then the test engine can use
            this information to optimize exploration.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.UserDefinedOperation.HashedStateCallback">
            <summary>
            Optional callback that returns the hashed state of the operation being built.
            If provided, it can be used by the test engine to optimize exploration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.UserDefinedOperation.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.Runtime.IOperationBuilder,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.UserDefinedOperation"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.UserDefinedOperation.GetHashedState(Microsoft.Coyote.Runtime.SchedulingPolicy)">
            <summary>
            Returns the hashed state of this operation for the specified policy.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.RuntimeProvider">
            <summary>
            Provides methods for creating or accessing a <see cref="T:Microsoft.Coyote.Runtime.ICoyoteRuntime"/> runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.RuntimeProvider.RuntimeMap">
            <summary>
            Map from runtime identifiers to runtime instances.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.RuntimeProvider.Default">
            <summary>
            The default installed runtime instance.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.RuntimeProvider.Current">
            <summary>
            The runtime installed in the current execution context.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.RuntimeProvider.SyncObject">
            <summary>
            Protects access to the default installed runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeProvider.CreateAndInstall(Microsoft.Coyote.Configuration,Microsoft.Coyote.Logging.LogWriter,Microsoft.Coyote.Runtime.LogManager,Microsoft.Coyote.Runtime.IRuntimeExtension)">
            <summary>
            Creates a new Coyote runtime with the specified <see cref="T:Microsoft.Coyote.Configuration"/> and sets it
            as the default installed runtime, or returns the runtime if it already exists.
            </summary>
            <remarks>
            Only one Coyote runtime can be used per process. If you create a new Coyote runtime
            it replaces the previously installed one. This is a thread-safe operation.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeProvider.CreateWithConfiguration(Microsoft.Coyote.Configuration,Microsoft.Coyote.Logging.LogWriter,Microsoft.Coyote.Runtime.LogManager,Microsoft.Coyote.Runtime.IRuntimeExtension)">
            <summary>
            Creates a new Coyote runtime with the specified <see cref="T:Microsoft.Coyote.Configuration"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeProvider.Register(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Registers the specified runtime with the provider and returns a
            unique identifier that can be used to retrieve the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeProvider.Deregister(System.Guid)">
            <summary>
            Deregisters the runtime with the specified identifier from the provider.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeProvider.TryGetFromSynchronizationContext(Microsoft.Coyote.Runtime.CoyoteRuntime@)">
            <summary>
            Tries to get the runtime from the current synchronization context, if there is one available.
            </summary>
            <returns>True if the runtime was found, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.RuntimeProvider.TryGetFromId(System.Guid,Microsoft.Coyote.Runtime.CoyoteRuntime@)">
            <summary>
            Tries to get the runtime with the specified identifier, if there is one available.
            </summary>
            <returns>True if the runtime was found, else false.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ControlledSynchronizationContext">
            <summary>
            The synchronization context where controlled operations are executed.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ControlledSynchronizationContext.Runtime">
            <summary>
            Responsible for controlling the execution of operations during systematic testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ControlledSynchronizationContext.SchedulingPolicy">
            <summary>
            The operation scheduling policy used by the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledSynchronizationContext.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.ControlledSynchronizationContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledSynchronizationContext.CreateCopy">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledSynchronizationContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.ControlledTaskScheduler">
            <summary>
            A scheduler that controls the scheduled tasks.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.ControlledTaskScheduler.Runtime">
            <summary>
            Responsible for controlling the execution of operations during systematic testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.ControlledTaskScheduler.MaximumConcurrencyLevel">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledTaskScheduler.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.ControlledTaskScheduler"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledTaskScheduler.GetScheduledTasks">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledTaskScheduler.ExecuteTask(System.Threading.Tasks.Task)">
            <summary>
            Executes the specified task on this scheduler.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.ControlledTaskScheduler.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.OperationScheduler">
            <summary>
            Scheduler that controls the execution of operations during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationScheduler.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationScheduler.Portfolio">
            <summary>
            The portfolio of exploration strategies.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.OperationScheduler.Strategy">
            <summary>
            The exploration strategy used in the current iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationScheduler.Reducers">
            <summary>
            The pipeline of schedule reducers.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.OperationScheduler.ValueGenerator">
            <summary>
            Responsible for generating random values.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.OperationScheduler.SchedulingPolicy">
            <summary>
            The installed operation scheduling policy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationScheduler.Trace">
            <summary>
            The trace explored in the current iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.OperationScheduler.PrefixTrace">
            <summary>
            The prefix trace, if there is any specified. The scheduler will attempt
            to reproduce this trace, before performing any new exploration.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.OperationScheduler.StepCount">
            <summary>
            The count of exploration steps in the current iteration.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.OperationScheduler.IsMaxStepsReached">
            <summary>
            True if the max number of steps that should be explored has been
            reached in the current iteration, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.OperationScheduler.IsIterationFair">
            <summary>
            True if the current iteration is fair, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.OperationScheduler.IsReplaying">
            <summary>
            Checks if the scheduler is replaying the schedule trace.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.SchedulingPolicy,Microsoft.Coyote.IRandomValueGenerator,Microsoft.Coyote.Runtime.ExecutionTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.OperationScheduler"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.Setup(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.ExecutionTrace)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Coyote.Runtime.OperationScheduler"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.Setup(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.SchedulingPolicy,Microsoft.Coyote.IRandomValueGenerator)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Coyote.Runtime.OperationScheduler"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.InitializeNextIteration(System.UInt32,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes the next test iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <param name="logWriter">The log writer associated with the current test iteration.</param>
            <returns>True to start the specified test iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <summary>
            Returns the next controlled operation to schedule.
            </summary>
            <param name="ops">The set of available operations.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.GetNextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.GetNextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.GetNextDelay(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next delay.
            </summary>
            <param name="ops">Operations executing during the current test iteration.</param>
            <param name="current">The operation requesting the delay.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next delay.</param>
            <returns>True if there is a next delay, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.CheckpointExecutionTrace">
            <summary>
            Sets a checkpoint in the currently explored execution trace, that allows replaying all
            scheduling decisions until the checkpoint in subsequent iterations.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.GetStrategyName">
            <summary>
            Returns the name of the current exploration strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.GetDescription">
            <summary>
            Returns a description of the current exploration strategy in text format.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.OperationScheduler.GetLastError">
            <summary>
            Returns the last scheduling error, or the empty string if there is none.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.IScheduleReducer">
            <summary>
            Interface of a reducer that can choose a subset of all available operations
            to be scheduled at each scheduling step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.IScheduleReducer.ReduceOperations(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Returns a subset of all available operations to be scheduled at the next scheduling step.
            </summary>
            <param name="ops">All available operations to schedule.</param>
            <param name="current">The currently scheduled operation.</param>
            <returns>The subset of operations to schedule.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.SharedStateReducer">
            <summary>
            A reducer that analyzes shared state accesses to reduce the set of operations
            to be scheduled at each scheduling step.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SharedStateReducer.ReadAccesses">
            <summary>
            Set of values corresponding to shared state that has been accessed
            by 'READ' operations across all iterations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SharedStateReducer.WriteAccesses">
            <summary>
            Set of values corresponding to shared state that has been accessed
            by 'WRITE' operations across all iterations.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SharedStateReducer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.SharedStateReducer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SharedStateReducer.ReduceOperations(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.SchedulingActivityInfo">
            <summary>
            Defines scheduling activity information that can be used to monitor test execution.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.SchedulingActivityInfo.OperationCount">
            <summary>
            Number of created operations since last activity check.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Runtime.SchedulingActivityInfo.StepCount">
            <summary>
            Number of scheduling steps since last activity check.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.SchedulingPoint">
            <summary>
            Provides a set of static methods for declaring points in the execution where interleavings
            between operations should be explored during testing.
            </summary>
            <remarks>
            These methods are thread-safe and no-op unless the test engine is attached.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.Interleave">
            <summary>
            Explores a possible interleaving with another controlled operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.Yield">
            <summary>
            Attempts to yield execution to another controlled operation.
            </summary>
            <remarks>
            Invoking this method might lower the scheduling priority of the currently executing
            operation when certain exploration strategies are used.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.Read(System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Explores a possible interleaving due to a 'READ' operation on the specified shared state.
            </summary>
            <param name="state">The shared state that is being read represented as a string.</param>
            <param name="comparer">
            Checks if the read shared state is equal with another shared state that is being accessed concurrently.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.Write(System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Explores a possible interleaving due to a 'WRITE' operation on the specified shared state.
            </summary>
            <param name="state">The shared state that is being written represented as a string.</param>
            <param name="comparer">
            Checks if the written shared state is equal with another shared state that is being accessed concurrently.
            </param>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.Wait(System.String)">
            <summary>
            Waits for a signal to a resource with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.WaitAsync(System.String)">
            <summary>
            Waits asynchronously for a signal to a resource with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.Signal(System.String)">
            <summary>
            Signals a resource with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.Suppress">
            <summary>
            Suppresses interleavings until <see cref="M:Microsoft.Coyote.Runtime.SchedulingPoint.Resume"/> is invoked.
            </summary>
            <remarks>
            This method does not suppress interleavings that happen when an operation is waiting
            some other operation to complete, when an operation completes and the scheduler
            switches to a new operation, or interleavings from uncontrolled concurrency.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.Resume">
            <summary>
            Resumes interleavings that were suppressed by invoking <see cref="M:Microsoft.Coyote.Runtime.SchedulingPoint.Suppress"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.SetCheckpoint">
            <summary>
            Sets a checkpoint in the execution path that is so far explored during the current
            test iteration. This will capture all controlled scheduling and nondeterministic
            decisions taken until the checkpoint and the testing engine will then try to replay
            the same decisions in subsequent iterations before performing any new exploration.
            </summary>
            <remarks>
            Only a single checkpoint can be set at a time, and invoking this method with an
            existing checkpoint will either extend it with new decisions, or overwrite it if
            the new checkpoint diverges or is empty.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SchedulingPoint.IsUserDefined(Microsoft.Coyote.Runtime.SchedulingPointType)">
            <summary>
            Returns true if the specified scheduling point is used-defined.
            </summary>
            <remarks>
            A user-defined scheduling point is one that can be explicitly created
            by invoking one of the <see cref="T:Microsoft.Coyote.Runtime.SchedulingPoint"/> methods.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.SchedulingPointType">
            <summary>
            The type of a scheduling point.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Default">
            <summary>
            The default scheduling point.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Create">
            <summary>
            A controlled operation was created.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Start">
            <summary>
            A controlled operation started executing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.ContinueWith">
            <summary>
            A controlled operation scheduled its continuation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Interleave">
            <summary>
            A controlled operation yielded its execution.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Yield">
            <summary>
            A controlled operation lowered its priority and yielded its execution.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Read">
            <summary>
            A controlled operation is reading shared state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Write">
            <summary>
            A controlled operation is writing shared state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Pause">
            <summary>
            A controlled operation is paused until its dependency is resolved.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Acquire">
            <summary>
            A controlled operation is acquiring a synchronized resource.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Send">
            <summary>
            A controlled operation sent an event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Receive">
            <summary>
            A controlled operation received an event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Complete">
            <summary>
            A controlled operation completed its execution.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.Halt">
            <summary>
            A controlled operation halted executing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPointType.InjectFailure">
            <summary>
            A controlled operation injected a failure.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.SchedulingPolicy">
            <summary>
            Supported policies for scheduling the execution of operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPolicy.None">
            <summary>
            Policy that uses the default uncontrolled scheduler for executing operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPolicy.Fuzzing">
            <summary>
            Policy that injects controlled delays to fuzz the schedule of operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SchedulingPolicy.Interleaving">
            <summary>
            Policy that controls the lifetime and schedule of operations to serialize
            the execution and explore interleavings.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.SynchronizedSection">
            <summary>
            Resource that can be used to synchronize asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SynchronizedSection.IsEntered">
            <summary>
            Per-thread variable that specifies whether the current thread has
            entered the critical section or not.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SynchronizedSection.SyncObject">
            <summary>
            Object that is used to synchronize access to the section.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Runtime.SynchronizedSection.Action">
            <summary>
            The locking action to perform.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SynchronizedSection.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Runtime.SynchronizedSection"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SynchronizedSection.Enter(System.Object)">
            <summary>
            Enters the synchronized section that is guarded by the specified synchronization object.
            When the synchronized section gets disposed, the thread will automatically exit it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SynchronizedSection.Exit(System.Object)">
            <summary>
            Exits the synchronized section that is guarded by the specified synchronization object.
            When the synchronized section gets disposed, the thread will automatically enter it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SynchronizedSection.InvokeAction">
            <summary>
            Invokes the locking action on the synchronized section.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SynchronizedSection.Enter">
            <summary>
            Enters the synchronized section.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SynchronizedSection.Exit">
            <summary>
            Exits the synchronized section.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.SynchronizedSection.Dispose">
            <summary>
            Releases any held resources.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.SynchronizedSection.LockingAction">
            <summary>
            The locking action to perform.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Runtime.TaskServices">
            <summary>
            Provides methods for interacting with tasks using the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.TaskServices.WaitUntilTaskCompletes(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task)">
            <summary>
            Pauses the current operation until the specified task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.TaskServices.WaitUntilTaskCompletes(Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.Runtime.ControlledOperation,System.Threading.Tasks.Task)">
            <summary>
            Pauses the current operation until the specified task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.TaskServices.WaitUntilAllTasksComplete(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task[])">
            <summary>
            Pauses the current operation until all of the specified tasks complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.TaskServices.WaitUntilAnyTaskCompletes(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task[])">
            <summary>
            Pauses the current operation until any of the specified tasks completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Runtime.TaskServices.IsAnyTaskUncontrolled(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Threading.Tasks.Task[])">
            <summary>
            Checks if any of the specified tasks is uncontrolled.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor">
            <summary>
            Abstract class representing a specification monitor.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/specifications">Specifications Overview</see>
            for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.StateTypeMap">
            <summary>
            Map from monitor types to a set of all possible states types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.StateMap">
            <summary>
            Map from monitor types to a set of all available states.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.MonitorActionMap">
            <summary>
            Map from monitor types to a set of all available actions.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.ActionCacheLocks">
            <summary>
            A set of lockable objects used to protect static initialization of the ActionCache while
            also enabling multithreaded initialization of different Actor types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.SingleEventTypeArray">
            <summary>
            A cached array that contains a single event type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Runtime">
            <summary>
            The runtime that is managing this monitor.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.ActiveState">
            <summary>
            The active monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.EventHandlers">
            <summary>
            Dictionary containing all the current action bindings.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.ActionMap">
            <summary>
            Map from action names to cached action delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.IgnoredEvents">
            <summary>
            Set of currently ignored event types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.LivenessTemperature">
            <summary>
            A counter that increases in each step of the execution, as long as the monitor
            remains in a hot state. If the temperature reaches the specified limit, then
            a potential liveness bug has been found.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.Name">
            <summary>
            Gets the name of this monitor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.Logger">
            <summary>
            The logger installed to the runtime.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.CurrentState">
            <summary>
            Gets the current state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.CurrentStateName">
            <summary>
            Gets the current state name.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.CurrentStateNameWithTemperature">
            <summary>
            Gets the current state name with temperature.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.HashedState">
            <summary>
            User-defined hashed state of the monitor. Override to improve the
            accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.PendingTransition">
            <summary>
            A pending transition object that has not been returned from ExecuteAction yet.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Initialize(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes this monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Raises the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.Event"/> at the end of the current action.
            </summary>
            <remarks>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Specifications.Monitor.Event)"/>, <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="e">The event to raise.</param>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1">
             <summary>
             Raise a special event that performs a goto state operation at the end of the current action.
             </summary>
             <remarks>
             Goto state pops the current <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/> and pushes the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/> on the active state stack.
            
             This is shorthand for the following code:
             <code>
             class Event E { }
             [OnEventGotoState(typeof(E), typeof(S))]
             this.RaiseEvent(new E());
             </code>
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
             Only one of the following can be called per action:
             <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Specifications.Monitor.Event)"/>, <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1"/>.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
             <typeparam name="TState">Type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent(System.Type)">
             <summary>
             Raise a special event that performs a goto state operation at the end of the current action.
             </summary>
             <remarks>
             Goto state pops the current <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/> and pushes the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/> on the active state stack.
            
             This is shorthand for the following code:
             <code>
             class Event E { }
             [OnEventGotoState(typeof(E), typeof(S))]
             this.RaiseEvent(new E());
             </code>
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
             Only one of the following can be called per action:
             <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Specifications.Monitor.Event)"/>, <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1"/>.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
             <param name="state">Type of the state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.MonitorEvent(Microsoft.Coyote.Specifications.Monitor.Event,System.String,System.String,System.String)">
            <summary>
            Notifies the monitor to handle the received event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.HandleEvent(Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Handles the given event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsEventIgnoredInCurrentState(Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Checks if the specified event is ignored in the current monitor state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Do(System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Invokes an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ExecuteCurrentStateOnEntry(Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Executes the on entry function of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ExecuteCurrentStateOnExit(System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Executes the on exit function of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ExecuteAction(Microsoft.Coyote.Specifications.Monitor.CachedDelegate,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Executes the specified action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ApplyEventHandlerTransition(Microsoft.Coyote.Specifications.Monitor.Transition)">
            <summary>
            Applies the specified event handler transition.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.CheckDanglingTransition">
            <summary>
            Notifies that a Transition was created but not returned to the Monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GotoState(System.Type,System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Performs a goto transition to the given state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.CanHandleEvent(System.Type)">
            <summary>
            Checks if the state can handle the given event type. An event
            can be handled if it is deferred, or leads to a transition or
            action binding.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsLivenessThresholdExceeded(System.Int32)">
            <summary>
            Checks the liveness temperature of the monitor and report a potential liveness bug if the
            the value exceeded the specified threshold.
            </summary>
            <remarks>
            This method only works if this is a liveness monitor.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsInHotState">
            <summary>
            Returns true if the monitor is in a hot state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsInHotState(System.String@)">
            <summary>
            Returns true if the monitor is in a hot state. Also outputs
            the name of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.IsInColdState">
            <summary>
            Returns true if the monitor is in a cold state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GetHotState">
            <summary>
            Returns a nullable boolean indicating liveness temperature: true for hot, false for cold, else null.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GetHashedState">
            <summary>
            Returns the hashed state of this monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ToString">
            <summary>
            Returns a string that represents the current monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GotoStartState">
            <summary>
            Transitions to the start state, and executes the
            entry action, if there is any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.InitializeStateInformation">
            <summary>
            Initializes information about the states of the monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for monitor states.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ConfigureStateTransitions(Microsoft.Coyote.Specifications.Monitor.State)">
            <summary>
            Configures the state transitions of the monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogEnteredState(Microsoft.Coyote.Specifications.Monitor)">
            <summary>
            Logs that the monitor entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogExitedState(Microsoft.Coyote.Specifications.Monitor)">
            <summary>
            Logs that the monitor exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogInvokedAction(Microsoft.Coyote.Specifications.Monitor,System.Reflection.MethodInfo,System.String)">
            <summary>
            Logs that the monitor invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogRaisedEvent(Microsoft.Coyote.Specifications.Monitor,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Logs that the monitor raised an <see cref="T:Microsoft.Coyote.Specifications.Monitor.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.LogMonitorError(Microsoft.Coyote.Specifications.Monitor)">
            <summary>
            Logs that the monitor found an error.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ReportActivityCoverage(Microsoft.Coyote.Coverage.CoverageInfo)">
            <summary>
            Reports the activity coverage of this monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.AssertStateValidity">
            <summary>
            Check monitor for state related errors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.Transition">
            <summary>
            Defines the <see cref="T:Microsoft.Coyote.Specifications.Monitor"/> transition that is the
            result of executing an event handler.  Transitions are created by using
            <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1"/>, or <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Specifications.Monitor.Event)"/>.
            The Transition is processed by the Coyote runtime when
            an event handling method returns a Transition object.
            This means such a method can only do one such Transition per method call.
            If the method wants to do a conditional transition it can return
            Transition.None to indicate no transition is to be performed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.TypeValue">
            <summary>
            The type of the transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.State">
            <summary>
            The target state of the transition, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.Event">
            <summary>
            The event participating in the transition, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.None">
            <summary>
            This special transition represents a transition that does not change the current <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.Transition.#ctor(Microsoft.Coyote.Specifications.Monitor.Transition.Type,System.Type,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.Transition"/> struct.
            </summary>
            <param name="type">The type of the transition.</param>
            <param name="state">The target state of the transition, if there is one.</param>
            <param name="e">The event participating in the transition, if there is one.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.Transition.Type">
            <summary>
            Defines the type of a <see cref="T:Microsoft.Coyote.Specifications.Monitor"/> transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.Type.None">
            <summary>
            A transition that does not change the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/>.
            This is the value used by <see cref="F:Microsoft.Coyote.Specifications.Monitor.Transition.None"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.Type.Raise">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseEvent(Microsoft.Coyote.Specifications.Monitor.Event)"/> that raises an <see cref="F:Microsoft.Coyote.Specifications.Monitor.Transition.Event"/> bypassing
            the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/> inbox.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.Transition.Type.Goto">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Specifications.Monitor.RaiseGotoStateEvent``1"/> from the current <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/>
            to the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State">
            <summary>
            Abstract class representing a state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.EventHandlers">
            <summary>
            Dictionary containing all the event handlers.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.IgnoredEvents">
            <summary>
            Set of ignored event types.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.IsHot">
            <summary>
            Returns true if this is a hot state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.State.IsCold">
            <summary>
            Returns true if this is a cold state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InstallGotoTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares goto event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InheritGotoTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits goto event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InstallActionHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares action event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InheritActionHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits action event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InstallIgnoreHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares ignore event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.InheritIgnoreHandlers(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits ignore event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.CheckEventHandlerAlreadyDeclared(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already declared.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.CheckEventHandlerAlreadyInherited(System.Type,System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already inherited.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.StartAttribute">
            <summary>
            Attribute for declaring that a state of a monitor
            is the start one.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.OnEntryAttribute">
            <summary>
            Attribute for declaring what action to perform
            when entering a monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEntryAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnEntryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnEntryAttribute"/> class.
            </summary>
            <param name="actionName">Action name.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.OnExitAttribute">
            <summary>
            Attribute for declaring what action to perform
            when exiting a monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnExitAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnExitAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnExitAttribute"/> class.
            </summary>
            <param name="actionName">Action name.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute">
            <summary>
            Attribute for declaring which state a monitor should transition to
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.State">
            <summary>
            State type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="stateType">State type.</param>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="stateType">State type.</param>
            <param name="actionName">Name of action to perform on exit.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring what action a monitor should perform
            when it receives an event in a given state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute.Event">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.OnEventDoActionAttribute"/> class.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="actionName">Action name.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.IgnoreEventsAttribute">
            <summary>
            Attribute for declaring what events should be ignored in
            a monitor state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.State.IgnoreEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.State.IgnoreEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.State.IgnoreEventsAttribute"/> class.
            </summary>
            <param name="eventTypes">Event types.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.ColdAttribute">
            <summary>
            Attribute for declaring a cold monitor state. A monitor that
            is in a cold state satisfies a liveness property.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.State.HotAttribute">
            <summary>
            Attribute for declaring a hot monitor state. A monitor that
            is in a hot state violates a liveness property.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.StateGroup">
            <summary>
            Abstract class used for representing a group of related states.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.Event">
            <summary>
            Abstract class representing an event that can be send to a <see cref="T:Microsoft.Coyote.Specifications.Monitor"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.DefaultEvent">
            <summary>
            A default event that is generated when no user-defined event is dequeued or received.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.Monitor.DefaultEvent.Instance">
            <summary>
            Gets a <see cref="T:Microsoft.Coyote.Specifications.Monitor.DefaultEvent"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.DefaultEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.DefaultEvent"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.GotoStateEvent">
            <summary>
            The goto state event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.GotoStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GotoStateEvent.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.GotoStateEvent"/> class.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.WildCardEvent">
            <summary>
            The wild card event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.WildCardEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.WildCardEvent"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.EventHandlerDeclaration">
            <summary>
            An abstract event handler declaration.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.ActionEventHandlerDeclaration">
            <summary>
            Defines an action event handler declaration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.ActionEventHandlerDeclaration.Name">
            <summary>
            Name of the action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.ActionEventHandlerDeclaration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.ActionEventHandlerDeclaration"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.GotoStateTransition">
            <summary>
            Defines a goto state transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.GotoStateTransition.TargetState">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.GotoStateTransition.Lambda">
            <summary>
            An optional lambda function that executes after the
            on-exit handler of the exiting state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GotoStateTransition.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.GotoStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
            <param name="lambda">Lambda function that executes after the on-exit handler of the exiting state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.GotoStateTransition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.Monitor.GotoStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.CachedDelegate">
            <summary>
            A monitor delegate that has been cached to optimize performance of invocations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Monitor.NameResolver">
            <summary>
            Utility class for resolving names.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.Monitor.NameResolver.StateNamesCache">
            <summary>
            Cache of state names.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.NameResolver.GetQualifiedStateName(System.Type)">
            <summary>
            Returns the qualified (i.e. <see cref="T:Microsoft.Coyote.Specifications.Monitor.StateGroup"/>) name of the specified
            state machine or monitor state, or the empty string if there is no such name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Monitor.NameResolver.GetStateNameForLogging(System.Type)">
            <summary>
            Returns the state name to be used for logging purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.TaskLivenessMonitor">
            <summary>
            A monitor that checks if a task eventually completes execution successfully.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.TaskLivenessMonitor.Task">
            <summary>
            The task being monitored.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Specifications.TaskLivenessMonitor.LivenessTemperature">
            <summary>
            A counter that increases in each step of the execution, as long as the property
            has not been satisfied. If the temperature reaches the specified limit, then
            a potential liveness bug has been found.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.TaskLivenessMonitor.IsSatisfied">
            <summary>
            True if the liveness property is satisfied, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Specifications.TaskLivenessMonitor.StackTrace">
            <summary>
            Trace used for debugging purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.TaskLivenessMonitor.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Specifications.TaskLivenessMonitor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.TaskLivenessMonitor.IsLivenessThresholdExceeded(System.Int32)">
            <summary>
            Checks the liveness temperature of the monitor and report a potential liveness bug if the
            the value exceeded the specified threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Specifications.Specification">
            <summary>
            Provides static methods that are useful for writing specifications
            and interacting with the systematic testing engine.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/specifications">Specifications Overview</see>
            for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the predicate holds, and if not, throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the predicate holds, and if not, throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the predicate holds, and if not, throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the predicate holds, and if not, throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.IsEventuallyCompletedSuccessfully(System.Threading.Tasks.Task)">
            <summary>
            Creates a monitor that checks if the specified task eventually completes its execution successfully,
            and if not, fails with a liveness property violation.
            </summary>
            <param name="task">The task to monitor.</param>
            <remarks>
            The liveness property is only checked during systematic testing.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.RegisterMonitor``1">
            <summary>
            Registers a new safety or liveness monitor.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.Monitor``1(Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Invokes the specified monitor with the given event.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">Event to send to the monitor.</param>
        </member>
        <member name="M:Microsoft.Coyote.Specifications.Specification.RegisterStateHashingFunction(System.Func{System.Int32})">
            <summary>
            Registers a new state hashing function that contributes to computing
            a representation of the program state in each scheduling step.
            </summary>
            <param name="func">The state hashing function.</param>
            <remarks>
            If you register more than one state hashing function per iteration, the
            runtime will aggregate the hashes computed from each function.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Testing.ExplorationStrategy">
            <summary>
            The type of exploration strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.RandomChoice">
            <summary>
            User input exploration strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.Random">
            <summary>
            A simple (but effective) randomized exploration strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.Probabilistic">
            <summary>
            A randomized exploration strategy with increased probability
            to remain in the same scheduling choice.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.Prioritization">
            <summary>
            An unfair probabilistic priority-based exploration strategy.
            </summary>
            <remarks>
            This strategy is based on the PCT algorithm described in the following paper:
            https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/asplos277-pct.pdf.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.FairPrioritization">
            <summary>
            A fair probabilistic priority-based exploration strategy. It uses the
            <see cref="F:Microsoft.Coyote.Testing.ExplorationStrategy.Random"/> strategy as a fair execution suffix.
            </summary>
            <remarks>
            This strategy is based on the PCT algorithm described in the following paper:
            https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/asplos277-pct.pdf.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.DelayBounding">
            <summary>
            An exploration strategy using delay-bounding.
            </summary>
            <remarks>
            This strategy is based on the algorithm described in the following paper:
            https://dl.acm.org/doi/10.1145/1925844.1926432.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.FairDelayBounding">
            <summary>
            A fair exploration strategy using delay-bounding.
            </summary>
            <remarks>
            This strategy is based on the algorithm described in the following paper:
            https://dl.acm.org/doi/10.1145/1925844.1926432.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.QLearning">
            <summary>
            A probabilistic exploration strategy that uses Q-learning.
            </summary>
            <remarks>
            This strategy is described in the following paper:
            https://dl.acm.org/doi/10.1145/3428298.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.QLearningTLA">
            <summary>
            A probabilistic exploration strategy that uses Q-learning that uses TLA model for states.
            </summary>
            <remarks>
            This strategy is described in the following paper:
            https://dl.acm.org/doi/10.1145/3428298.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.DFS">
            <summary>
            An exploration strategy that uses depth-first search.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.InterleavedFuzzing">
            <summary>
            An exploration strategy that uses fuzzing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.InterleavedRoundRobinFuzzing">
            <summary>
            An exploration strategy that uses fuzzing and round-robin.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.ExplorationStrategy.ActorBasedDFS">
            <summary>
            Actor based depth-first search strategy.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.ExplorationStrategyExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.Coyote.Testing.ExplorationStrategy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.ExplorationStrategyExtensions.GetName(Microsoft.Coyote.Testing.ExplorationStrategy)">
            <summary>
            Returns the name of the exploration strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.ExplorationStrategyExtensions.FromName(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Coyote.Testing.ExplorationStrategy"/> associated with the specified name.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Strategy">
            <summary>
            Abstract exploration strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Strategy.Configuration">
            <summary>
            The runtime configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Strategy.MaxSteps">
            <summary>
            The maximum number of steps to explore.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Strategy.StepCount">
            <summary>
            The number of exploration steps.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Strategy.IsFair">
            <summary>
            True if this is a fair strategy, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Testing.Strategy.RandomValueGenerator">
            <summary>
            A random value generator that can be used by the strategy.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Testing.Strategy.LogWriter">
            <summary>
            Responsible for writing to the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Testing.Strategy.ErrorText">
            <summary>
            Text describing the last exploration error, if there was any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Strategy.#ctor(Microsoft.Coyote.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Strategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Strategy.InitializeNextIteration(System.UInt32)">
            <summary>
            Initializes the next iteration.
            </summary>
            <param name="iteration">The id of the next iteration.</param>
            <returns>True to start the specified iteration, else false to stop exploring.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Strategy.GetStepCount">
            <summary>
            Returns the count of explored steps.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Strategy.IsMaxStepsReached">
            <summary>
            True if the strategy has reached the max exploration steps for the current iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Strategy.GetName">
            <summary>
            Returns the name of the strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Strategy.GetDescription">
            <summary>
            Returns a description of the strategy.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Fuzzing.BoundedRandomStrategy">
            <summary>
            A bounded randomized fuzzing strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Fuzzing.BoundedRandomStrategy.TotalTaskDelayMap">
            <summary>
            Map from operation ids to total delays.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.BoundedRandomStrategy.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Fuzzing.BoundedRandomStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.BoundedRandomStrategy.InitializeNextIteration(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.BoundedRandomStrategy.NextDelay(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
            <remarks>
            The delay has an injection probability of 0.05 and is in the range of [10, maxValue * 10]
            with an increment of 10 and an upper bound of 5000ms per operation.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.BoundedRandomStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.BoundedRandomStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Fuzzing.FuzzingStrategy">
            <summary>
            Abstract exploration strategy used during systematic fuzzing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Fuzzing.FuzzingStrategy.OperationId">
            <summary>
            Provides access to the operation id associated with each asynchronous control flow.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Fuzzing.FuzzingStrategy.OperationIdMap">
            <summary>
            Map from task ids to operation ids.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.FuzzingStrategy.#ctor(Microsoft.Coyote.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Fuzzing.FuzzingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.FuzzingStrategy.GetNextDelay(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next delay.
            </summary>
            <param name="ops">Operations executing during the current test iteration.</param>
            <param name="current">The operation requesting the delay.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next delay.</param>
            <returns>True if there is a next delay, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.FuzzingStrategy.NextDelay(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next delay.
            </summary>
            <param name="ops">Operations executing during the current test iteration.</param>
            <param name="current">The operation requesting the delay.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next delay.</param>
            <returns>True if there is a next delay, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.FuzzingStrategy.GetOperationId">
            <summary>
            Returns the current operation id.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy">
            <summary>
            A probabilistic priority-based fuzzing strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy.PriorityChangePoints">
            <summary>
            The maximum number of steps after which we should reshuffle the probabilities.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy.LowPrioritySet">
            <summary>
            Set of low priority operations.
            </summary>
            <remarks>
            Tasks in this set will experience more delay.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy.HighPrioritySet">
            <summary>
            Set of high priority operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy.LowPriorityProbability">
            <summary>
            Probability with which operations should be alloted to the low priority set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy.InitializeNextIteration(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy.NextDelay(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.PrioritizationStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Fuzzing.RandomStrategy">
            <summary>
            A randomized fuzzing strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.RandomStrategy.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Fuzzing.RandomStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.RandomStrategy.InitializeNextIteration(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.RandomStrategy.NextDelay(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.RandomStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Fuzzing.RandomStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy">
            <summary>
            A (fair) exploration strategy using delay-bounding.
            </summary>
            <remarks>
            This strategy is based on the algorithm described in the following paper:
            https://dl.acm.org/doi/10.1145/1925844.1926432.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.OperationGroups">
            <summary>
            Ordered list of operation groups.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.DelayPoints">
            <summary>
            Scheduling points in the current iteration where a delay should occur.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.MaxDelaysPerIteration">
            <summary>
            Max number of delays per iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.MaxDelayPoints">
            <summary>
            Max number of potential delay points across all iterations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.NumDelayPoints">
            <summary>
            Number of potential delay points in the current iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.#ctor(Microsoft.Coyote.Configuration,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.InitializeNextIteration(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.RegisterNewOperationGroup(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Registers any new operation groups.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.DelayOperationGroup(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Delays the next enabled operation group, if there is a delay point installed on the current execution step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.GetNextEnabledOperationGroup(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Returns the next enabled operation group.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.DebugPrintRoundRobinList">
            <summary>
            Print the operation group round-robin list, if debug is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DelayBoundingStrategy.DebugPrintDelayPoints">
            <summary>
            Print the delay points, if debug is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.DFSStrategy">
            <summary>
            A depth-first search exploration strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.ScheduleStack">
            <summary>
            Stack of scheduling choices.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.BoolNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.IntNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.SchIndex">
            <summary>
            Current schedule index.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NondetIndex">
            <summary>
            Current nondeterministic index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.DFSStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.InitializeNextIteration(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.DebugPrintSchedule">
            <summary>
            Prints the schedule, if debug is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.SChoice">
            <summary>
            A scheduling choice. Contains an id and a boolean that is
            true if the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.SChoice.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.SChoice"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NondetBooleanChoice">
            <summary>
            A nondeterministic choice. Contains a boolean value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NondetBooleanChoice.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NondetBooleanChoice"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NondetIntegerChoice">
            <summary>
            A nondeterministic choice. Contains an integer value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NondetIntegerChoice.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.DFSStrategy.NondetIntegerChoice"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy">
            <summary>
            Abstract exploration strategy used during controlled testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.TracePrefix">
            <summary>
            The execution prefix trace to try reproduce.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.#ctor(Microsoft.Coyote.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.InitializeNextIteration(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.GetNextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <summary>
            Returns the next controlled operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <summary>
            Returns the next controlled operation to schedule.
            </summary>
            <param name="ops">Operations that can be scheduled.</param>
            <param name="current">The currently scheduled operation.</param>
            <param name="isYielding">True if the current operation is yielding, else false.</param>
            <param name="next">The next operation to schedule.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.GetNextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.NextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <summary>
            Returns the next boolean choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="next">The next boolean choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.GetNextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.NextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <summary>
            Returns the next integer choice.
            </summary>
            <param name="current">The currently scheduled operation.</param>
            <param name="maxValue">The max value.</param>
            <param name="next">The next integer choice.</param>
            <returns>True if there is a next choice, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.Reset">
            <summary>
            Resets the strategy.
            </summary>
            <remarks>
            This is typically invoked by parent strategies to reset child strategies.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.FormatSchedulingPointReplayError(System.Int32,Microsoft.Coyote.Runtime.SchedulingPointType,Microsoft.Coyote.Runtime.SchedulingPointType)">
            <summary>
            Formats the error message regarding an unexpected scheduling point.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.InterleavingStrategy.FormatReplayError(System.Int32,System.String)">
            <summary>
            Formats the error message.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy">
            <summary>
            A (fair) probabilistic priority-based exploration strategy.
            </summary>
            <remarks>
            This strategy is based on the PCT algorithm described in the following paper:
            https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/asplos277-pct.pdf.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.PrioritizedOperationGroups">
            <summary>
            List of prioritized operation groups.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.PriorityChangePoints">
            <summary>
            Scheduling points in the current execution where a priority change should occur.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.MaxPriorityChangesPerIteration">
            <summary>
            Max number of priority changes per iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.MaxPriorityChangePoints">
            <summary>
            Max number of potential priority change points across all iterations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.NumPriorityChangePoints">
            <summary>
            Number of potential priority change points in the current iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.#ctor(Microsoft.Coyote.Configuration,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.InitializeNextIteration(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.SetNewOperationGroupPriorities(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Sets a random priority to any new operation groups.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.PrioritizeNextOperationGroup(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Reduces the priority of highest priority operation group, if there is a priority change point
            installed on the current execution step.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.GetOperationGroupWithHighestPriority(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Returns the operation group with the highest priority.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.Shuffle(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Shuffles the specified range using the Fisher-Yates algorithm.
            </summary>
            <remarks>
            See https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.DebugPrintPriorityList">
            <summary>
            Print the operation group priority list, if debug is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.PrioritizationStrategy.DebugPrintPriorityChangePoints">
            <summary>
            Print the priority change points, if debug is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.ProbabilisticRandomStrategy">
            <summary>
            A randomized exploration strategy with increased probability
            to remain in the same scheduling choice.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.ProbabilisticRandomStrategy.Bound">
            <summary>
            Number of coin flips.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.ProbabilisticRandomStrategy.#ctor(Microsoft.Coyote.Configuration,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.ProbabilisticRandomStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.ProbabilisticRandomStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.ProbabilisticRandomStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.ProbabilisticRandomStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.ProbabilisticRandomStrategy.ShouldCurrentOperationChange">
            <summary>
            Flip the coin a specified number of times.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy">
            <summary>
            A probabilistic exploration strategy that uses Q-learning.
            </summary>
            <remarks>
            This strategy is described in the following paper:
            https://dl.acm.org/doi/10.1145/3428298.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.OperationQTable">
            <summary>
            Map from program states to a map from next operations to their quality values.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.ExecutionPath">
            <summary>
            The path that is being executed during the current iteration. Each
            step of the execution is represented by an operation and a value
            representing the program state after the operation executed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.TransitionFrequencies">
            <summary>
            Map from values representing program states to their transition
            frequency in the current execution path.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.LastOperation">
            <summary>
            The last chosen operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.LearningRate">
            <summary>
            The value of the learning rate.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.Gamma">
            <summary>
            The value of the discount factor.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.TrueChoiceOpValue">
            <summary>
            The op value denoting a true boolean choice.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.FalseChoiceOpValue">
            <summary>
            The op value denoting a false boolean choice.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.MinIntegerChoiceOpValue">
            <summary>
            The op value denoting the min integer choice.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.BasicActionReward">
            <summary>
            The basic action reward.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.FailureInjectionReward">
            <summary>
            The failure injection reward.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.Epochs">
            <summary>
            The number of explored executions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy"/> class.
            It uses the specified random number generator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.InitializeNextIteration(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.NextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.NextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.GetNextOperationByPolicy(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Returns the next operation to schedule by drawing from the probability
            distribution over the specified state and enabled operations.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.GetNextBooleanChoiceByPolicy(System.Int32)">
            <summary>
            Returns the next boolean choice by drawing from the probability
            distribution over the specified state and boolean choices.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.GetNextIntegerChoiceByPolicy(System.Int32,System.Int32)">
            <summary>
            Returns the next integer choice by drawing from the probability
            distribution over the specified state and integer choices.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.ChooseQValueIndexFromDistribution(System.Collections.Generic.List{System.Double})">
            <summary>
            Returns an index of a Q value by drawing from the probability distribution
            over the specified Q values.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.CaptureExecutionStep(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Captures metadata related to the current execution step, and returns
            a value representing the current program state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.InitializeOperationQValues(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Initializes the Q values of all operations that can be chosen at the
            specified state that have not been previously encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.InitializeBooleanChoiceQValues(System.Int32)">
            <summary>
            Initializes the Q values of all boolean choices that can be chosen
            at the specified state that have not been previously encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.InitializeIntegerChoiceQValues(System.Int32,System.Int32)">
            <summary>
            Initializes the Q values of all integer choices that can be chosen
            at the specified state that have not been previously encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.LearnQValues">
            <summary>
            Learn Q values using data from the current execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA">
            <summary>
            A probabilistic exploration strategy that uses Q-learning.
            </summary>
            <remarks>
            This strategy is described in the following paper:
            https://dl.acm.org/doi/10.1145/3428298.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.OperationQTable">
            <summary>
            Map from program states to a map from next operations to their quality values.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.ExecutionPath">
            <summary>
            The path that is being executed during the current iteration. Each
            step of the execution is represented by an operation and a value
            representing the program state after the operation executed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.TransitionFrequencies">
            <summary>
            Map from values representing program states to their transition
            frequency in the current execution path.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.LastOperation">
            <summary>
            The last chosen operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.LearningRate">
            <summary>
            The value of the learning rate.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.Gamma">
            <summary>
            The value of the discount factor.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.TrueChoiceOpValue">
            <summary>
            The op value denoting a true boolean choice.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.FalseChoiceOpValue">
            <summary>
            The op value denoting a false boolean choice.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.MinIntegerChoiceOpValue">
            <summary>
            The op value denoting the min integer choice.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.BasicActionReward">
            <summary>
            The basic action reward.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.FailureInjectionReward">
            <summary>
            The failure injection reward.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.Epochs">
            <summary>
            The number of explored executions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA"/> class.
            It uses the specified random number generator.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.InitializeNextIteration(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.NextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.NextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.GetNextOperationByPolicy(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Returns the next operation to schedule by drawing from the probability
            distribution over the specified state and enabled operations.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.GetNextBooleanChoiceByPolicy(System.Int32)">
            <summary>
            Returns the next boolean choice by drawing from the probability
            distribution over the specified state and boolean choices.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.GetNextIntegerChoiceByPolicy(System.Int32,System.Int32)">
            <summary>
            Returns the next integer choice by drawing from the probability
            distribution over the specified state and integer choices.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.ChooseQValueIndexFromDistribution(System.Collections.Generic.List{System.Double})">
            <summary>
            Returns an index of a Q value by drawing from the probability distribution
            over the specified Q values.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.CaptureExecutionStep(Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Captures metadata related to the current execution step, and returns
            a value representing the current program state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.InitializeOperationQValues(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation})">
            <summary>
            Initializes the Q values of all operations that can be chosen at the
            specified state that have not been previously encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.InitializeBooleanChoiceQValues(System.Int32)">
            <summary>
            Initializes the Q values of all boolean choices that can be chosen
            at the specified state that have not been previously encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.InitializeIntegerChoiceQValues(System.Int32,System.Int32)">
            <summary>
            Initializes the Q values of all integer choices that can be chosen
            at the specified state that have not been previously encountered.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.LearnQValues">
            <summary>
            Learn Q values using data from the current execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.QLearningStrategyTLA.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.RandomChoiceStrategy">
            <summary>
            A simple (but effective) randomized exploration strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomChoiceStrategy.#ctor(Microsoft.Coyote.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.RandomChoiceStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomChoiceStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomChoiceStrategy.NextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomChoiceStrategy.NextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomChoiceStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomChoiceStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Testing.Interleaving.RandomStrategy">
            <summary>
            A simple (but effective) randomized exploration strategy.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomStrategy.#ctor(Microsoft.Coyote.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Testing.Interleaving.RandomStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomStrategy.NextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomStrategy.NextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Testing.Interleaving.RandomStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Testing.ITestReport">
            <summary>
            Interface of a test report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.ITestReport.SetSchedulingStatistics(System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Sets the specified scheduling statistics.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.ITestReport.SetUnhandledException(System.Exception)">
            <summary>
            Sets the specified unhandled exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.ITestReport.SetUncontrolledInvocations(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Sets the specified uncontrolled invocations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.PortfolioMode">
            <summary>
            The enabled portfolio mode during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.PortfolioMode.None">
            <summary>
            Portfolio mode is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.PortfolioMode.Fair">
            <summary>
            Fair portfolio mode is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Testing.PortfolioMode.Unfair">
            <summary>
            Unfair portfolio mode is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Testing.PortfolioModeExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.Coyote.Testing.PortfolioMode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.PortfolioModeExtensions.IsEnabled(Microsoft.Coyote.Testing.PortfolioMode)">
            <summary>
            Returns true if the <see cref="T:Microsoft.Coyote.Testing.PortfolioMode"/> is enabled, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.PortfolioModeExtensions.IsFair(Microsoft.Coyote.Testing.PortfolioMode)">
            <summary>
            Returns true if the <see cref="T:Microsoft.Coyote.Testing.PortfolioMode"/> is fair, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Testing.PortfolioModeExtensions.FromString(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Coyote.Testing.PortfolioMode"/> from the specified string.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Documentation">
            <summary>
            Provides access to the Coyote documentation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Documentation.LearnAboutCoyoteUrl">
            <summary>
            Url with information on learning about coyote.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Documentation.LearnWhatIsNewUrl">
            <summary>
            Url with information about what is new with coyote.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Documentation.LearnAboutTestUrl">
            <summary>
            Url with information about the testing process.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Documentation.LearnAboutReplayUrl">
            <summary>
            Url with information about the replaying process.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Documentation.LearnAboutRewritingUrl">
            <summary>
            Url with information about the rewriting process.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Documentation.LearnAboutTelemetryUrl">
            <summary>
            Url with information about the gathered telemetry.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Profiler">
            <summary>
            The Coyote profiler.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Profiler.StartMeasuringExecutionTime">
            <summary>
            Starts measuring execution time.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Profiler.StopMeasuringExecutionTime">
            <summary>
            Stops measuring execution time.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Profiler.Results">
            <summary>
            Returns profiling results.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Web.HttpMethod">
            <summary>
            An HTTP method.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpMethod.Get">
            <summary>
            The GET method requests a representation of the specified resource.
            Requests using GET should only retrieve data.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpMethod.Head">
            <summary>
            The HEAD method asks for a response identical to a GET request,
            but without the response body.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpMethod.Post">
            <summary>
            The POST method submits an entity to the specified resource, often
            causing a change in state or side effects on the server.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpMethod.Put">
            <summary>
            The PUT method replaces all current representations of the target
            resource with the request payload.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpMethod.Delete">
            <summary>
            The DELETE method deletes the specified resource.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpMethod.Connect">
            <summary>
            The CONNECT method establishes a tunnel to the server
            identified by the target resource.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpMethod.Options">
            <summary>
            The OPTIONS method describes the communication options for
            the target resource.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpMethod.Trace">
            <summary>
            The TRACE method performs a message loop-back test along the
            path to the target resource.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpMethod.Patch">
            <summary>
            The PATCH method applies partial modifications to a resource.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Web.HttpOperation">
            <summary>
            Represents an HTTP operation that can be controlled during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpOperation.Method">
            <summary>
            The method invoked by this HTTP operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Web.HttpOperation.Path">
            <summary>
            The path invoked by this HTTP operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Web.HttpOperation.#ctor(System.UInt64,Microsoft.Coyote.Web.HttpMethod,System.String,Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Web.HttpOperation"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Web.HttpOperation.Create(Microsoft.Coyote.Web.HttpMethod,System.String,Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.Runtime.ControlledOperation)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Web.HttpOperation"/> from the specified parameters.
            </summary>
        </member>
    </members>
</doc>
