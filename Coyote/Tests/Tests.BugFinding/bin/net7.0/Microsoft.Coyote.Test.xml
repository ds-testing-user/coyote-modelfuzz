<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Coyote.Test</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Coyote.Rewriting.AssemblyInfo">
            <summary>
            Contains information for an assembly that is being rewritten.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyInfo.FullName">
            <summary>
            The full name of the assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyInfo.Name">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyInfo.FilePath">
            <summary>
            The path to the assembly file.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyInfo.Definition">
            <summary>
            The assembly definition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyInfo.Dependencies">
            <summary>
            The assembly direct dependencies.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyInfo.Resolver">
            <summary>
            The resolver of this assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyInfo.Options">
            <summary>
            The rewriting options.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.AssemblyInfo.IsRewritten">
            <summary>
            True if the assembly has been rewritten, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyInfo.IsDisposed">
            <summary>
            True if the assembly has been disposed, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.#ctor(System.String,System.String,Microsoft.Coyote.Rewriting.RewritingOptions,Mono.Cecil.AssemblyResolveEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.AssemblyInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.LoadAssembliesToRewrite(Microsoft.Coyote.Rewriting.RewritingOptions,Mono.Cecil.AssemblyResolveEventHandler)">
            <summary>
            Loads and returns the topological sorted list of unique assemblies to rewrite.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.Invoke(Microsoft.Coyote.Rewriting.Pass)">
            <summary>
            Invokes the specified analysis or transformation pass on the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.Write(System.String)">
            <summary>
            Writes the assembly to the specified output path.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.ApplyRewritingSignatureAttribute(System.Version)">
            <summary>
            Applies the <see cref="T:Microsoft.Coyote.Rewriting.RewritingSignatureAttribute"/> attribute to the assembly. This attribute
            indicates that the assembly has been rewritten with the current version of Coyote and contains
            a signature identifying the parameters used during binary rewriting of the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.IsAssemblyRewritten(System.String@,System.String@)">
            <summary>
            Checks if this assembly has been rewritten and, if yes, returns its version and signature.
            </summary>
            <returns>True if the assembly has been rewritten with the same signature, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.IsMixedModeAssembly">
            <summary>
            Checks if the specified assembly is a mixed-mode assembly.
            </summary>
            <returns>True if the assembly only contains IL, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.IsSymbolFileAvailable">
            <summary>
            Checks if the symbol file for the specified assembly is available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.GetCustomAttribute(System.Type)">
            <summary>
            Returns the first found custom attribute with the specified type, if such an attribute
            is applied to the assembly, else null.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.ValidateAssembly">
            <summary>
            Validates that the assembly can be rewritten.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.LoadDependencies(System.Collections.Generic.HashSet{Microsoft.Coyote.Rewriting.AssemblyInfo},Mono.Cecil.AssemblyResolveEventHandler)">
            <summary>
            Loads all dependent assemblies in the local assembly path.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.SortAssemblies(System.Collections.Generic.HashSet{Microsoft.Coyote.Rewriting.AssemblyInfo})">
            <summary>
            Sorts the specified assemblies in topological ordering.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.ToString">
            <summary>
            Returns a string that represents the current assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyInfo.Dispose">
            <summary>
            Disposes the resources held by this object.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.AssemblySignature">
            <summary>
            Signature identifying the parameters used during binary rewriting of an assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblySignature.FullName">
            <summary>
            The full name of the assembly.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblySignature.Version">
            <summary>
            The version of the binary rewriter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblySignature.Dependencies">
            <summary>
            The assembly direct dependencies.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblySignature.IsRewritingConcurrentCollections">
            <summary>
            True if rewriting for concurrent collections is enabled, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblySignature.IsDataRaceCheckingEnabled">
            <summary>
            True if rewriting for data race checking is enabled, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblySignature.IsRewritingDependencies">
            <summary>
            True if rewriting dependent assemblies that are found in the same location is enabled, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblySignature.IsRewritingUnitTests">
            <summary>
            True if rewriting of unit test methods is enabled, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblySignature.IsRewritingThreads">
            <summary>
            True if rewriting threads as controlled tasks.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblySignature.#ctor(Microsoft.Coyote.Rewriting.AssemblyInfo,System.Collections.Generic.HashSet{Microsoft.Coyote.Rewriting.AssemblyInfo},System.Version,Microsoft.Coyote.Rewriting.RewritingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.AssemblySignature"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblySignature.ComputeHash">
            <summary>
            Computes the hash of the signature.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.RewritingSignatureAttribute">
            <summary>
            Attribute that contains a signature identifying the parameters used during
            binary rewriting of an assembly.
            </summary>
            <remarks>
            If this attribute is applied to an assembly manifest, it denotes that the
            assembly has been rewritten.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.RewritingSignatureAttribute.Version">
            <summary>
            The version of Coyote used for the rewriting.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.RewritingSignatureAttribute.Signature">
            <summary>
            Signature identifying parameters used during rewriting.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingSignatureAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.RewritingSignatureAttribute"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.AssemblyDiffingPass">
            <summary>
            A pass that diffs the IL contents of assemblies and returns them as JSON.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.ContentMap">
            <summary>
            Map from assemblies to IL contents.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.AssemblyDiffingPass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.VisitAssembly(Microsoft.Coyote.Rewriting.AssemblyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.VisitModule(Mono.Cecil.ModuleDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.VisitType(Mono.Cecil.TypeDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.VisitField(Mono.Cecil.FieldDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.VisitMethod(Mono.Cecil.MethodDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.VisitVariable(Mono.Cecil.Cil.VariableDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.VisitInstruction(Mono.Cecil.Cil.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.GetDiffJson(Microsoft.Coyote.Rewriting.AssemblyInfo,Microsoft.Coyote.Rewriting.AssemblyDiffingPass)">
            <summary>
            Returns the diff between the IL contents of this pass against the specified pass as JSON.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.GetJson(Microsoft.Coyote.Rewriting.AssemblyInfo)">
            <summary>
            Returns the IL contents of the specified assembly as JSON.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.GetJson(Microsoft.Coyote.Rewriting.AssemblyDiffingPass.AssemblyContents)">
            <summary>
            Returns the IL contents of the specified assembly as JSON.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.GetUnion``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the union of the two collections.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.DiffStatus">
            <summary>
            The status of diffing two IL contents.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.DiffStatus.None">
            <summary>
            Contents are identical.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.DiffStatus.Added">
            <summary>
            Contents have been added.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.DiffStatus.Removed">
            <summary>
            Contents have been removed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.AssemblyContents.Diff(Microsoft.Coyote.Rewriting.AssemblyDiffingPass.AssemblyContents)">
            <summary>
            Returns the diff between the IL contents of this assembly against the specified assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.ModuleContents.Diff(Microsoft.Coyote.Rewriting.AssemblyDiffingPass.ModuleContents)">
            <summary>
            Returns the diff between the IL contents of this module against the specified module.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.TypeContents.Diff(Microsoft.Coyote.Rewriting.AssemblyDiffingPass.TypeContents)">
            <summary>
            Returns the diff between the IL contents of this type against the specified type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.AssemblyDiffingPass.MethodContents.Diff(Microsoft.Coyote.Rewriting.AssemblyDiffingPass.MethodContents)">
            <summary>
            Returns the diff between the IL contents of this method against the specified method.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Pass">
            <summary>
            An abstract implementation of a pass that traverses IL using a visitor pattern.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Pass.VisitedAssemblies">
            <summary>
            The set of assemblies that are being visited.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Pass.Assembly">
            <summary>
            The current assembly being visited.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Pass.Module">
            <summary>
            The current module being visited.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Pass.TypeDef">
            <summary>
            The type being visited.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Pass.Method">
            <summary>
            The current method being visited.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Pass.Processor">
            <summary>
            A helper for transforming method bodies.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Pass.CachedQualifiedNames">
            <summary>
            Cache of qualified names.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Pass.LogWriter">
            <summary>
            Responsible for writing to the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Pass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.VisitAssembly(Microsoft.Coyote.Rewriting.AssemblyInfo)">
            <summary>
            Visits the specified <see cref="T:Microsoft.Coyote.Rewriting.AssemblyInfo"/>.
            </summary>
            <param name="assembly">The assembly to visit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.VisitModule(Mono.Cecil.ModuleDefinition)">
            <summary>
            Visits the specified <see cref="T:Mono.Cecil.ModuleDefinition"/> inside the currently
            visited <see cref="T:Mono.Cecil.AssemblyDefinition"/>.
            </summary>
            <param name="module">The module definition to visit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.VisitType(Mono.Cecil.TypeDefinition)">
            <summary>
            Visits the specified <see cref="T:Mono.Cecil.TypeDefinition"/> inside the currently
            visited <see cref="T:Mono.Cecil.ModuleDefinition"/>.
            </summary>
            <param name="type">The type definition to visit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.VisitField(Mono.Cecil.FieldDefinition)">
            <summary>
            Visits the specified <see cref="T:Mono.Cecil.FieldDefinition"/> inside the currently
            visited <see cref="T:Mono.Cecil.TypeDefinition"/>.
            </summary>
            <param name="field">The field definition to visit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.VisitMethod(Mono.Cecil.MethodDefinition)">
            <summary>
            Visits the specified <see cref="T:Mono.Cecil.MethodDefinition"/> inside the currently
            visited <see cref="T:Mono.Cecil.TypeDefinition"/>.
            </summary>
            <param name="method">The method definition to visit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.VisitVariable(Mono.Cecil.Cil.VariableDefinition)">
            <summary>
            Visits the specified <see cref="T:Mono.Cecil.Cil.VariableDefinition"/> inside the currently
            visited <see cref="T:Mono.Cecil.MethodDefinition"/>.
            </summary>
            <param name="variable">The variable definition to visit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.VisitInstruction(Mono.Cecil.Cil.Instruction)">
            <summary>
            Visits the specified IL <see cref="T:Mono.Cecil.Cil.Instruction"/> inside the body of the currently
            visited <see cref="T:Mono.Cecil.MethodDefinition"/>.
            </summary>
            <param name="instruction">The instruction to visit.</param>
            <returns>The last modified instruction, or the original if it was not changed.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.CompleteVisit">
            <summary>
            Completes the visit over the current assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.TryResolve(Mono.Cecil.MethodReference,Mono.Cecil.MethodDefinition@,System.Boolean)">
            <summary>
            Returns true if the specified <see cref="T:Mono.Cecil.MethodReference"/> can be resolved,
            as well as return the resolved method definition, else return false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.TryResolve(Mono.Cecil.TypeReference,Mono.Cecil.TypeDefinition@,System.Boolean)">
            <summary>
            Returns true if the specified <see cref="T:Mono.Cecil.TypeReference"/> can be resolved,
            as well as return the resolved type definition, else return false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.GetFullyQualifiedTypeName(Mono.Cecil.TypeReference)">
            <summary>
            Gets the fully qualified name of the specified type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.GetFullyQualifiedMethodName(Mono.Cecil.MethodReference)">
            <summary>
            Gets the fully qualified name of the specified method.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.IsVisitedType(Mono.Cecil.TypeDefinition)">
            <summary>
            Checks if the specified type is a visited type.
            </summary>
            <remarks>
            Any type from an assembly being visited is a visited type.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.IsRuntimeType(Mono.Cecil.TypeReference)">
            <summary>
            Checks if the specified type is a runtime type.
            </summary>
            <remarks>
            Any type from the Coyote assemblies is a runtime type.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.IsRuntimeType(Mono.Cecil.TypeDefinition)">
            <summary>
            Checks if the specified type is a runtime type.
            </summary>
            <remarks>
            Any type from the Coyote assemblies is a runtime type.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.IsForeignType(Mono.Cecil.TypeReference)">
            <summary>
            Checks if the specified type is a foreign type.
            </summary>
            <remarks>
            Any type not visited that is not a runtime type is a foreign type.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Pass.IsSystemType(Mono.Cecil.TypeReference)">
            <summary>
            Checks if the specified type is a system type.
            </summary>
            <remarks>
            Any type in the system namespace is a system type.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass">
            <summary>
            Rewriting pass that ensures user defined try/catch blocks do not consume runtime exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass.IsAsyncStateMachineType">
            <summary>
            True if the visited type is a generated async state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass.VisitType(Mono.Cecil.TypeDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass.VisitMethod(Mono.Cecil.MethodDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass.VisitExceptionHandler(Mono.Cecil.Cil.ExceptionHandler)">
            <summary>
            Visits the specified <see cref="T:Mono.Cecil.Cil.ExceptionHandler"/> inside the body of the currently
            visited <see cref="T:Mono.Cecil.MethodDefinition"/>.
            </summary>
            <remarks>
            In the case of nested try/catch blocks the inner block is visited first before the outer block.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass.IsRethrowHandler(Mono.Cecil.Cil.ExceptionHandler)">
            <summary>
            Checks if the specified handler is only rethrowing an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass.IsStoreLoadOpCodeMatching(Mono.Cecil.Cil.Code,Mono.Cecil.Cil.Code)">
            <summary>
            Checks if the specified store and load op codes are matching.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.ExceptionFilterRewritingPass.IsAsyncStateMachineHandler(Mono.Cecil.Cil.ExceptionHandler)">
            <summary>
            Checks if the specified handler is generated for the async state machine.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass">
            <summary>
            Rewriting pass for invocations between assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass.VisitInstruction(Mono.Cecil.Cil.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass.CreateInterceptionMethodCallInstructions(Mono.Cecil.MethodReference,Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference,System.String)">
            <summary>
            Creates the IL instructions for invoking the specified interception method.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass.CreateInterceptionMethod(System.Type,Mono.Cecil.MethodReference,System.String)">
            <summary>
            Creates an interception method from the specified method and type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass.CreateInterceptedReturnType(Mono.Cecil.MethodReference)">
            <summary>
            Creates an intercepted return type from the specified method.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass.ResolveGenericTypeArguments(Mono.Cecil.GenericInstanceType,Mono.Cecil.MethodReference)">
            <summary>
            Resolves the generic arguments of the specified type using the given method reference.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass.IsTaskType(Mono.Cecil.TypeDefinition,System.String,System.String)">
            <summary>
            Checks if the specified type is the expected task type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.InterAssemblyInvocationRewritingPass.IsTaskLikeType(Mono.Cecil.TypeDefinition)">
            <summary>
            Checks if the specified type is a task-like type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.MSTestRewritingPass.Configuration">
            <summary>
            The test configuration to use when rewriting unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MSTestRewritingPass.#ctor(Microsoft.Coyote.Configuration,System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.MSTestRewritingPass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MSTestRewritingPass.VisitMethod(Mono.Cecil.MethodDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MSTestRewritingPass.CloneMethod(Mono.Cecil.MethodDefinition)">
            <summary>
            Clones the test method.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MSTestRewritingPass.RewriteTestMethod(Mono.Cecil.MethodDefinition,Mono.Cecil.MethodDefinition)">
            <summary>
            Creates a new method for invoking the original test method from the testing engine.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.RewritingPass">
            <summary>
            An abstract implementation of a pass that rewrites IL.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingPass.IsMethodBodyModified">
            <summary>
            True if the current method body has been modified, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingPass.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.RewritingPass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingPass.FindMethod(System.String,Mono.Cecil.TypeDefinition,Mono.Cecil.TypeReference[])">
            <summary>
            Finds the matching method in the specified declaring type, if any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingPass.MakeGenericMethod(Mono.Cecil.MethodReference,Mono.Cecil.TypeReference)">
            <summary>
            Creates a new generic method with the specified generic argument.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingPass.MakeGenericType(Mono.Cecil.TypeReference,Mono.Cecil.TypeReference)">
            <summary>
            Creates a new generic type with the specified generic argument.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingPass.FixInstructionOffsets(Mono.Cecil.MethodDefinition)">
            <summary>
            Fixes the instruction offsets of the specified method.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingPass.Replace(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>
            Replaces the existing instruction with a new instruction and fixes up any
            branch references to the old instruction so they point to the new instruction.
            </summary>
            <param name="instruction">The instruction to be replaced.</param>
            <param name="newInstruction">The new instruction to be inserted.</param>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.MemberTypeRewritingPass">
            <summary>
            A pass that rewrites types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MemberTypeRewritingPass.#ctor(Microsoft.Coyote.Rewriting.RewritingOptions,System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.MemberTypeRewritingPass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MemberTypeRewritingPass.VisitField(Mono.Cecil.FieldDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MemberTypeRewritingPass.VisitMethod(Mono.Cecil.MethodDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.#ctor(Microsoft.Coyote.Rewriting.RewritingOptions,System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.VisitVariable(Mono.Cecil.Cil.VariableDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.VisitInstruction(Mono.Cecil.Cil.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.VisitInitobjInstruction(Mono.Cecil.Cil.Instruction)">
            <summary>
            Rewrites the specified <see cref="F:Mono.Cecil.Cil.OpCodes.Initobj"/> instruction.
            </summary>
            <returns>The unmodified instruction, or the newly replaced instruction.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.VisitNewobjInstruction(Mono.Cecil.Cil.Instruction)">
            <summary>
            Rewrites the specified <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/> instruction.
            </summary>
            <returns>The unmodified instruction, or the newly replaced instruction.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.VisitCallInstruction(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)">
            <summary>
            Rewrites the specified non-generic <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> or <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/> instruction.
            </summary>
            <returns>The unmodified instruction, or the newly replaced instruction.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.TryRewriteMethodReference(Mono.Cecil.MethodReference,Mono.Cecil.MethodReference@)">
            <summary>
            Tries to rewrite the specified <see cref="T:Mono.Cecil.MethodReference"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.TryRewriteMethodReference(Mono.Cecil.MethodReference,System.String,Mono.Cecil.MethodReference@)">
            <summary>
            Tries to rewrite the specified <see cref="T:Mono.Cecil.MethodReference"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.RewriteGenericArguments(Mono.Cecil.MethodReference,Mono.Collections.Generic.Collection{Mono.Cecil.GenericParameter},Mono.Collections.Generic.Collection{Mono.Cecil.TypeReference},System.Boolean@)">
            <summary>
            Rewrites the generic arguments of the specified <see cref="T:Mono.Cecil.MethodReference"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.RewriteParameters(Mono.Cecil.MethodReference,Mono.Collections.Generic.Collection{Mono.Cecil.ParameterDefinition},System.Boolean@)">
            <summary>
            Rewrites the parameters of the specified <see cref="T:Mono.Cecil.MethodReference"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.TryFindMethod(Mono.Cecil.TypeDefinition,Mono.Cecil.MethodDefinition,System.String,Mono.Cecil.MethodDefinition@)">
            <summary>
            Finds the matching method in the specified declaring type, if any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.CheckMethodParametersMatch(Mono.Cecil.MethodDefinition,Mono.Cecil.MethodDefinition)">
            <summary>
            Checks if the parameters of the two specified methods match.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.MethodBodyTypeRewritingPass.CheckMethodSignaturesMatch(Mono.Cecil.MethodDefinition,Mono.Cecil.MethodDefinition)">
            <summary>
            Checks if the signatures of the original and the replacement methods match.
            </summary>
            <remarks>
            This method also checks the use case where we are converting an instance method into a static method.
            In such a case case, we are inserting a first parameter that has the same type as the declaring type
            of the original method.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.TypeRewritingPass">
            <summary>
            A pass that rewrites types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.TypeRewritingPass.KnownTypes">
            <summary>
            Map from known full type names to types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.#ctor(Microsoft.Coyote.Rewriting.RewritingOptions,System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.TypeRewritingPass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.RewriteType(Mono.Cecil.TypeReference,Microsoft.Coyote.Rewriting.TypeRewritingPass.Options)">
            <summary>
            Returns the rewritten type for the specified type and with the specified rewriting
            options, or returns the original type if there is nothing to rewrite.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.RewriteType(Mono.Cecil.TypeReference,Microsoft.Coyote.Rewriting.TypeRewritingPass.Options,System.Boolean@)">
            <summary>
            Returns the rewritten type for the specified type and with the specified rewriting
            options, or returns the original type if there is nothing to rewrite.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.TryRewriteType(Mono.Cecil.TypeReference,Mono.Cecil.TypeReference@)">
            <summary>
            Tries to return the rewritten type for the specified type, or returns false
            if there is nothing to rewrite.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.TryRewriteType(Mono.Cecil.TypeReference,Microsoft.Coyote.Rewriting.TypeRewritingPass.Options,Mono.Cecil.TypeReference@)">
            <summary>
            Tries to return the rewritten type for the specified type and with the specified
            rewriting options, or returns false if there is nothing to rewrite.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.RewriteType(Mono.Cecil.TypeReference,Microsoft.Coyote.Rewriting.TypeRewritingPass.Options,System.Boolean,System.Boolean@)">
            <summary>
            Returns the rewritten type for the specified type, or returns the original
            if there is nothing to rewrite.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.RewriteAndImportType(Mono.Cecil.TypeReference,Microsoft.Coyote.Rewriting.TypeRewritingPass.Options,System.Boolean,System.Boolean@)">
            <summary>
            Returns the rewritten type for the specified type, or returns the original
            if there is nothing to rewrite.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.IsRewrittenTypeAllowed(System.Type,Microsoft.Coyote.Rewriting.TypeRewritingPass.Options)">
            <summary>
            Checks if the specified rewritten type is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.IsRewritableType(Mono.Cecil.TypeDefinition)">
            <summary>
            Checks if the specified type is a rewritable type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.TypeRewritingPass.IsSupportedType(Mono.Cecil.TypeDefinition)">
            <summary>
            Checks if the specified type is a supported type.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.TypeRewritingPass.Options">
            <summary>
            Options for rewriting a type.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.UncontrolledInvocationRewritingPass">
            <summary>
            Rewriting pass that fails invocations of uncontrolled types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.UncontrolledInvocationRewritingPass.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo},Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.UncontrolledInvocationRewritingPass"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.UncontrolledInvocationRewritingPass.VisitInstruction(Mono.Cecil.Cil.Instruction)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.UncontrolledInvocationRewritingPass.IsUncontrolledType(Mono.Cecil.TypeDefinition,Mono.Cecil.MemberReference,System.Boolean@)">
            <summary>
            Checks if the specified type is not controlled. If the optional member is specified,
            then it also checks if the member is not controlled.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.RewritingEngine">
            <summary>
            Engine that can rewrite a set of assemblies for systematic testing.
            </summary>
            <remarks>
            See <see href="/coyote/get-started/rewriting">rewriting</see> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.RewritingEngine.TempDirectory">
            <summary>
            Temporary directory that is used to write the rewritten assemblies
            in the case that they are replacing the original ones.
            </summary>
            <remarks>
            We need this because it seems Mono.Cecil does not allow to rewrite in-place.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.RewritingEngine.Options">
            <summary>
            Options for rewriting assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.RewritingEngine.Configuration">
            <summary>
            The test configuration to use when rewriting unit tests.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.RewritingEngine.Passes">
            <summary>
            List of passes to invoke while rewriting IL.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.RewritingEngine.ResolveWarnings">
            <summary>
            Simple cache to reduce redundant warnings.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.RewritingEngine.LogWriter">
            <summary>
            Responsible for writing to the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.RewritingEngine.Profiler">
            <summary>
            The installed profiler.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.#ctor(Microsoft.Coyote.Rewriting.RewritingOptions,Microsoft.Coyote.Configuration,Microsoft.Coyote.Logging.LogWriter,Microsoft.Coyote.Profiler)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.RewritingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.Run(Microsoft.Coyote.Rewriting.RewritingOptions,Microsoft.Coyote.Configuration,Microsoft.Coyote.Logging.LogWriter,Microsoft.Coyote.Profiler)">
            <summary>
            Runs the engine using the specified rewriting options.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.Run">
            <summary>
            Runs the rewriting engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.InitializePasses(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Rewriting.AssemblyInfo})">
            <summary>
            Initializes the passes to invoke during rewriting.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.RewriteAssembly(Microsoft.Coyote.Rewriting.AssemblyInfo,System.String)">
            <summary>
            Rewrites the specified assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.WriteILToJson(Microsoft.Coyote.Rewriting.AssemblyInfo,System.Boolean,System.String)">
            <summary>
            Writes the original or rewritten IL to a JSON file in the specified output path.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.WriteILDiffToJson(Microsoft.Coyote.Rewriting.AssemblyInfo,System.String)">
            <summary>
            Writes the IL diff to a JSON file in the specified output path.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.IsAssemblyRewritten(System.Reflection.Assembly)">
            <summary>
            Checks if the specified assembly has been already rewritten with the current version.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>True if the assembly has been rewritten with the current version, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.GetAssemblyRewriterVersion">
            <summary>
            Returns the version of the assembly rewriter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.CreateOutputDirectoryAndCopyFiles">
            <summary>
            Creates the output directory, if it does not already exists, and copies all necessary files.
            </summary>
            <returns>The output directory path.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.CopyFile(System.String,System.String)">
            <summary>
            Copies the specified file to the destination.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.CopyWithRetriesAsync(System.String,System.String)">
            <summary>
            Copies the specified file to the destination with retries.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingEngine.OnResolveAssemblyFailure(System.Object,Mono.Cecil.AssemblyNameReference)">
            <summary>
            Handles an assembly resolution error.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.RewritingOptions">
            <summary>
            Options for rewriting binaries.
            </summary>
            <remarks>
            See <see href="/coyote/get-started/rewriting">rewriting</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.AssembliesDirectory">
            <summary>
            The directory containing the assemblies to rewrite.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.OutputDirectory">
            <summary>
            The output directory where rewritten assemblies are placed.
            If this is the same as the <see cref="P:Microsoft.Coyote.Rewriting.RewritingOptions.AssembliesDirectory"/> then
            the rewritten assemblies will replace the original assemblies.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.AssemblyPaths">
            <summary>
            The file names of the assemblies to rewrite. If this list is empty then it will
            rewrite all assemblies in the <see cref="P:Microsoft.Coyote.Rewriting.RewritingOptions.AssembliesDirectory"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.DependencySearchPaths">
            <summary>
            The paths to search for resolving dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.IgnoredAssembliesPattern">
            <summary>
            The regular expressions used to match against assembly names to determine which assemblies
            to ignore when rewriting dependencies or a whole directory.
            </summary>
            <remarks>
            The list automatically includes the following expressions:
            Microsoft\.Coyote.*
            Microsoft\.TestPlatform.*
            Microsoft\.VisualStudio\.TestPlatform.*
            Newtonsoft\.Json.*
            System\.Private\.CoreLib
            mscorlib.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.IsRewritingConcurrentCollections">
            <summary>
            True if rewriting for concurrent collections is enabled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.IsDataRaceCheckingEnabled">
            <summary>
            True if rewriting for data race checking is enabled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.IsRewritingDependencies">
            <summary>
            True if rewriting dependent assemblies that are found in the same location is enabled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.IsRewritingUnitTests">
            <summary>
            True if rewriting of unit test methods is enabled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.IsRewritingThreads">
            <summary>
            True if rewriting threads as controlled tasks.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.IsLoggingAssemblyContents">
            <summary>
            True if the rewriter should log the IL before and after rewriting.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.RewritingOptions.IsDiffingAssemblyContents">
            <summary>
            True if the rewriter should diff the IL before and after rewriting.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.RewritingOptions"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.Create">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.RewritingOptions"/> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.ParseFromJSON(System.String)">
            <summary>
            Parses the <see cref="T:Microsoft.Coyote.Rewriting.RewritingOptions"/> from the specified JSON configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.ParseFromJSON(Microsoft.Coyote.Rewriting.RewritingOptions,System.String)">
            <summary>
            Parses the JSON configuration file and merges the options into the specified
            <see cref="T:Microsoft.Coyote.Rewriting.RewritingOptions"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.IsAssemblyIgnored(System.String)">
            <summary>
            Returns true if the assembly with the specified name must be ignored during rewriting, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.IsReplacingAssemblies">
            <summary>
            Returns true if the input assemblies are being replaced by the rewritten ones, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.GetDisallowedAssembliesRegex(System.Collections.Generic.IList{System.String})">
            <summary>
            Returns a regex pattern with the disallowed assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.Sanitize(System.Reflection.Assembly)">
            <summary>
            Sanitizes the rewriting options.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.ResolvePath(System.String,System.String)">
            <summary>
            Resolves the specified path.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.RewritingOptions.TryResolveTargetFramework(System.Reflection.Assembly,System.String@)">
            <summary>
            Returns the resolved target framework of the specified or executing assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.RewritingOptions.JsonConfiguration">
            <summary>
            Implements a JSON configuration object.
            </summary>
            <example>
            The JSON schema is:
            <code>
            {
                // The directory with the assemblies to rewrite. This path is relative
                // to this configuration file.
                "AssembliesPath": "./bin/net7.0",
                // The output directory where rewritten assemblies are placed. This path
                // is relative to this configuration file.
                "OutputPath": "./bin/net7.0/RewrittenBinaries",
                // The assemblies to rewrite. The paths are relative to 'AssembliesPath'.
                "Assemblies": [
                    "Example.exe"
                ]
            }
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1">
            <summary>
            Provides methods for controlling a concurrent bag during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.get_Count(System.Collections.Concurrent.ConcurrentBag{`0})">
            <summary>
            Gets the number of elements contained in the concurrent bag.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.get_IsEmpty(System.Collections.Concurrent.ConcurrentBag{`0})">
            <summary>
            Gets a value that indicates whether the concurrent bag is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.Add(System.Collections.Concurrent.ConcurrentBag{`0},`0)">
            <summary>
            Adds an object to the concurrent bag.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.Clear(System.Collections.Concurrent.ConcurrentBag{`0})">
            <summary>
            Removes all objects from the concurrent bag.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.CopyTo(System.Collections.Concurrent.ConcurrentBag{`0},`0[],System.Int32)">
            <summary>
            Copies the concurrent bag elements to an existing one-dimensional array,
            starting at the specified array index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.GetEnumerator(System.Collections.Concurrent.ConcurrentBag{`0})">
            <summary>
            Returns an enumerator that iterates through the  concurrent bag.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.ToArray(System.Collections.Concurrent.ConcurrentBag{`0})">
            <summary>
            Copies the elements stored in the concurrent bag to a new array.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.TryPeek(System.Collections.Concurrent.ConcurrentBag{`0},`0@)">
            <summary>
            Tries to return an object from the beginning of the concurrent bag without removing it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.TryTake(System.Collections.Concurrent.ConcurrentBag{`0},`0@)">
            <summary>
            Attempts to remove and return an object from the concurrent bag.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentBag`1.ExploreInterleaving">
            <summary>
            Asks the runtime to explore a possible interleaving.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2">
            <summary>
            Provides methods for controlling a concurrent dictionary during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.get_Count(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Gets the number of key/value pairs contained in the concurrent dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.get_IsEmpty(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Gets a value that indicates whether the concurrent dictionary is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.get_Item(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.set_Item(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,`1)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.get_Keys(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Gets a collection containing the keys in the concurrent dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.get_Values(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Gets a collection containing the values in the concurrent dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the concurrent dictionary if the key does not
            already exist, or updates a key/value pair in the concurrent dictionary
            if the key already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,`1,System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the concurrent dictionary if the key does not
            already exist, or updates a key/value pair in the concurrent dictionary
            if the key already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)">
            <summary>
            Adds a key/value pair to the concurrent dictionary if the key does not
            already exist, or updates a key/value pair in the concurrent dictionary
            if the key already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.Clear(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Removes all keys and values from the concurrent dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0)">
            <summary>
            Determines whether the concurrent dictionary contains the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Returns an enumerator that iterates through the concurrent dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair to the concurrent dictionary if the key does not already exist.
            Returns the new value, or the existing value if the key already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,`1)">
            <summary>
            Adds a key/value pair to the concurrent dictionary if the key does not already exist.
            Returns the new value, or the existing value if the key already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,System.Func{`0,``0,`1},``0)">
            <summary>
            Adds a key/value pair to the concurrent dictionary if the key does not already exist.
            Returns the new value, or the existing value if the key already exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.ToArray(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Copies the key and value pairs stored in the concurrent dictionary to a new array.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,`1)">
            <summary>
            Attempts to add the specified key and value to the concurrent dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key
            from the concurrent dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,`1@)">
            <summary>
            Attempts to remove and return the value that has the specified key
            from the concurrent dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Attempts to remove and return the value that has the specified key
            from the concurrent dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(System.Collections.Concurrent.ConcurrentDictionary{`0,`1},`0,`1,`1)">
            <summary>
            Updates the value associated with key to newValue if the existing value with key is equal to comparisonValue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentDictionary`2.ExploreInterleaving">
            <summary>
            Asks the runtime to explore a possible interleaving.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1">
            <summary>
            Provides methods for controlling a concurrent queue during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.get_Count(System.Collections.Concurrent.ConcurrentQueue{`0})">
            <summary>
            Gets the number of elements contained in the concurrent queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.get_IsEmpty(System.Collections.Concurrent.ConcurrentQueue{`0})">
            <summary>
            Gets a value that indicates whether the concurrent queue is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.Clear(System.Collections.Concurrent.ConcurrentQueue{`0})">
            <summary>
            Removes all objects from the concurrent queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.CopyTo(System.Collections.Concurrent.ConcurrentQueue{`0},`0[],System.Int32)">
            <summary>
            Copies the concurrent queue elements to an existing one-dimensional array,
            starting at the specified array index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.Enqueue(System.Collections.Concurrent.ConcurrentQueue{`0},`0)">
            <summary>
            Adds an object to the end of the concurrent queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator(System.Collections.Concurrent.ConcurrentQueue{`0})">
            <summary>
            Returns an enumerator that iterates through the  concurrent queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.ToArray(System.Collections.Concurrent.ConcurrentQueue{`0})">
            <summary>
            Copies the elements stored in the concurrent queue to a new array.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(System.Collections.Concurrent.ConcurrentQueue{`0},`0@)">
            <summary>
            Tries to remove and return the object at the beginning of the concurrent queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.TryPeek(System.Collections.Concurrent.ConcurrentQueue{`0},`0@)">
            <summary>
            Tries to return an object from the beginning of the concurrent queue without removing it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentQueue`1.ExploreInterleaving">
            <summary>
            Asks the runtime to explore a possible interleaving.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1">
            <summary>
            Provides methods for controlling a concurrent stack during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.get_Count(System.Collections.Concurrent.ConcurrentStack{`0})">
            <summary>
            Gets the number of elements contained in the concurrent stack.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.get_IsEmpty(System.Collections.Concurrent.ConcurrentStack{`0})">
            <summary>
            Gets a value that indicates whether the concurrent stack is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.Clear(System.Collections.Concurrent.ConcurrentStack{`0})">
            <summary>
            Removes all objects from the concurrent stack.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.CopyTo(System.Collections.Concurrent.ConcurrentStack{`0},`0[],System.Int32)">
            <summary>
            Copies the concurrent stack elements to an existing one-dimensional array,
            starting at the specified array index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.GetEnumerator(System.Collections.Concurrent.ConcurrentStack{`0})">
            <summary>
            Returns an enumerator that iterates through the  concurrent stack.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.Push(System.Collections.Concurrent.ConcurrentStack{`0},`0)">
            <summary>
            Inserts an object at the top of the concurrent stack.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.PushRange(System.Collections.Concurrent.ConcurrentStack{`0},`0[])">
            <summary>
            Inserts multiple objects at the top of the concurrent stack atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.PushRange(System.Collections.Concurrent.ConcurrentStack{`0},`0[],System.Int32,System.Int32)">
            <summary>
            Inserts multiple objects at the top of the concurrent stack atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.ToArray(System.Collections.Concurrent.ConcurrentStack{`0})">
            <summary>
            Copies the elements stored in the concurrent stack to a new array.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.TryPeek(System.Collections.Concurrent.ConcurrentStack{`0},`0@)">
            <summary>
            Attempts to return an object from the top of the concurrent stack without removing it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.TryPop(System.Collections.Concurrent.ConcurrentStack{`0},`0@)">
            <summary>
            Attempt to pop and return the object at the top of the concurrent stack.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.TryPopRange(System.Collections.Concurrent.ConcurrentStack{`0},`0[],System.Int32,System.Int32)">
            <summary>
            Attempts to pop and return multiple objects from the top of the concurrent stack atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.TryPopRange(System.Collections.Concurrent.ConcurrentStack{`0},`0[])">
            <summary>
            Attempts to pop and return multiple objects from the top of the concurrent stack atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Concurrent.ConcurrentStack`1.ExploreInterleaving">
            <summary>
            Asks the runtime to explore a possible interleaving.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2">
            <summary>
            Provides methods for creating generic dictionaries that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Create">
            <summary>
            Initializes a new dictionary instance class that is empty, has the default initial
            capacity, and uses the default equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Create(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new dictionary instance class that contains elements copied from the
            specified dictionary and uses the default equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Create(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new dictionary instance class that is empty, has the default
            initial capacity, and uses the specified equality comparer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Create(System.Int32)">
            <summary>
            Initializes a new dictionary instance class that is empty, has the specified initial
            capacity, and uses the default equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Create(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new dictionary instance class that contains elements copied from the specified dictionary
            and uses the specified equality comparer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Create(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new dictionary instance class that is empty, has the specified initial
            capacity, and uses the specified equality comparer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new dictionary instance class that contains elements copied
            from the specified enumerable.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new dictionary instance class that contains elements copied
            from the specified enumerable and uses the specified equality comparer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.get_Item(System.Collections.Generic.Dictionary{`0,`1},`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.set_Item(System.Collections.Generic.Dictionary{`0,`1},`0,`1)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.get_Keys(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Gets a collection containing the keys in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.get_Values(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.get_Count(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Gets the number of key/value pairs contained in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Add(System.Collections.Generic.Dictionary{`0,`1},`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Clear(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Removes all keys and values from the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.ContainsKey(System.Collections.Generic.Dictionary{`0,`1},`0)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.ContainsValue(System.Collections.Generic.Dictionary{`0,`1},`1)">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.GetEnumerator(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Remove(System.Collections.Generic.Dictionary{`0,`1},`0)">
            <summary>
            Removes the value with the specified key from the dictionary,
            and copies the element to the value parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.TryGetValue(System.Collections.Generic.Dictionary{`0,`1},`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.GetObjectData(System.Collections.Generic.Dictionary{`0,`1},System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and returns the data needed
            to serialize the dictionary instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.OnDeserialization(System.Collections.Generic.Dictionary{`0,`1},System.Object)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and raises
            the deserialization event when the deserialization is complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.EnsureCapacity(System.Collections.Generic.Dictionary{`0,`1},System.Int32)">
            <summary>
            Ensures that the dictionary can hold up to a specified number of entries without
            any further expansion of its backing storage.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Remove(System.Collections.Generic.Dictionary{`0,`1},`0,`1@)">
            <summary>
            Removes the value with the specified key from the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.TrimExcess(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Sets the capacity of this dictionary to what it would be if it had been originally
            initialized with all its entries.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.TrimExcess(System.Collections.Generic.Dictionary{`0,`1},System.Int32)">
            <summary>
            Sets the capacity of this dictionary to hold up a specified number of entries
            without any further expansion of its backing storage.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.TryAdd(System.Collections.Generic.Dictionary{`0,`1},`0,`1)">
            <summary>
            Attempts to add the specified key and value to the dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper">
            <summary>
            Wraps a dictionary so that it can be controlled during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.ReaderCount">
            <summary>
            Count of read accesses to the dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.WriterCount">
            <summary>
            Count of write accesses to the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.Setup">
            <summary>
            Setups the wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.Dictionary`2.Wrapper.CheckDataRace(System.Boolean)">
            <summary>
            Checks for a data race.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1">
            <summary>
            Provides methods for creating generic hashsets that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Create">
            <summary>
            Initializes a hash set instance class that is empty and uses the
            default equality comparer for the set type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a hash set instance class that uses the default equality comparer
            for the set type, contains elements copied from the specified collection, and
            has sufficient capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Create(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a hash set instance class that is empty and uses the default
            equality comparer for the set type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Create(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a hash set instance class that uses the specified equality comparer for the
            set type, contains elements copied from the specified collection, and has sufficient
            capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Create(System.Int32)">
            <summary>
            Initializes a hash set instance class that is empty, but has reserved
            space for 'capacity' items and and uses the default equality comparer for the set type.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Create(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a hash set instance class that uses the specified
            equality comparer for the set type, and has sufficient capacity to accommodate 'capacity' elements.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.get_Comparer(System.Collections.Generic.HashSet{`0})">
            <summary>
            Gets the equality comparer object that is used to determine equality for the values in the set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.get_Count(System.Collections.Generic.HashSet{`0})">
            <summary>
            Gets the number of elements that are contained in the hash set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Add(System.Collections.Generic.HashSet{`0},`0)">
            <summary>
            Adds the specified element to the hash set.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Clear(System.Collections.Generic.HashSet{`0})">
            <summary>
            Removes all elements from a hash set object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Contains(System.Collections.Generic.HashSet{`0},`0)">
            <summary>
            Determines whether a hash set object contains the specified element.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.CopyTo(System.Collections.Generic.HashSet{`0},`0[])">
            <summary>
            Copies the elements of a hash set object to an array.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.CopyTo(System.Collections.Generic.HashSet{`0},`0[],System.Int32)">
            <summary>
            Copies the elements of a hash set object to an array, starting at the specified array index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.CopyTo(System.Collections.Generic.HashSet{`0},`0[],System.Int32,System.Int32)">
            <summary>
            Copies the specified number of elements of a hash set object to an array, starting at the specified array index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current hash set object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.GetEnumerator(System.Collections.Generic.HashSet{`0})">
            <summary>
            Returns an enumerator that iterates through a hash set object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.GetObjectData(System.Collections.Generic.HashSet{`0},System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and returns the data needed to
            serialize a hash set object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.IntersecWith(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current hash set object to contain only elements that are present
            in that object and in the specified collection.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a hash set object is a proper subset of the specified collection.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a hash set object is a proper superset of the specified collection.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a hash set object is a subset of the specified collection.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a hash set object is a superset of the specified collection.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.OnDeserialization(System.Collections.Generic.HashSet{`0},System.Object)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and raises the deserialization
            event when the deserialization is complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a hash set object and a specified collection share common elements.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Remove(System.Collections.Generic.HashSet{`0},`0)">
            <summary>
            Removes the specified element from a hash set object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.RemoveWhere(System.Collections.Generic.HashSet{`0},System.Predicate{`0})">
            <summary>
            Removes the specified element from a hash set object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a hash set object and the specified collection contain the same elements.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current hash set object to contain only elements that are present either in
            that object or in the specified collection, but not both.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.TrimExcess(System.Collections.Generic.HashSet{`0})">
            <summary>
            Sets the capacity of a hash set object to the actual number of elements it
            contains, rounded up to a nearby, implementation-specific value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.HashSet{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current hash set object to contain all elements that are
            present in itself, the specified collection, or both.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.EnsureCapacity(System.Collections.Generic.HashSet{`0},System.Int32)">
            <summary>
            Ensures that this hash set object can hold the specified number of elements without growing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.TryGetValue(System.Collections.Generic.HashSet{`0},`0,`0@)">
            <summary>
            Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper">
            <summary>
            Wraps a hash set so that it can be controlled during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.ReaderCount">
            <summary>
            Count of read accesses to the dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.WriterCount">
            <summary>
            Count of write accesses to the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.Setup">
            <summary>
            Setups the wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.HashSet`1.Wrapper.CheckDataRace(System.Boolean)">
            <summary>
            Checks for a data race.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1">
            <summary>
            Provides methods for creating generic lists that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Create">
            <summary>
            Creates a new list instance that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Create(System.Int32)">
            <summary>
            Creates a new list instance that is empty and has the specified initial capacity.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new list instance that contains elements copied from the specified collection
            and has sufficient capacity to accommodate the number of elements copied.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.get_Item(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.set_Item(System.Collections.Generic.List{`0},System.Int32,`0)">
            <summary>
            Sets the element at the specified index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.get_Count(System.Collections.Generic.List{`0})">
            <summary>
            Returns the number of elements contained in the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.get_Capacity(System.Collections.Generic.List{`0})">
            <summary>
            Gets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.set_Capacity(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Add(System.Collections.Generic.List{`0},`0)">
            <summary>
            Adds an object to the end of the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.AddRange(System.Collections.Generic.List{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.BinarySearch(System.Collections.Generic.List{`0},`0)">
            <summary>
            Searches the entire sorted list for an element using the default
            comparer and returns the zero-based index of the element.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.BinarySearch(System.Collections.Generic.List{`0},`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted list for an element using the specified
            comparer and returns the zero-based index of the element.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.BinarySearch(System.Collections.Generic.List{`0},System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted list for an element using the
            specified comparer and returns the zero-based index of the element.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Clear(System.Collections.Generic.List{`0})">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Contains(System.Collections.Generic.List{`0},`0)">
            <summary>
            Determines whether an element is in the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.ConvertAll``1(System.Collections.Generic.List{`0},System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current list to another type,
            and returns a list containing the converted elements.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.CopyTo(System.Collections.Generic.List{`0},`0[])">
            <summary>
            Copies the entire list to a compatible one-dimensional array,
            starting at the beginning of the target array.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.CopyTo(System.Collections.Generic.List{`0},`0[],System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.CopyTo(System.Collections.Generic.List{`0},System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the list to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Exists(System.Collections.Generic.List{`0},System.Predicate{`0})">
            <summary>
            Determines whether the list contains elements that match the
            conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Find(System.Collections.Generic.List{`0},System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the first occurrence within the entire list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.FindAll(System.Collections.Generic.List{`0},System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.FindIndex(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the first occurrence within the
            range of elements in the list that starts at the specified index and contains
            the specified number of elements.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.FindIndex(System.Collections.Generic.List{`0},System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the zero-based index of the first occurrence within the range of elements
            in the list that extends from the specified index to the last element.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.FindIndex(System.Collections.Generic.List{`0},System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the first occurrence within the
            entire list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.FindLast(System.Collections.Generic.List{`0},System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the last occurrence within the entire list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.FindLastIndex(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the last occurrence within the
            range of elements in the list that contains the specified
            number of elements and ends at the specified index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.FindLastIndex(System.Collections.Generic.List{`0},System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the last occurrence within the
            range of elements in the list that extends from the first
            element to the specified index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.FindLastIndex(System.Collections.Generic.List{`0},System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the last occurrence within the
            entire list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.ForEach(System.Collections.Generic.List{`0},System.Action{`0})">
            <summary>
            Performs the specified action on each element of the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.GetEnumerator(System.Collections.Generic.List{`0})">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.GetRange(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.IndexOf(System.Collections.Generic.List{`0},`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the range of elements in the list that starts at the specified
            index and contains the specified number of elements.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.IndexOf(System.Collections.Generic.List{`0},`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the range of elements in the list that extends from
            the specified index to the last element.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.IndexOf(System.Collections.Generic.List{`0},`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the entire list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Insert(System.Collections.Generic.List{`0},System.Int32,`0)">
            <summary>
            Inserts an element into the list at the specified index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.InsertRange(System.Collections.Generic.List{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the list
            at the specified index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.LastIndexOf(System.Collections.Generic.List{`0},`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last
            occurrence within the entire list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.LastIndexOf(System.Collections.Generic.List{`0},`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last
            occurrence within the range of elements in the list that extends from the first
            element to the specified index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.LastIndexOf(System.Collections.Generic.List{`0},`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last
            occurrence within the range of elements in the list that contains the specified
            number of elements and ends at the specified index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Remove(System.Collections.Generic.List{`0},`0)">
            <summary>
            Removes the first occurrence of a specific object from the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.RemoveAll(System.Collections.Generic.List{`0},System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.RemoveAt(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Removes the element at the specified index of the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.RemoveRange(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Reverse(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Reverse(System.Collections.Generic.List{`0})">
            <summary>
            Reverses the order of the elements in the entire list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Sort(System.Collections.Generic.List{`0},System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire list using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Sort(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in list using the specified comparer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Sort(System.Collections.Generic.List{`0})">
            <summary>
            Sorts the elements in the entire list using the default comparer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Sort(System.Collections.Generic.List{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire list using the specified comparer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.ToArray(System.Collections.Generic.List{`0})">
            <summary>
            Copies the elements of the list to a new array.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.TrimExcess(System.Collections.Generic.List{`0})">
            <summary>
            Sets the capacity to the actual number of elements in the list,
            if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.TrueForAll(System.Collections.Generic.List{`0},System.Predicate{`0})">
            <summary>
            Determines whether every element in the list matches
            the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper">
            <summary>
            Wraps a list so that it can be controlled during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper.ReaderCount">
            <summary>
            Count of read accesses to the list.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper.WriterCount">
            <summary>
            Count of write accesses to the list.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper.Setup">
            <summary>
            Setups the wrapper.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Collections.Generic.List`1.Wrapper.CheckDataRace(System.Boolean)">
            <summary>
            Checks for a data race.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.NameCache">
            <summary>
            Cache of known types that can be rewritten.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpClient">
            <summary>
            Provides methods for controlling an HTTP client during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpClient.Create">
            <summary>
            Creates a new instance of the HTTP client class that is controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpClient.Create(System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new instance of the HTTP client class that is controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpClient.Create(System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            Creates a new instance of the HTTP client class that is controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpClient.Control(System.Net.Http.HttpClient)">
            <summary>
            Injects logic that takes control of the specified http client.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpMessageHandler">
            <summary>
            Provides methods for controlling an HTTP client during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpMessageHandler.Create">
            <summary>
            Creates a new delegating handler instance that is controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpMessageHandler.Create(System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new delegating handler instance that is controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpMessageHandler.CreateWithDefaultHandler">
            <summary>
            Creates a new delegating handler instance that is controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of an HTTP response message based on the information
            provided in the HTTP request message.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of an HTTP response message based on the information
            provided in the HTTP request message as an operation that will not block.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestHeader">
            <summary>
            Header that can be attached to HTTP requests during controlled testing
            to propagate runtime related information.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestHeader.RuntimeId">
            <summary>
            Header that contains the runtime id associated with a request.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestHeader.SourceOperationId">
            <summary>
            Header that contains the source operation id associated with a request.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestMessage">
            <summary>
            Provides methods for controlling an HTTP client during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestMessage.Create">
            <summary>
            Creates a new instance of the HTTP request message class that is controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestMessage.Create(System.Net.Http.HttpMethod,System.String)">
            <summary>
            Creates a new instance of the HTTP request message class that is controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestMessage.Create(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
            Creates a new instance of the HTTP request message class that is controlled during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestMessage.WithRuntimeHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns the specified HTTP request with runtime related information assigned to its headers.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder">
            <summary>
            Represents a builder for asynchronous methods that return a controlled task.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.MethodBuilder">
            <summary>
            The task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
            <summary>
            Gets the task for this builder.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
            <summary>
            Marks the task as successfully completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder.AssignStateMachineTask(System.Threading.Tasks.Task)">
            <summary>
            Assigns the state machine task with the runtime.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
            <summary>
            Represents a builder for asynchronous methods that return a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.MethodBuilder">
            <summary>
            The task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
            <summary>
            Gets the task for this builder.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
            <summary>
            Marks the task as successfully completed.
            </summary>
            <param name="result">The result to use to complete the task.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AssignStateMachineTask(System.Threading.Tasks.Task{`0})">
            <summary>
            Assigns the state machine task with the runtime.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder">
            <summary>
            Represents a builder for asynchronous methods that return a controlled value task.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.MethodBuilder">
            <summary>
            The value task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Task">
            <summary>
            Gets the value task for this builder.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Create">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetResult">
            <summary>
            Marks the task as successfully completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.AssignStateMachineTask(System.Threading.Tasks.Task)">
            <summary>
            Assigns the state machine task with the runtime.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1">
            <summary>
            Represents a builder for asynchronous methods that return a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Runtime">
            <summary>
            Responsible for controlling the execution of tasks during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.MethodBuilder">
            <summary>
            The value task builder to which most operations are delegated.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Task">
            <summary>
            Gets the value task for this builder.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Create">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Start``1(``0@)">
            <summary>
            Begins running the builder with the associated state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            Associates the builder with the specified state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(`0)">
            <summary>
            Marks the task as successfully completed.
            </summary>
            <param name="result">The result to use to complete the task.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>
            Marks the task as failed and binds the specified exception to the task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AssignStateMachineTask(System.Threading.Tasks.Task{`0})">
            <summary>
            Assigns the state machine task with the runtime.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable">
            <summary>
            Provides an awaitable object that is the outcome of invoking <see cref="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)"/>.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.#ctor(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
            <summary>
            Provides an awaiter for an awaitable object.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.Runtime">
            <summary>
            The runtime controlling this awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.#ctor(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1">
            <summary>
            Provides an awaitable object that enables configured awaits on a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.#ctor(System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
            <summary>
            Provides an awaiter for an awaitable object.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.AwaitedTask">
            <summary>
            The task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.Awaiter">
            <summary>
            The task awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.Runtime">
            <summary>
            The runtime controlling this awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.#ctor(System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable">
            <summary>
            Provides an awaitable object that is the outcome of invoking <see cref="M:System.Threading.Tasks.ValueTask.ConfigureAwait(System.Boolean)"/>.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.Awaiter">
            <summary>
            The value task awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.#ctor(System.Threading.Tasks.ValueTask@,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter">
            <summary>
            Provides an awaiter for an awaitable object.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.AwaitedTask">
            <summary>
            The inner task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.Awaiter">
            <summary>
            The value task awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.Runtime">
            <summary>
            The runtime controlling this awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.#ctor(System.Threading.Tasks.ValueTask@,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the value task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the value task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1">
            <summary>
            Provides an awaitable object that enables configured awaits on a <see cref="T:System.Threading.Tasks.ValueTask`1"/>.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.Awaiter">
            <summary>
            The value task awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.#ctor(System.Threading.Tasks.ValueTask{`0}@,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter">
            <summary>
            Provides an awaiter for an awaitable object.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.AwaitedTask">
            <summary>
            The inner task being awaited.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.Awaiter">
            <summary>
            The value task awaiter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.Runtime">
            <summary>
            The runtime controlling this awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.#ctor(System.Threading.Tasks.ValueTask{`0}@,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the value task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the value task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable">
            <summary>
            Provides an awaitable object that is the outcome of invoking <see cref="M:System.Threading.Tasks.Task.Yield"/>.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.Awaiter">
            <summary>
            The yield awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.#ctor(System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.GetAwaiter">
            <summary>
            Returns an awaiter for this awaitable object.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter">
            <summary>
            Provides an awaiter for an awaitable object.
            </summary>
            <remarks>This type is intended for compiler use only.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.Awaiter">
            <summary>
            The yield awaiter.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.IsCompleted">
            <summary>
            True if the awaiter has completed, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.Microsoft#Coyote#Runtime#CompilerServices#IControllableAwaiter#IsControlled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.#ctor(System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter@)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter"/> struct.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.GetResult">
            <summary>
            Ends asynchronously waiting for the completion of the awaiter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action for the task associated with this awaiter.
            </summary>
            <param name="continuation">The action to invoke when the await operation completes.</param>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked">
            <summary>
            Provides atomic operations for variables that are shared by multiple threads.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Read(System.Int64@)">
            <summary>
            Returns a 64-bit value, loaded as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Read(System.UInt64@)">
            <summary>
            Returns a 64-bit unsigned value, loaded as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Add(System.Int32@,System.Int32)">
            <summary>
            Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Add(System.Int64@,System.Int64)">
            <summary>
            Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Add(System.UInt32@,System.UInt32)">
            <summary>
            Adds two 32-bit unsigned integers and replaces the first integer with the sum, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Add(System.UInt64@,System.UInt64)">
            <summary>
            Adds two 64-bit unsigned integers and replaces the first integer with the sum, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Increment(System.Int32@)">
            <summary>
            Increments a specified variable and stores the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Increment(System.Int64@)">
            <summary>
            Increments a specified variable and stores the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Increment(System.UInt64@)">
            <summary>
            Increments a specified variable and stores the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Increment(System.UInt32@)">
            <summary>
            Increments a specified variable and stores the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Decrement(System.Int32@)">
            <summary>
            Decrements a specified variable and stores the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Decrement(System.Int64@)">
            <summary>
            Decrements the specified variable and stores the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Decrement(System.UInt32@)">
            <summary>
            Decrements a specified variable and stores the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Decrement(System.UInt64@)">
            <summary>
            Decrements a specified variable and stores the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
            <summary>
            Sets a 32-bit signed integer to a specified value and returns the original value,
            as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
            <summary>
            Sets a 64-bit signed integer to a specified value and returns the original value,
            as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Exchange(System.UInt32@,System.UInt32)">
            <summary>
            Sets a 32-bit unsigned integer to a specified value and returns the original
            value, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Exchange(System.UInt64@,System.UInt64)">
            <summary>
            Sets a 64-bit unsigned integer to a specified value and returns the original
            value, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Exchange(System.Single@,System.Single)">
            <summary>
            Sets a single-precision floating point number to a specified value and returns
            the original value, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Exchange(System.Double@,System.Double)">
            <summary>
            Sets a double-precision floating point number to a specified value and returns
            the original value, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Exchange(System.Object@,System.Object)">
            <summary>
            Sets an object to a specified value and returns a reference to the original object,
            as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Exchange``1(``0@,``0)">
            <summary>
            Sets a variable of the specified type T to a specified value and returns the
            original value, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
            <summary>
            Sets a platform-specific handle or pointer to a specified value and returns the
            original value, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Compares two 32-bit signed integers for equality and, if they are equal, replaces
            the first value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Compares two 64-bit signed integers for equality and, if they are equal, replaces
            the first value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.CompareExchange(System.UInt32@,System.UInt32,System.UInt32)">
            <summary>
            Compares two 32-bit unsigned integers for equality and, if they are equal, replaces
            the first value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.CompareExchange(System.UInt64@,System.UInt64,System.UInt64)">
            <summary>
            Compares two 64-bit unsigned integers for equality and, if they are equal, replaces
            the first value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
            <summary>
            Compares two single-precision floating point numbers for equality and, if they
            are equal, replaces the first value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
            <summary>
            Compares two double-precision floating point numbers for equality and, if they
            are equal, replaces the first value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
            <summary>
            Compares two objects for reference equality and, if they are equal, replaces
            the first object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
            <summary>
            Compares two instances of the specified reference type T for reference equality
            and, if they are equal, replaces the first one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
            <summary>
            Compares two platform-specific handles or pointers for equality and, if they
            are equal, replaces the first one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.And(System.Int32@,System.Int32)">
            <summary>
            Bitwise "ands" two 32-bit signed integers and replaces the first integer with
            the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.And(System.Int64@,System.Int64)">
            <summary>
            Bitwise "ands" two 64-bit signed integers and replaces the first integer with
            the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.And(System.UInt32@,System.UInt32)">
            <summary>
            Bitwise "ands" two 32-bit unsigned integers and replaces the first integer with
            the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.And(System.UInt64@,System.UInt64)">
            <summary>
            Bitwise "ands" two 64-bit unsigned integers and replaces the first integer with
            the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Or(System.Int32@,System.Int32)">
            <summary>
            Bitwise "ors" two 32-bit signed integers and replaces the first integer with
            the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Or(System.Int64@,System.Int64)">
            <summary>
            Bitwise "ors" two 64-bit signed integers and replaces the first integer with
            the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Or(System.UInt32@,System.UInt32)">
            <summary>
            Bitwise "ors" two 32-bit unsigned integers and replaces the first integer with
            the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.Or(System.UInt64@,System.UInt64)">
            <summary>
            Bitwise "ors" two 64-bit unsigned integers and replaces the first integer with
            the result, as an atomic operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Interlocked.ExploreInterleaving">
            <summary>
            Asks the runtime to explore a possible interleaving.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Monitor">
            <summary>
            Provides methods for monitors that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.Enter(System.Object)">
            <summary>
            Acquires an exclusive lock on the specified object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.Enter(System.Object,System.Boolean@)">
            <summary>
            Acquires an exclusive lock on the specified object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.Exit(System.Object)">
            <summary>
            Releases an exclusive lock on the specified object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.IsEntered(System.Object)">
            <summary>
            Determines whether the current thread holds the lock on the specified object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.Pulse(System.Object)">
            <summary>
            Notifies a thread in the waiting queue of a change in the locked object's state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.PulseAll(System.Object)">
            <summary>
            Notifies all waiting threads of a change in the object's state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
            <summary>
            Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object,
            and atomically sets a value that indicates whether the lock was taken.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
            <summary>
            Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object,
            and atomically sets a value that indicates whether the lock was taken.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
            <summary>
            Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object,
            and atomically sets a value that indicates whether the lock was taken.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object, and atomically
            sets a value that indicates whether the lock was taken.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.TryEnter(System.Object)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.Wait(System.Object)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.Wait(System.Object,System.Int32)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            If the specified time-out interval elapses, the thread enters the ready queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock. If the
            specified time-out interval elapses, the thread enters the ready queue. This method also specifies
            whether the synchronization domain for the context (if in a synchronized context) is exited before
            the wait and reacquired afterward.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            If the specified time-out interval elapses, the thread enters the ready queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires the lock.
            If the specified time-out interval elapses, the thread enters the ready queue. Optionally
            exits the synchronization domain for the synchronized context before the wait and reacquires
            the domain afterward.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock">
            <summary>
            Provides a mechanism that synchronizes access to objects.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Cache">
            <summary>
            Cache from synchronized objects to synchronized block instances.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.RuntimeId">
            <summary>
            The id of the <see cref="T:Microsoft.Coyote.Runtime.CoyoteRuntime"/> that created this semaphore.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.SyncObject">
            <summary>
            The object used for synchronization.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.IsLockTaken">
            <summary>
            True if the lock was taken, else false.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Owner">
            <summary>
            The current owner of this synchronization object.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.WaitQueue">
            <summary>
            Wait queue of asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.ReadyQueue">
            <summary>
            Ready queue of asynchronous operations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.PulseQueue">
            <summary>
            Queue of nondeterministically buffered pulse operations to be performed after releasing
            the lock. This allows modeling delayed pulse operations by the operation system.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.LockCountMap">
            <summary>
            The number of times that the lock has been acquired per owner. The lock can only
            be acquired more than one times by the same owner. A count > 1 indicates that the
            invocation by the current owner is reentrant.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.UseCount">
            <summary>
            Used to reference count accesses to this synchronized block
            so that it can be removed from the cache.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Lock(System.Object)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock"/> for synchronizing access
            to the specified object and enters the lock.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Find(System.Object)">
            <summary>
            Finds the synchronized block associated with the specified synchronization object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.IsEntered">
            <summary>
            Determines whether the current thread holds the lock on the sync object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Pulse">
            <summary>
            Notifies a thread in the waiting queue of a change in the locked object's state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.PulseAll">
            <summary>
            Notifies all waiting threads of a change in the object's state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Pulse(Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.PulseOperation)">
            <summary>
            Invokes the specified pulse operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Pulse(Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.PulseOperation)">
            <summary>
            Invokes the specified pulse operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Wait">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires
            the lock.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Wait(System.Int32)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires
            the lock. If the specified time-out interval elapses, the thread enters the ready
            queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Wait(System.TimeSpan)">
            <summary>
            Releases the lock on an object and blocks the current thread until it reacquires
            the lock. If the specified time-out interval elapses, the thread enters the ready
            queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.UnlockNextReady">
            <summary>
            Assigns the lock to the next operation waiting in the ready queue, if there is one,
            following the FIFO semantics of monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.GetRuntime">
            <summary>
            Returns the current runtime, asserting that it is the same runtime that created this resource.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Dispose(System.Boolean)">
            <summary>
            Releases resources used by the synchronized block.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.Dispose">
            <summary>
            Releases resources used by the synchronized block.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.PulseOperation">
            <summary>
            The type of a pulse operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.PulseOperation.Next">
            <summary>
            Pulses the next waiting operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Monitor.SynchronizedBlock.PulseOperation.All">
            <summary>
            Pulses all waiting operations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim">
            <summary>
            Provides methods for creating semaphores that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Create(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim"/> class, specifying
            the initial number of requests that can be granted concurrently.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Create(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim"/> class, specifying
            the initial and maximum number of requests that can be granted concurrently.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.get_AvailableWaitHandle(System.Threading.SemaphoreSlim)">
            <summary>
            Returns a <see cref="T:System.Threading.WaitHandle"/> that can be used to wait on the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.get_CurrentCount(System.Threading.SemaphoreSlim)">
            <summary>
            Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wait(System.Threading.SemaphoreSlim)">
            <summary>
            Blocks the current task until it can enter the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wait(System.Threading.SemaphoreSlim,System.TimeSpan)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a <see cref="T:System.TimeSpan"/>
            that specifies the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wait(System.Threading.SemaphoreSlim,System.Int32)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a 32-bit signed integer
            that specifies the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wait(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <summary>
            Blocks the current task until it can enter the semaphore, while observing a cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wait(System.Threading.SemaphoreSlim,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a <see cref="T:System.TimeSpan"/>
            that specifies the timeout, while observing a cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wait(System.Threading.SemaphoreSlim,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Blocks the current task until it can enter the semaphore, using a 32-bit signed integer
            that specifies the timeout, while observing a cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.WaitAsync(System.Threading.SemaphoreSlim)">
            <summary>
            Asynchronously waits to enter the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.WaitAsync(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the semaphore, while observing a cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.WaitAsync(System.Threading.SemaphoreSlim,System.Int32)">
            <summary>
            Asynchronously waits to enter the semaphore, using a 32-bit signed integer
            that specifies the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.WaitAsync(System.Threading.SemaphoreSlim,System.TimeSpan)">
            <summary>
            Asynchronously waits to enter the semaphore, using a <see cref="T:System.TimeSpan"/> that specifies the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.WaitAsync(System.Threading.SemaphoreSlim,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the semaphore, using a <see cref="T:System.TimeSpan"/>
            that specifies the timeout, while observing a cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.WaitAsync(System.Threading.SemaphoreSlim,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits to enter the semaphore, using a 32-bit signed integer
            that specifies the timeout, while observing a cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Release(System.Threading.SemaphoreSlim)">
            <summary>
            Releases the <see cref="T:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim"/> object once.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Release(System.Threading.SemaphoreSlim,System.Int32)">
            <summary>
            Releases the <see cref="T:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim"/> object a specified number of times.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper">
            <summary>
            Wraps a <see cref="T:System.Threading.SemaphoreSlim"/> so that it can be controlled during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.RuntimeId">
            <summary>
            The id of the <see cref="T:Microsoft.Coyote.Runtime.CoyoteRuntime"/> that created this semaphore.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.ResourceId">
            <summary>
            The resource id of this semaphore.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.PausedOperations">
            <summary>
            Queue of operations waiting to be released.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.AsyncAwaiters">
            <summary>
            Queue of completion sources that operations are asynchronously awaiting to get released.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.MaxCount">
            <summary>
            The maximum semaphore value.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.LockCount">
            <summary>
            The semaphore lock count.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.DebugName">
            <summary>
            The debug name of this semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.#ctor(Microsoft.Coyote.Runtime.CoyoteRuntime,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.Enter(System.Int32)">
            <summary>
            Pauses the current operation until it can enter the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.EnterAsync(System.Int32)">
            <summary>
            Pauses the current operation asynchronously until it can enter the semaphore.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.Exit(System.Int32)">
            <summary>
            Exits the semaphore a specified number of times.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.SemaphoreSlim.Wrapper.GetRuntime">
            <summary>
            Returns the current runtime, asserting that it is the same runtime that created this resource.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel">
            <summary>
            Provides methods for creating tasks that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.MaxDegreeOfParallelism">
            <summary>
            We pick a fixed max degree of parallelism to make sure the schedules are reproducible
            across machines with different processor count.
            </summary>
            <remarks>
            TODO: make this configurable.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.Invoke(System.Action[])">
            <summary>
            Executes each of the provided actions, possibly in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])">
            <summary>
            Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel and loop options
            can be configured.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a for loop in which iterations may run in parallel and the state of
            the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a for loop in which iterations may run in parallel, loop options can
            be configured, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})">
            <summary>
            Executes a for loop with 64-bit indexes in which iterations may run in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})">
            <summary>
            Executes a for loop with 64-bit indexes in which iterations may run in parallel
            and loop options can be configured.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a for loop with 64-bit indexes in which iterations may run in parallel
            and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a for loop with 64-bit indexes in which iterations may run in parallel, loop
            options can be configured, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>
            Executes a for loop with thread-local data in which iterations may run in parallel,
            and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>
            Executes a for loop with thread-local data in which iterations may run in parallel, loop
            options can be configured, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>
            Executes a for loop with 64-bit indexes and thread-local data in which iterations
            may run in parallel, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
            <summary>
            Executes a for loop with 64-bit indexes and thread-local data in which iterations
            may run in parallel, loop options can be configured, and the state of the loop
            can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.IEnumerable"/>
            in which iterations may run in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.IEnumerable"/>
            in which iterations may run in parallel and loop options can be configured.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.Partitioner"/> in which iterations may run in parallel.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.Partitioner"/> in which iterations may run
            in parallel and loop options can be configured.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.IEnumerable"/> in which iterations
            may run in parallel, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.IEnumerable"/> in which iterations
            may run in parallel, loop options can be configured, and the state of the loop can be monitored and
            manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.Partitioner"/> in which iterations may run in parallel,
            and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.Partitioner"/> in which iterations may run in parallel,
            loop options can be configured, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Executes a foreach operation with 64-bit indexes on a <see cref="T:System.Collections.IEnumerable"/>
            in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Executes a foreach operation with 64-bit indexes on a <see cref="T:System.Collections.IEnumerable"/>
            in which iterations may run in parallel, loop options can be configured, and the state of the loop
            can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1"/> in which iterations
            may run in parallel and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Executes a foreach operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1"/>
            in which iterations may run in parallel, loop options can be configured, and
            the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.IEnumerable"/>
            in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.IEnumerable"/>
            in which iterations may run in parallel, loop options can be configured, and the state of the loop
            can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner"/> in which
            iterations may run in parallel and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner"/> in which
            iterations may run in parallel, loop options can be configured, and the state of the loop
            can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.IEnumerable"/>
            in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data and 64-bit indexes on a
            <see cref="T:System.Collections.IEnumerable"/> in which iterations may run in
            parallel, loop options can be configured, and the state of the loop can be
            monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1"/>
            in which iterations may run in parallel, loop options can be configured, and the state of the loop
            can be monitored and manipulated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
            <summary>
            Executes a foreach operation with 64-bit indexes and with thread-local data on
            a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1"/> in which iterations may run in
            parallel , loop options can be configured, and the state of the loop can be
            monitored and manipulated.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task">
            <summary>
            Provides methods for creating tasks that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.CompletedTask">
            <summary>
            Gets a task that has already completed successfully.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.DefaultFactory">
            <summary>
            The default task factory.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Factory">
            <summary>
            Provides access to factory methods for creating controlled task and generic task instances.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Run(System.Action)">
            <summary>
            Queues the specified work to run on the thread pool and returns a task object that
            represents that work. A cancellation token allows the work to be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a task
            object that represents that work.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Run``1(System.Func{``0})">
            <summary>
            Queues the specified work to run on the thread pool and returns a task
            object that represents that work.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a task object that
            represents that work. A cancellation token allows the work to be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for
            the task returned by the function.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the task
            returned by the function. A cancellation token allows the work to be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            generic task returned by the function.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the generic
            task returned by the function. A cancellation token allows the work to be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Delay(System.Int32)">
            <summary>
            Creates a task that completes after a time delay.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a task that completes after a time delay.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Delay(System.TimeSpan)">
            <summary>
            Creates a task that completes after a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Creates a task that completes after a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when all tasks in the specified array have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when all tasks in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when all tasks in the specified array have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when all tasks in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
            <summary>
            Creates a task that will complete when any task in the specified array have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that will complete when any task in the specified enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task,System.Threading.Tasks.Task)">
            <summary>
            Creates a task that will complete when either of the two tasks have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``0})">
            <summary>
            Creates a task that will complete when either of the two tasks have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a task that will complete when any task in the specified array have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that will complete when any task in the specified
            enumerable collection have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
            <summary>
            Waits for all of the provided task objects to complete execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for all of the provided task objects to complete execution
            within a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits for all of the provided task objects to complete execution within
            a specified number of milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
            <summary>
            Waits for all of the provided task objects to complete execution unless the wait is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided task objects to complete execution within a specified
            number of milliseconds or until a cancellation token is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
            <summary>
            Waits for any of the provided task objects to complete execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
            <summary>
            Waits for any of the provided task objects to complete execution within a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
            <summary>
            Waits for any of the provided task objects to complete execution within
            a specified number of milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided task objects to complete execution unless the wait is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for any of the provided task objects to complete execution within a specified
            number of milliseconds or until a cancellation token is cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Wait(System.Threading.Tasks.Task)">
            <summary>
            Waits for the specified task to complete execution.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Wait(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            Waits for the specified task to complete execution within a specified time interval.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Wait(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Waits for the specified task to complete execution within a specified number of milliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Wait(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits for the specified task to complete execution. The wait terminates if a cancellation
            token is canceled before the task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Wait(System.Threading.Tasks.Task,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits for the specified task to complete execution. The wait terminates if a timeout interval
            elapses or a cancellation token is canceled before the task completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.FromResult``1(``0)">
            <summary>
            Creates a task that has completed successfully with the specified result.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
            <summary>
            Creates a task that has completed due to cancellation with the specified cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
            <summary>
            Creates a task that has completed due to cancellation with the specified cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.FromException(System.Exception)">
            <summary>
            Creates a task that has completed with the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.FromException``1(System.Exception)">
            <summary>
            Creates a task that has completed with the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.GetAwaiter(System.Threading.Tasks.Task)">
            <summary>
            Returns a task awaiter for the specified task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.ConfigureAwait(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task.Yield">
            <summary>
            Creates an awaitable that asynchronously yields back to the current context when awaited.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task`1">
            <summary>
            Provides methods for creating generic tasks that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task`1.DefaultFactory">
            <summary>
            The default generic task factory.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task`1.Factory">
            <summary>
            Provides access to factory methods for creating controlled generic task instances.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task`1.get_Result(System.Threading.Tasks.Task{`0})">
            <summary>
            Gets the result value of the specified generic task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task`1.GetAwaiter(System.Threading.Tasks.Task{`0})">
            <summary>
            Returns a generic task awaiter for the specified generic task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.Task`1.ConfigureAwait(System.Threading.Tasks.Task{`0},System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource">
            <summary>
            Represents the producer side of a controlled task unbound to a delegate, providing
            access to the consumer side through the task property of the task completion source.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.get_Task(System.Threading.Tasks.TaskCompletionSource)">
            <summary>
            Gets the task created by this task completion source.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.SetResult(System.Threading.Tasks.TaskCompletionSource)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.SetException(System.Threading.Tasks.TaskCompletionSource,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds a collection of exception objects to it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.SetException(System.Threading.Tasks.TaskCompletionSource,System.Exception)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds it to a specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.SetCanceled(System.Threading.Tasks.TaskCompletionSource)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.TrySetResult(System.Threading.Tasks.TaskCompletionSource)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.TrySetException(System.Threading.Tasks.TaskCompletionSource,System.Exception)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds it to a specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.TrySetException(System.Threading.Tasks.TaskCompletionSource,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds a collection of exception objects to it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.TrySetCanceled(System.Threading.Tasks.TaskCompletionSource)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource.TrySetCanceled(System.Threading.Tasks.TaskCompletionSource,System.Threading.CancellationToken)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state
            and enables a cancellation token to be stored in the canceled task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1">
            <summary>
            Represents the producer side of a controlled task unbound to a delegate, providing
            access to the consumer side through the task property of the task completion source.
            </summary>
            <typeparam name="TResult">The type of the result value.</typeparam>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.get_Task(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            Gets the task created by this task completion source.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.SetResult(System.Threading.Tasks.TaskCompletionSource{`0},`0)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.SetException(System.Threading.Tasks.TaskCompletionSource{`0},System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds a collection of exception objects to it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.SetException(System.Threading.Tasks.TaskCompletionSource{`0},System.Exception)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds it to a specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.SetCanceled(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.TrySetResult(System.Threading.Tasks.TaskCompletionSource{`0},`0)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Threading.Tasks.TaskCompletionSource{`0},System.Exception)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds it to a specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Threading.Tasks.TaskCompletionSource{`0},System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds a collection of exception objects to it.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.Tasks.TaskCompletionSource{`0})">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.Tasks.TaskCompletionSource{`0},System.Threading.CancellationToken)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state
            and enables a cancellation token to be stored in the canceled task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory">
            <summary>
            Provides support for creating and scheduling controlled task objects.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.get_ContinuationOptions(System.Threading.Tasks.TaskFactory)">
            <summary>
            The default task continuation options for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.get_CancellationToken(System.Threading.Tasks.TaskFactory)">
            <summary>
            The default task cancellation token for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.get_CreationOptions(System.Threading.Tasks.TaskFactory)">
            <summary>
            The default task creation options for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.get_Scheduler(System.Threading.Tasks.TaskFactory)">
            <summary>
            The default task scheduler for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew(System.Threading.Tasks.TaskFactory,System.Action)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew(System.Threading.Tasks.TaskFactory,System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew(System.Threading.Tasks.TaskFactory,System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew(System.Threading.Tasks.TaskFactory,System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew(System.Threading.Tasks.TaskFactory,System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew``1(System.Threading.Tasks.TaskFactory,System.Func{``0})">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew``1(System.Threading.Tasks.TaskFactory,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew``1(System.Threading.Tasks.TaskFactory,System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew``1(System.Threading.Tasks.TaskFactory,System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory.StartNew``1(System.Threading.Tasks.TaskFactory,System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1">
            <summary>
            Provides support for creating and scheduling controlled generic task objects.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.get_ContinuationOptions(System.Threading.Tasks.TaskFactory{`0})">
            <summary>
            The default task continuation options for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.get_CancellationToken(System.Threading.Tasks.TaskFactory{`0})">
            <summary>
            The default task cancellation token for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.get_CreationOptions(System.Threading.Tasks.TaskFactory{`0})">
            <summary>
            The default task creation options for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.get_Scheduler(System.Threading.Tasks.TaskFactory{`0})">
            <summary>
            The default task scheduler for this task factory.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.StartNew(System.Threading.Tasks.TaskFactory{`0},System.Func{`0})">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.StartNew(System.Threading.Tasks.TaskFactory{`0},System.Func{`0},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.StartNew(System.Threading.Tasks.TaskFactory{`0},System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.StartNew(System.Threading.Tasks.TaskFactory{`0},System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.StartNew(System.Threading.Tasks.TaskFactory{`0},System.Func{System.Object,`0},System.Object)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.StartNew(System.Threading.Tasks.TaskFactory{`0},System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.StartNew(System.Threading.Tasks.TaskFactory{`0},System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.TaskFactory`1.StartNew(System.Threading.Tasks.TaskFactory{`0},System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates and starts a task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask">
            <summary>
            Provides methods for creating value tasks that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask.CompletedTask">
            <summary>
            Gets a value task that has already completed successfully.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask.FromResult``1(``0)">
            <summary>
            Creates a value task that has completed successfully with the specified result.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask.FromCanceled(System.Threading.CancellationToken)">
            <summary>
            Creates a value task that has completed due to cancellation with the specified cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask.FromCanceled``1(System.Threading.CancellationToken)">
            <summary>
            Creates a value task that has completed due to cancellation with the specified cancellation token.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask.FromException(System.Exception)">
            <summary>
            Creates a value task that has completed with the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask.FromException``1(System.Exception)">
            <summary>
            Creates a value task that has completed with the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask.AsTask(System.Threading.Tasks.ValueTask@)">
            <summary>
            Retrieves a task object that represents this value task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask.GetAwaiter(System.Threading.Tasks.ValueTask@)">
            <summary>
            Returns a value task awaiter for the specified task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask.ConfigureAwait(System.Threading.Tasks.ValueTask@,System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask`1">
            <summary>
            Provides methods for creating generic value tasks that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask`1.DefaultFactory">
            <summary>
            The default generic task factory.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask`1.Factory">
            <summary>
            Provides access to factory methods for creating controlled generic task instances.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask`1.get_Result(System.Threading.Tasks.ValueTask{`0}@)">
            <summary>
            Gets the result value of the specified generic task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask`1.AsTask(System.Threading.Tasks.ValueTask{`0}@)">
            <summary>
            Retrieves a task object that represents this value task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask`1.GetAwaiter(System.Threading.Tasks.ValueTask{`0}@)">
            <summary>
            Returns a generic task awaiter for the specified generic task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Threading.Tasks.ValueTask{`0}@,System.Boolean)">
            <summary>
            Configures an awaiter used to await this task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Threading.Thread">
            <summary>
            Provides methods for creating threads that can be controlled during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Threading.Thread.Yield">
            <summary>
            Causes the calling thread to yield execution to another thread that is ready
            to run on the current processor.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.TaskExtensions">
            <summary>
            Provides a set of static methods for working with specific kinds of task instances.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>
            Creates a proxy task that represents the asynchronous operation of a task.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a proxy generic task that represents the asynchronous operation of a task.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Rewriting.Types.Web.RequestControllerMiddleware">
            <summary>
            Middleware for controlling a web application during testing.
            </summary>
            <remarks>This type is intended for compiler use rather than use directly in code.</remarks>
        </member>
        <member name="F:Microsoft.Coyote.Rewriting.Types.Web.RequestControllerMiddleware.Next">
            <summary>
            Invokes the next middleware in the pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Web.RequestControllerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Rewriting.Types.Web.RequestControllerMiddleware"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Web.RequestControllerMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware to controls the specified request.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Web.RequestControllerMiddleware.TryExtractRuntime(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Coyote.Runtime.CoyoteRuntime@)">
            <summary>
            Tries to return the runtime instance that has the identifier defined in the value
            of the <see cref="F:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestHeader.RuntimeId"/> header of the specified request,
            if there is such a header available.
            </summary>
            <remarks>
            The header is removed from the request after the runtime is retrieved.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Web.RequestControllerMiddleware.TryExtractSourceOperation(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Coyote.Runtime.CoyoteRuntime,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <summary>
            Tries to return the source operation that has the identifier defined in the value
            of the <see cref="F:Microsoft.Coyote.Rewriting.Types.Net.Http.HttpRequestHeader.SourceOperationId"/> header of the specified
            request, if there is such a header available.
            </summary>
            <remarks>
            The header is removed from the request after the operation is retrieved.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Rewriting.Types.Web.RequestControllerMiddleware.ToHttpMethod(System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.Coyote.Web.HttpMethod"/> from the specified string.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TestReport">
            <summary>
            Report containing information from a test run.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.Configuration">
            <summary>
            Configuration of the program-under-test.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.CoverageInfo">
            <summary>
            Information regarding code coverage.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.NumOfExploredFairSchedules">
            <summary>
            Number of explored fair schedules.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.NumOfExploredUnfairSchedules">
            <summary>
            Number of explored unfair schedules.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.NumOfFoundBugs">
            <summary>
            Number of found bugs.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.FirstBugIteration">
            <summary>
            First bug iteration.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.BugReports">
            <summary>
            Set of bug reports.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.UncontrolledInvocations">
            <summary>
            Set of uncontrolled invocations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MinControlledOperations">
            <summary>
            The minimum number of controlled operations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MaxControlledOperations">
            <summary>
            The maximum number of controlled operations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.TotalControlledOperations">
            <summary>
            The total number of controlled operations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MinConcurrencyDegree">
            <summary>
            The min degree of concurrency.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MaxConcurrencyDegree">
            <summary>
            The max degree of concurrency.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.TotalConcurrencyDegree">
            <summary>
            The total degree of concurrency (across all testing iterations).
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MinOperationGroupingDegree">
            <summary>
            The minimum degree of operation grouping.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MaxOperationGroupingDegree">
            <summary>
            The maximum degree of operation grouping.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.TotalOperationGroupingDegree">
            <summary>
            The total degree of operation grouping (across all testing iterations).
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MinExploredFairSteps">
            <summary>
            The min explored scheduling steps in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MaxExploredFairSteps">
            <summary>
            The max explored scheduling steps in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.TotalExploredFairSteps">
            <summary>
            The total explored scheduling steps (across all testing iterations) in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MinExploredUnfairSteps">
            <summary>
            The min explored scheduling steps in unfair tests.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MaxExploredUnfairSteps">
            <summary>
            The max explored scheduling steps in unfair tests.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.TotalExploredUnfairSteps">
            <summary>
            The total explored scheduling steps (across all testing iterations) in unfair tests.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MaxFairStepsHitInFairTests">
            <summary>
            Number of times the fair max steps bound was hit in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MaxUnfairStepsHitInFairTests">
            <summary>
            Number of times the unfair max steps bound was hit in fair tests.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.MaxUnfairStepsHitInUnfairTests">
            <summary>
            Number of times the unfair max steps bound was hit in unfair tests.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.InternalErrors">
            <summary>
            Set of internal errors. If no internal errors occurred, then this set is empty.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestReport.Lock">
            <summary>
            Lock for the test report.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestReport.ThrownException">
            <summary>
            Unhandled exception caught by RunNextIteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestReport.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.TestReport"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestReport.Microsoft#Coyote#Testing#ITestReport#SetSchedulingStatistics(System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestReport.Microsoft#Coyote#Testing#ITestReport#SetUnhandledException(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestReport.Microsoft#Coyote#Testing#ITestReport#SetUncontrolledInvocations(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestReport.Merge(Microsoft.Coyote.SystematicTesting.TestReport)">
            <summary>
            Merges the information from the specified test report.
            </summary>
            <returns>True if merged successfully.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestReport.GetText(Microsoft.Coyote.Configuration,System.String)">
            <summary>
            Returns the testing report as a string, given a configuration and an optional prefix.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestReport.Clone">
            <summary>
            Clones the test report.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TraceReport">
            <summary>
            Report containing the execution trace from a test run.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestName">
            <summary>
            The name of the test corresponding to this trace.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.CoyoteVersion">
            <summary>
            The version of Coyote used during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.Settings">
            <summary>
            The settings that were used during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.Decisions">
            <summary>
            The controlled decisions of this trace.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TraceReport.GetJson(Microsoft.Coyote.Runtime.OperationScheduler,Microsoft.Coyote.Configuration)">
            <summary>
            Constructs a <see cref="T:Microsoft.Coyote.SystematicTesting.TraceReport"/> from the specified <see cref="T:Microsoft.Coyote.Runtime.OperationScheduler"/>
            and <see cref="T:Microsoft.Coyote.Configuration"/>, and returns it in JSON format.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TraceReport.FromJson(Microsoft.Coyote.Configuration)">
            <summary>
            Returns a <see cref="T:Microsoft.Coyote.Runtime.ExecutionTrace"/> from the specified JSON trace and also updates
            the configuration with any values explicitly set in the trace report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TraceReport.ReportTrace(Microsoft.Coyote.Runtime.ExecutionTrace)">
            <summary>
            Adds the specified trace to the report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TraceReport.ToJson">
            <summary>
            Returns the trace report in JSON format.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings">
            <summary>
            The settings that were used during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.Strategy">
            <summary>
            The name of the strategy used in this test.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.StrategyBound">
            <summary>
            A strategy-specific bound.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.Seed">
            <summary>
            The random seed.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.MaxFairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore for fair schedulers.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.MaxUnfairSchedulingSteps">
            <summary>
            The maximum scheduling steps to explore for unfair schedulers.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.TimeoutDelay">
            <summary>
            Value that controls the probability of triggering a timeout during systematic testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.DeadlockTimeout">
            <summary>
            Value that controls how much time the deadlock monitor should wait during
            concurrency testing before reporting a potential deadlock.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.PortfolioMode">
            <summary>
            The enabled exploration strategy portfolio mode.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.IsLivenessCheckingEnabled">
            <summary>
            Value specifying if liveness checking is enabled or not.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.LivenessTemperatureThreshold">
            <summary>
            The liveness temperature threshold.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.IsLockAccessRaceCheckingEnabled">
            <summary>
            Value specifying if checking races during lock accesses is enabled or not.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.IsPartiallyControlledConcurrencyAllowed">
            <summary>
            Value specifying if partially controlled concurrency is allowed or not.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.IsPartiallyControlledDataNondeterminismAllowed">
            <summary>
            Value specifying if partially controlled data non-determinism is allowed or not.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.UncontrolledConcurrencyResolutionAttempts">
            <summary>
            Value that controls how many times the runtime can check if each instance
            of uncontrolled concurrency has resolved during testing before timing out.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TraceReport.TestSettings.UncontrolledConcurrencyResolutionDelay">
            <summary>
            Value that controls how much time the runtime should wait between each attempt
            to resolve uncontrolled concurrency during testing before timing out.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.UncontrolledInvocationsReport">
            <summary>
            Implements a report with uncontrolled invocations.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.UncontrolledInvocationsReport.ToJSON(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Converts the specified set of uncontrolled invocations to JSON.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.UncontrolledInvocationsReport.UncontrolledInvocationsJsonReport">
            <summary>
            Implements an uncontrolled invocations JSON report object.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TestAttribute">
            <summary>
            Attribute for declaring the entry point to a Coyote test.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TestInitAttribute">
            <summary>
            Attribute for declaring the initialization method to be called before testing starts.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TestDisposeAttribute">
            <summary>
            Attribute for declaring a cleanup method to be called when all test iterations terminate.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TestIterationDisposeAttribute">
            <summary>
            Attribute for declaring a cleanup method to be called when each test iteration terminates.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TestingEngine">
            <summary>
            Testing engine that can run a controlled concurrency test using
            a specified configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.TelemetryClient">
            <summary>
            The client used to optionally send anonymized telemetry data.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.Configuration">
            <summary>
            The test configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.TestMethodInfo">
            <summary>
            The method to test.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.StartIterationCallbacks">
            <summary>
            Set of callbacks to invoke at the start of each iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.EndIterationCallbacks">
            <summary>
            Set of callbacks to invoke at the end of each iteration.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestingEngine.Scheduler">
            <summary>
            The scheduler used by the runtime during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestingEngine.Profiler">
            <summary>
            The profiler.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestingEngine.Actions">
            <summary>
            Actions and Actors retrieved from the previous iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.CancellationTokenSource">
            <summary>
            The testing task cancellation token source.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestingEngine.TestReport">
            <summary>
            Data structure containing information
            gathered during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.LogWriter">
            <summary>
            Responsible for writing to the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.LastCoverageGraph">
            <summary>
            The DGML coverage graph of the execution path explored in the last iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.XmlLog">
            <summary>
            Contains a single iteration of XML log output in the case where the IsXmlLogEnabled
            configuration is specified.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestingEngine.ReadableTrace">
            <summary>
            The readable trace, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.SystematicTesting.TestingEngine.ReproducibleTrace">
            <summary>
            The reproducible trace, if any.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.PrintGuard">
            <summary>
            A guard for printing info.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestingEngine.EngineLock">
            <summary>
            Serializes access to the engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.Create(Microsoft.Coyote.Configuration,System.Action)">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.Create(Microsoft.Coyote.Configuration,System.Action{Microsoft.Coyote.Runtime.ICoyoteRuntime})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.Create(Microsoft.Coyote.Configuration,System.Action{Microsoft.Coyote.Actors.IActorRuntime})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.Create(Microsoft.Coyote.Configuration,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.Create(Microsoft.Coyote.Configuration,System.Func{Microsoft.Coyote.Runtime.ICoyoteRuntime,System.Threading.Tasks.Task})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.Create(Microsoft.Coyote.Configuration,System.Func{Microsoft.Coyote.Actors.IActorRuntime,System.Threading.Tasks.Task})">
            <summary>
            Creates a new systematic testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.TestingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.#ctor(Microsoft.Coyote.Configuration,System.Delegate,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.TestingEngine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.SystematicTesting.TestMethodInfo,Microsoft.Coyote.Runtime.ExecutionTrace,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.TestingEngine"/> class.
            </summary>
            <remarks>
            If a non-empty prefix trace is provided, then the testing engine will attempt
            to replay it before performing any new exploration.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.Run">
            <summary>
            Runs the testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.CreateTestingTask(Microsoft.Coyote.SystematicTesting.TestMethodInfo)">
            <summary>
            Creates a new testing task for the specified test method.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.RunNextIteration(Microsoft.Coyote.SystematicTesting.TestMethodInfo,System.UInt32)">
            <summary>
            Runs the next testing iteration for the specified test method.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.Stop">
            <summary>
            Stops the testing engine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.GetReport">
            <summary>
            Returns a report with the testing results.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.ThrowIfBugFound">
            <summary>
            Throws either an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/>, if a bug was found,
            or an unhandled <see cref="T:System.Exception"/>, if one was thrown.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.TryEmitReports(System.String,System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Tries to emit the available reports to the specified directory with the given file name,
            and returns the paths of all emitted reports.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.TryEmitCoverageReports(System.String,System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Tries to emit the available coverage reports to the specified directory with the given file name,
            and returns the paths of all emitted coverage reports.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.GatherTestingStatistics(Microsoft.Coyote.Runtime.CoyoteRuntime,System.UInt32)">
            <summary>
            Gathers the exploration strategy statistics from the specified runtimne.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.TrackTelemetry">
            <summary>
            Tracks anonymized telemetry data.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.RegisterStartIterationCallBack(System.Action{System.UInt32})">
            <summary>
            Registers a callback to invoke at the start of each iteration. The callback takes as
            a parameter an integer representing the current iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.RegisterEndIterationCallBack(System.Action{System.UInt32})">
            <summary>
            Registers a callback to invoke at the end of each iteration. The callback takes as
            a parameter an integer representing the current iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.InvokeStartIterationCallBacks(System.UInt32)">
            <summary>
            Invokes any registered callbacks at the start of the specified iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.InvokeEndIterationCallBacks(System.UInt32)">
            <summary>
            Invokes any registered callbacks at the end of the specified iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.InitializeCustomActorLogging(Microsoft.Coyote.Actors.IActorRuntime)">
            <summary>
            Initializes any custom actor logs.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.ShouldPrintIteration(System.UInt32)">
            <summary>
            Returns true if the engine should print the current iteration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.IsTestRewritten">
            <summary>
            Checks if the test executed by the testing engine has been rewritten with the current version.
            </summary>
            <returns>True if the test has been rewritten, else false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.SetLogger(Microsoft.Coyote.Logging.ILogger)">
            <summary>
            Installs the specified <see cref="T:Microsoft.Coyote.Logging.ILogger"/> to log messages during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.OnUnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Callback invoked when an unhandled exception occurs during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestingEngine.Dispose">
            <summary>
            Releases any held resources.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.SystematicTesting.TestMethodInfo">
            <summary>
            Maintains information about a method to be tested.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.Assembly">
            <summary>
            The assembly that contains the test method.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.Method">
            <summary>
            The method to be tested.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.Name">
            <summary>
            The name of the test method.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.InitMethod">
            <summary>
            The test initialization method.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.DisposeMethod">
            <summary>
            The test dispose method.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.IterationDisposeMethod">
            <summary>
            The test dispose method per iteration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.LoadContext">
            <summary>
            The assembly load context, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.DependencyContext">
            <summary>
            The assembly dependency context, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.AssemblyResolver">
            <summary>
            The assembly resolver, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.SystematicTesting.TestMethodInfo.LogWriter">
            <summary>
            Responsible for writing to the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.#ctor(System.Delegate,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.TestMethodInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.SystematicTesting.TestMethodInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.Create(System.Delegate,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.SystematicTesting.TestMethodInfo"/> instance from the specified delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.Create(Microsoft.Coyote.Configuration,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Creates a <see cref="T:Microsoft.Coyote.SystematicTesting.TestMethodInfo"/> instance from assembly specified in the configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.InitializeAllIterations">
            <summary>
            Invokes the user-specified initialization method for all iterations executing this test.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.DisposeCurrentIteration">
            <summary>
            Invokes the user-specified disposal method for the iteration currently executing this test.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.DisposeAllIterations">
            <summary>
            Invokes the user-specified disposal method for all iterations executing this test.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.GetTestMethod(System.Reflection.Assembly,System.String,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Returns the test method with the specified name. A test method must
            be annotated with the <see cref="T:Microsoft.Coyote.SystematicTesting.TestAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.GetTestSetupMethod(System.Reflection.Assembly,System.Type,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Returns the test method with the specified attribute.
            Returns null if no such method is found.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.FindTestMethodsWithAttribute(System.Type,System.Reflection.BindingFlags,System.Reflection.Assembly,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Finds the test methods with the specified attribute in the given assembly.
            Returns an empty list if no such methods are found.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.OnResolving(System.Runtime.Loader.AssemblyLoadContext,System.Reflection.AssemblyName)">
            <summary>
            Invoked when the resolution of an assembly fails.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.SystematicTesting.TestMethodInfo.Dispose">
            <summary>
            Releases any held resources.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Telemetry.TelemetryClient">
            <summary>
            Thread-safe client for sending telemetry messages to Azure.
            </summary>
            <remarks>
            See <see href="https://github.com/microsoft/ApplicationInsights-dotnet"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Telemetry.TelemetryClient.CoyoteHomePath">
            <summary>
            Path to the Coyote home directory where the UUID is stored.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Telemetry.TelemetryClient.IdFileName">
            <summary>
            File name where the UUID is stored.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Telemetry.TelemetryClient.SyncObject">
            <summary>
            Used to synchronize access to the telemetry client.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Telemetry.TelemetryClient.Current">
            <summary>
            The current instance of the telemetry client.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Telemetry.TelemetryClient.Client">
            <summary>
            The App Insights client.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Telemetry.TelemetryClient.LogWriter">
            <summary>
            Responsible for writing to the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Telemetry.TelemetryClient.IsEnabled">
            <summary>
            True if telemetry is enabled, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Telemetry.TelemetryClient.#ctor(Microsoft.Coyote.Logging.LogWriter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Telemetry.TelemetryClient"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Telemetry.TelemetryClient.GetOrCreate(Microsoft.Coyote.Configuration,Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Returns the existing telemetry client if one has already been created for this process,
            or creates and returns a new one with the specified configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Telemetry.TelemetryClient.TrackEvent(System.String)">
            <summary>
            Tracks the specified telemetry event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Telemetry.TelemetryClient.TrackMetric(System.String,System.Double)">
            <summary>
            Tracks the specified telemetry metric.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Telemetry.TelemetryClient.Flush">
            <summary>
            Flushes any buffered in-memory telemetry data.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Telemetry.TelemetryClient.GetOrCreateDeviceId(System.Boolean@)">
            <summary>
            Returns the unique device id or creates a new one.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Telemetry.TelemetryClient.IsWindowsLike">
            <summary>
            Returns true if this is a Windows platform, else false.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Web.RequestControllerMiddlewareExtensions">
            <summary>
            Middleware for controlling an ASP.NET web application during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Web.RequestControllerMiddlewareExtensions.UseRequestController(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds the request controller middleware to the specified builder.
            </summary>
            <remarks>
            This middleware should be added in the beginning of an ASP.NET middleware
            pipeline that should be controlled by Coyote during testing.
            </remarks>
        </member>
    </members>
</doc>
