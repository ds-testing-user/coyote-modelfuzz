<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Coyote.Actors</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo">
            <summary>
            Class for storing actor coverage-specific data across multiple testing iterations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.Machines">
            <summary>
            Set of known machines.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.MachinesToStates">
            <summary>
            Map from machines to set of all states states defined in that machine.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.RegisteredActorEvents">
            <summary>
            Set of (machine + "." + state => registered events). So all events that can
            get us into each state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.ActorEventInfo">
            <summary>
            Information about events sent and received.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.IsMachineDeclared(System.String)">
            <summary>
            Checks if the machine type has already been registered for coverage.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.DeclareMachineState(System.String,System.String)">
            <summary>
            Declares a machine state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.DeclareMachineStateEventPair(System.String,System.String,System.String)">
            <summary>
            Declares a registered machine state-event pair.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.AddMachineState(System.String,System.String)">
            <summary>
            Adds a new machine state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.AddActorEvent(System.String,System.String)">
            <summary>
            Adds a new actor state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo.Merge(Microsoft.Coyote.Coverage.CoverageInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.ActorCoverageReporter">
            <summary>
            Reports actor coverage statistics and information.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.ActorCoverageReporter.CoverageInfo">
            <summary>
            Data structure containing information regarding testing coverage.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.ActorCoverageReporter.BuiltInEvents">
            <summary>
            Set of built in events which we hide in the coverage report.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageReporter.#ctor(Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Coverage.ActorCoverageReporter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageReporter.WriteActivityCoverageText(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageReporter.IsActivityCoverageAvailable">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorCoverageReporter.RemoveCoveredEvents(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}})">
            <summary>
            Remove all events from expectedEvent that are found in the graph.
            </summary>
            <param name="expectedEvents">The list of all expected events organized by unique state Id.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.ActorEventCoverage">
            <summary>
            This class maintains information about events received and sent from each state of each actor.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.ActorEventCoverage.EventsReceived">
            <summary>
            Map from states to the list of events received by that state.  The state id is fully qualified by
            the actor id it belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.ActorEventCoverage.EventsSent">
            <summary>
            Map from states to the list of events sent by that state.  The state id is fully qualified by
            the actor id it belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorEventCoverage.GetEventsReceived(System.String)">
            <summary>
            Get list of events received by the given fully qualified state.
            </summary>
            <param name="stateId">The actor qualified state name.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorEventCoverage.GetEventsSent(System.String)">
            <summary>
            Get list of events sent by the given state.
            </summary>
            <param name="stateId">The actor qualified state name.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder">
            <summary>
            Implements the <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog"/> and builds a directed graph
            from the recorded events and state transitions.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.CurrentGraph">
            <summary>
            The currently manipulated coverage graph.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.Dequeued">
            <summary>
            Current dequeued event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.HaltedStates">
            <summary>
            Halted state for given actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.MergeEventLinks">
            <summary>
            Merge events from node A to node B instead of making them separate links.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.CollapseInstances">
            <summary>
            Set this boolean to true to get a collapsed graph showing only machine types, states and events.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.Logger">
            <summary>
            Get or set the underlying logging object.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.Graph">
            <summary>
            Get the <see cref="T:Microsoft.Coyote.Coverage.CoverageGraph"/> object built by this logger.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCreateActor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnSendEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String,Microsoft.Coyote.Actors.Event,System.Guid,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnRaiseEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnHandleRaisedEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnEnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnDequeueEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnReceiveEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnStateTransition(Microsoft.Coyote.Actors.ActorId,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnExecuteAction(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnGotoState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnPushState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnPopState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnHalt(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnDefaultEventHandler(Microsoft.Coyote.Actors.ActorId,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnEventHandlerTerminated(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.DequeueStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnPopStateUnhandledEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnExceptionThrown(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnExceptionHandled(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCreateTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnStopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCreateMonitor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorExecuteAction(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorProcessEvent(System.String,System.String,System.String,System.String,System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorRaiseEvent(System.String,System.String,Microsoft.Coyote.Specifications.Monitor.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorStateTransition(System.String,System.String,System.Boolean,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnMonitorError(System.String,System.String,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnRandom(System.Boolean,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnRandom(System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnAssertionFailure(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Coverage.ActorRuntimeLogGraphBuilder.SnapshotGraph(System.Boolean)">
            <summary>
            Return current graph and reset for next iteration.
            </summary>
            <param name="reset">Set to true will reset the graph for the next iteration.</param>
            <returns>The graph.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Actors.DequeueStatus">
            <summary>
            The status returned as the result of an <see cref="T:Microsoft.Coyote.Actors.Actor"/> dequeue operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.DequeueStatus.Success">
            <summary>
            An event was successfully dequeued.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.DequeueStatus.Raised">
            <summary>
            The raised event was dequeued.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.DequeueStatus.Default">
            <summary>
            The default event was dequeued.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.DequeueStatus.NoDequeue">
            <summary>
            No dequeue has happened.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.DequeueStatus.Unavailable">
            <summary>
            No event available to dequeue.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EnqueueStatus">
            <summary>
            The status returned as the result of an enqueue operation.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.EventHandlerRunning">
            <summary>
            The event handler is already running.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.EventHandlerNotRunning">
            <summary>
            The event handler is not running.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.Received">
            <summary>
            The event was consumed at a receive statement.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.NextEventUnavailable">
            <summary>
            There is no next event available to dequeue and handle.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EnqueueStatus.Dropped">
            <summary>
            The event was dropped.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventQueue">
            <summary>
            Implements a queue of events.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.Owner">
            <summary>
            The actor that owns this queue.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.Queue">
            <summary>
            The backing queue.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.RaisedEvent">
            <summary>
            The raised event and its metadata, or null if no event has been raised.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.EventWaitTypes">
            <summary>
            Map from the types of events that the owner of the queue is waiting to receive
            to an optional predicate. If an event of one of these types is enqueued, then
            if there is no predicate, or if there is a predicate and evaluates to true, then
            the event is received, else the event is deferred.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.ReceiveCompletionSource">
            <summary>
            Task completion source that contains the event obtained using an explicit receive.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventQueue.IsClosed">
            <summary>
            Checks if the queue is accepting new events.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventQueue.Size">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventQueue.IsEventRaised">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventQueue.IsEventHandlerRunning">
            <summary>
            True if the event handler is currently running, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.#ctor(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventQueue"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Enqueue(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.RaiseEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.ReceiveEventAsync(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.ReceiveEventAsync(System.Tuple{System.Type,System.Func{Microsoft.Coyote.Actors.Event,System.Boolean}}[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.ReceiveEventAsync(System.Collections.Generic.Dictionary{System.Type,System.Func{Microsoft.Coyote.Actors.Event,System.Boolean}})">
            <summary>
            Waits for an event to be enqueued based on the conditions defined in the event wait types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.IsEventIgnored(Microsoft.Coyote.Actors.Event)">
            <summary>
            Checks if the specified event is currently ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.IsEventDeferred(Microsoft.Coyote.Actors.Event)">
            <summary>
            Checks if the specified event is currently deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.IsDefaultHandlerAvailable">
            <summary>
            Checks if a default handler is currently available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnEnqueueEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnRaiseEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies the actor that it is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnReceiveEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnReceiveEventWithoutWaiting(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive was already in the
            event queue when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnIgnoreEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnDeferEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.OnDropEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been dropped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Close">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Dispose(System.Boolean)">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventQueue.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.IEventQueue">
            <summary>
            Interface of a queue of events.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.IEventQueue.Size">
            <summary>
            The size of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.IEventQueue.IsEventRaised">
            <summary>
            Checks if an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.Enqueue(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Enqueues the specified event and its optional metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.Dequeue">
            <summary>
            Dequeues the next event, if there is one available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.RaiseEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Enqueues the specified raised event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.ReceiveEventAsync(System.Type,System.Func{Microsoft.Coyote.Actors.Event,System.Boolean})">
            <summary>
            Waits to receive an event of the specified type that satisfies an optional predicate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.ReceiveEventAsync(System.Type[])">
            <summary>
            Waits to receive an event of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.ReceiveEventAsync(System.Tuple{System.Type,System.Func{Microsoft.Coyote.Actors.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an event of the specified types that satisfy the specified predicates.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.GetHashedState">
            <summary>
            Returns the hashed state of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IEventQueue.Close">
            <summary>
            Closes the queue, which stops any further event enqueues.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Mocks.MockEventQueue">
            <summary>
            Implements a queue of events that can be used during systematic testing.
            </summary>
            <remarks>
            This is not a thread-safe queue.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Owner">
            <summary>
            The actor that owns this queue.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Queue">
            <summary>
            The backing queue that contains events with their metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.RaisedEvent">
            <summary>
            The raised event and its metadata, or null if no event has been raised.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.EventWaitTypes">
            <summary>
            Map from the types of events that the owner of the queue is waiting to receive
            to an optional predicate. If an event of one of these types is enqueued, then
            if there is no predicate, or if there is a predicate and evaluates to true, then
            the event is received, else the event is deferred.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveCompletionSource">
            <summary>
            Task completion source that contains the event obtained using an explicit receive.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsClosed">
            <summary>
            Checks if the queue is accepting new events.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Size">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsEventRaised">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsEventHandlerRunning">
            <summary>
            True if the event handler is currently running, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.#ctor(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Mocks.MockEventQueue"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Enqueue(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.TryDequeueEvent(System.Boolean)">
            <summary>
            Dequeues the next event and its metadata, if there is one available, else returns null.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.RaiseEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Type,System.Func{Microsoft.Coyote.Actors.Event,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Tuple{System.Type,System.Func{Microsoft.Coyote.Actors.Event,System.Boolean}}[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Collections.Generic.Dictionary{System.Type,System.Func{Microsoft.Coyote.Actors.Event,System.Boolean}})">
            <summary>
            Waits for an event to be enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsEventIgnored(Microsoft.Coyote.Actors.Event)">
            <summary>
            Checks if the specified event is currently ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsEventDeferred(Microsoft.Coyote.Actors.Event)">
            <summary>
            Checks if the specified event is currently deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.IsDefaultHandlerAvailable">
            <summary>
            Checks if a default handler is currently available.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnEnqueueEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnRaiseEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Notifies the actor that it is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnReceiveEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnReceiveEventWithoutWaiting(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event it was waiting to receive was already in the
            event queue when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnReceiveInvoked">
            <summary>
            Notifies the actor that <see cref="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.ReceiveEventAsync(System.Type[])"/> or one of its overloaded methods was invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnIgnoreEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnDeferEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.OnDropEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Notifies the actor that an event has been dropped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.GetHashedState">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Close">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Dispose(System.Boolean)">
            <summary>
            Disposes the queue resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Mocks.MockEventQueue.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.AwaitableEventGroup`1">
            <summary>
            An object representing an awaitable long running context involving one or more actors.
            An `AwaitableEventGroup` can be provided as an optional argument in CreateActor and SendEvent.
            If a null `AwaitableEventGroup` is passed then the `EventGroup` is inherited from the sender
            or target actors (based on which ever one has a <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup"/>).
            In this way an `AwaitableEventGroup` is automatically communicated to all actors involved in
            completing some larger operation. Each actor involved can find the `AwaitableEventGroup` using
            their <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup"/> property.
            </summary>
            <typeparam name="T">The result returned when the operation is completed.</typeparam>
        </member>
        <member name="F:Microsoft.Coyote.Actors.AwaitableEventGroup`1.Tcs">
            <summary>
            A task completion source that can be awaited to get the final result object.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.AwaitableEventGroup`1.Task">
            <summary>
            Gets the task created by this `AwaitableEventGroup`.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.AwaitableEventGroup`1.IsCompleted">
            <summary>
            Indicates the `AwaitableEventGroup` has been completed.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.AwaitableEventGroup`1.IsCanceled">
            <summary>
            Value that indicates whether the task completed execution due to being canceled.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.AwaitableEventGroup`1.IsFaulted">
            <summary>
            Value that indicates whether the task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.AwaitableEventGroup`1"/> class.
            </summary>
            <param name="id">The id for this `AwaitableEventGroup` (defaults to Guid.Empty).</param>
            <param name="name">An optional friendly name for this `EventGroup`.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.SetResult(`0)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The completed result object.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.TrySetResult(`0)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
            <param name="result">The completed result object.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.SetCancelled">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.TrySetCanceled">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
            <returns>True if the `AwaitableEventGroup` was successful; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.SetException(System.Exception)">
            <summary>
            Transitions the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds it to the specified exception.
            </summary>
            <param name="exception">The exception to bind to this task.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying task into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state
            and binds it to the specified exception.
            </summary>
            <param name="exception">The exception to bind to this task.</param>
            <returns>True if the `AwaitableEventGroup` was successful; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.AwaitableEventGroup`1.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.DefaultEvent">
            <summary>
            A default event that is generated by the runtime when
            no user-defined event is dequeued or received.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.DefaultEvent.Instance">
            <summary>
            Gets a cached <see cref="T:Microsoft.Coyote.Actors.DefaultEvent"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.DefaultEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.DefaultEvent"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Event">
            <summary>
            Abstract class representing an event that can be send to
            an <see cref="T:Microsoft.Coyote.Actors.Actor"/> or <see cref="T:Microsoft.Coyote.Actors.StateMachine"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Event.GetParams">
            <summary>
            Returns a dictionary of parameters specific to this event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventGroup">
            <summary>
            An object representing a long running context involving one or more actors.
            An `EventGroup` can be provided as an optional argument in CreateActor and SendEvent.
            If a null `EventGroup` is passed then the `EventGroup` is inherited from the sender
            or target actors (based on which ever one has a <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup"/>).
            In this way an `EventGroup` is automatically communicated to all actors involved in
            completing some larger operation. Each actor involved can find the `EventGroup` using
            their <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.EventGroup.Null">
            <summary>
            A special null event group that can be used to stop the <see cref="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup"/> from
            being passed along when <see cref="M:Microsoft.Coyote.Actors.Actor.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)"/>
            or <see cref="M:Microsoft.Coyote.Actors.Actor.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)"/> is invoked.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventGroup.Id">
            <summary>
            The unique id of this `EventGroup`, initialized with Guid.Empty.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventGroup.Name">
            <summary>
            An optional friendly name for this `EventGroup`.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventGroup.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventGroup"/> class.
            </summary>
            <param name="id">The id for this `EventGroup` (defaults to Guid.Empty).</param>
            <param name="name">An optional friendly name for this `EventGroup`.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventInfo">
            <summary>
            Contains an <see cref="T:Microsoft.Coyote.Actors.Event"/>, and its associated metadata.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.EventName">
            <summary>
            Event name.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.OriginInfo">
            <summary>
            Information regarding the event origin.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.MustHandle">
            <summary>
            True if this event must always be handled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.Assert">
            <summary>
            Asserts that there must not be more than N instances of the
            event type in the inbox queue of the receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventInfo.HashedState">
            <summary>
            User-defined hash of the event. The default value is 0. Override to
            improve the accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventInfo.#ctor(Microsoft.Coyote.Actors.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventInfo.#ctor(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventOriginInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventInfo"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventOriginInfo">
            <summary>
            Contains the origin information of an <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventOriginInfo.SenderActorId">
            <summary>
            The sender actor id.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventOriginInfo.SenderActorName">
            <summary>
            The sender actor name.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.EventOriginInfo.SenderStateName">
            <summary>
            The sender state name, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.EventOriginInfo.#ctor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.EventOriginInfo"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.GotoStateEvent">
            <summary>
            The goto state event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.GotoStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.GotoStateEvent.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.GotoStateEvent"/> class.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.HaltEvent">
            <summary>
            The halt event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.HaltEvent.Instance">
            <summary>
            Gets a <see cref="T:Microsoft.Coyote.Actors.HaltEvent"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.HaltEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.HaltEvent"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.PopStateEvent">
            <summary>
            The pop state event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.PopStateEvent.Instance">
            <summary>
            Gets a <see cref="T:Microsoft.Coyote.Actors.PopStateEvent"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.PopStateEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.PopStateEvent"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.PushStateEvent">
            <summary>
            The push state event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.PushStateEvent.State">
            <summary>
            Type of the state to transition to.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.PushStateEvent.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.PushStateEvent"/> class.
            </summary>
            <param name="s">Type of the state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.QuiescentEvent">
            <summary>
            Signals that an actor has reached quiescence.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.QuiescentEvent.ActorId">
            <summary>
            The id of the actor that has reached quiescence.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.QuiescentEvent.#ctor(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.QuiescentEvent"/> class.
            </summary>
            <param name="id">The id of the actor that has reached quiescence.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.WildCardEvent">
            <summary>
            The wild card event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.WildCardEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.WildCardEvent"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActionExceptionFilterException">
            <summary>
            Exception that is thrown by the runtime upon an <see cref="T:Microsoft.Coyote.Actors.Actor"/> action failure.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActionExceptionFilterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActionExceptionFilterException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActionExceptionFilterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActionExceptionFilterException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.OnExceptionOutcome">
            <summary>
            The outcome when an <see cref="T:Microsoft.Coyote.Actors.Actor"/> throws an exception.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.OnExceptionOutcome.ThrowException">
            <summary>
            The actor throws the exception causing the runtime to fail.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.OnExceptionOutcome.HandledException">
            <summary>
            The actor handles the exception and resumes execution.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.OnExceptionOutcome.Halt">
            <summary>
            The actor handles the exception and halts.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.UnhandledEventException">
            <summary>
            Signals that an <see cref="T:Microsoft.Coyote.Actors.Actor"/> received an unhandled event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.UnhandledEventException.UnhandledEvent">
            <summary>
             The unhandled event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.UnhandledEventException.CurrentStateName">
            <summary>
            The name of the current state, if the actor that threw the exception
            is a <see cref="T:Microsoft.Coyote.Actors.StateMachine"/> and a state exists, else null.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.UnhandledEventException.#ctor(Microsoft.Coyote.Actors.Event,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.UnhandledEventException"/> class.
            </summary>
            <param name="unhandledEvent">The event that was unhandled.</param>
            <param name="currentStateName">The name of the current state, if the actor that threw the exception
            is a state machine and a state exists, else null.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActionEventHandlerDeclaration">
            <summary>
            Defines an action event handler declaration.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActionEventHandlerDeclaration.Name">
            <summary>
            Name of the action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActionEventHandlerDeclaration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActionEventHandlerDeclaration"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.CachedDelegate">
            <summary>
            An actor delegate that has been cached to optimize performance of invocations.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.DeferEventHandlerDeclaration">
            <summary>
            Defines a defer event handler declaration.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.EventHandlerDeclaration">
            <summary>
            An abstract event handler declaration.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.IgnoreEventHandlerDeclaration">
            <summary>
            Defines an ignore event handler declaration.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.OnActorHaltedHandler">
            <summary>
            Handles the <see cref="E:Microsoft.Coyote.Actors.IActorRuntime.OnActorHalted"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.OnEventDroppedHandler">
            <summary>
            Handles the <see cref="E:Microsoft.Coyote.Actors.IActorRuntime.OnEventDropped"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorLogManager">
            <summary>
            Manages all registered <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogCreateActor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified actor has been created.
            </summary>
            <param name="id">The id of the actor that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine has been created.
            </summary>
            <param name="id">The id of the state machine that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogExecuteAction(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Logs that the specified actor executes an action.
            </summary>
            <param name="id">The id of the actor executing the action.</param>
            <param name="handlingStateName">The state that declared this action (can be different from currentStateName in the case of PushStates.</param>
            <param name="currentStateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogSendEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String,Microsoft.Coyote.Actors.Event,System.Guid,System.Boolean)">
            <summary>
            Logs that the specified event is sent to a target actor.
            </summary>
            <param name="targetActorId">The id of the target actor.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderState">The state name, if the sender is a state machine, else null.</param>
            <param name="e">The event being sent.</param>
            <param name="eventGroupId">The id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target actor halted.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogRaiseEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified actor raises an event.
            </summary>
            <param name="id">The id of the actor raising the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogHandleRaisedEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified state machine handled a raised event.
            </summary>
            <param name="id">The id of the actor handling the event.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="e">The event being handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogEnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified event is about to be enqueued to an actor.
            </summary>
            <param name="id">The id of the actor that the event is being enqueued to.</param>
            <param name="e">The event being enqueued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogDequeueEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified event is dequeued by an actor.
            </summary>
            <param name="id">The id of the actor that the event is being dequeued by.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogReceiveEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event,System.Boolean)">
            <summary>
            Logs that the specified event is received by an actor.
            </summary>
            <param name="id">The id of the actor that received the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being received.</param>
            <param name="wasBlocked">The state machine was waiting for one or more specific events,
            and <paramref name="e"/> was one of them.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type)">
            <summary>
            Logs that the specified actor waits to receive an event of a specified type.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type[])">
            <summary>
            Logs that the specified actor waits to receive an event of one of the specified types.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogStateTransition(Microsoft.Coyote.Actors.ActorId,System.String,System.Boolean)">
            <summary>
            Logs that the specified state machine enters or exits a state.
            </summary>
            <param name="id">The id of the actor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogGotoState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine performs a goto state transition.
            </summary>
            <param name="id">The id of the actor.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogPushState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine performs a push state transition.
            </summary>
            <param name="id">The id of the actor being pushed to the state.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogPopState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Logs that the specified state machine performs a pop state transition.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="currStateName">The name of the current state.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogHalt(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Logs that the specified actor has halted.
            </summary>
            <param name="id">The id of the actor that has been halted.</param>
            <param name="inboxSize">Approximate size of the inbox.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogDefaultEventHandler(Microsoft.Coyote.Actors.ActorId,System.String)">
            <summary>
            Logs that the specified actor is idle (there is nothing to dequeue) and the default
            event handler is about to be executed.
            </summary>
            <param name="id">The id of the actor that the state will execute in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogEventHandlerTerminated(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.DequeueStatus)">
            <summary>
            Logs that the event handler of the specified actor terminated.
            </summary>
            <param name="id">The id of the actor that the state will execute in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="dequeueStatus">The status returned as the result of the last dequeue operation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogPopStateUnhandledEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified event cannot be handled in the current state, its exit
            handler is executed and then the state is popped and any previous "current state"
            is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogExceptionThrown(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Logs that the specified actor throws an exception without handling it.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogExceptionHandled(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Logs that the specified actor has handled a thrown exception.
            </summary>
            <param name="id">The id of the actor that handled the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogCreateTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Logs that the specified actor timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorLogManager.LogStopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Logs that the specified actor timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter">
            <summary>
            This class implements <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog"/> and generates output in a a human readable text format.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnCreateActor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnCreateTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnDefaultEventHandler(Microsoft.Coyote.Actors.ActorId,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnEventHandlerTerminated(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.DequeueStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnDequeueEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnEnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnExceptionHandled(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnExceptionThrown(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnExecuteAction(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnGotoState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnHalt(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnPopState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnPopStateUnhandledEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnPushState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnRaiseEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnHandleRaisedEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnReceiveEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnSendEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String,Microsoft.Coyote.Actors.Event,System.Guid,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnStateTransition(Microsoft.Coyote.Actors.ActorId,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnStopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogTextFormatter.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter">
            <summary>
            This class implements <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog"/> and generates log output in an XML format.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.#ctor(System.Xml.XmlWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnCreateActor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnCreateTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnDefaultEventHandler(Microsoft.Coyote.Actors.ActorId,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnEventHandlerTerminated(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.DequeueStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnDequeueEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnEnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnExceptionHandled(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnExceptionThrown(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnExecuteAction(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnGotoState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnHalt(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnPopState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnPopStateUnhandledEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnPushState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnRaiseEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnHandleRaisedEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnReceiveEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnSendEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String,Microsoft.Coyote.Actors.Event,System.Guid,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnStateTransition(Microsoft.Coyote.Actors.ActorId,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnStopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorRuntimeLogXmlFormatter.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type[])">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.IActorRuntimeLog">
            <summary>
            Interface that allows an external module to track what is happening in the <see cref="T:Microsoft.Coyote.Actors.IActorRuntime"/>.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnCreateActor(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified actor has been created.
            </summary>
            <param name="id">The id of the actor that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnCreateStateMachine(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has been created.
            </summary>
            <param name="id">The id of the state machine that has been created.</param>
            <param name="creatorName">The name of the creator, or null.</param>
            <param name="creatorType">The type of the creator, or null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnExecuteAction(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Invoked when the specified actor executes an action.
            </summary>
            <param name="id">The id of the actor executing the action.</param>
            <param name="handlingStateName">The state that declared this action (can be different from currentStateName in the case of pushed states.</param>
            <param name="currentStateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnSendEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.String,Microsoft.Coyote.Actors.Event,System.Guid,System.Boolean)">
            <summary>
            Invoked when the specified event is sent to a target actor.
            </summary>
            <param name="targetActorId">The id of the target actor.</param>
            <param name="senderName">The name of the sender, if any.</param>
            <param name="senderType">The type of the sender, if any.</param>
            <param name="senderStateName">The state name, if the sender is a state machine, else null.</param>
            <param name="e">The event being sent.</param>
            <param name="eventGroupId">The id used to identify the send operation.</param>
            <param name="isTargetHalted">Is the target actor halted.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnRaiseEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Invoked when the specified state machine raises an event.
            </summary>
            <param name="id">The id of the actor raising the event.</param>
            <param name="stateName">The name of the current state.</param>
            <param name="e">The event being raised.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnHandleRaisedEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Invoked when the specified actor handled a raised event.
            </summary>
            <param name="id">The id of the actor handling the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnEnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event)">
            <summary>
            Invoked when the specified event is about to be enqueued to an actor.
            </summary>
            <param name="id">The id of the actor that the event is being enqueued to.</param>
            <param name="e">The event being enqueued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnDequeueEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Invoked when the specified event is dequeued by an actor.
            </summary>
            <param name="id">The id of the actor that the event is being dequeued by.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event being dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnReceiveEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event,System.Boolean)">
            <summary>
            Invoked when the specified event is received by an actor.
            </summary>
            <param name="id">The id of the actor that received the event.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The the event being received.</param>
            <param name="wasBlocked">The actor was waiting for one or more specific events,
            and <paramref name="e"/> was one of them.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type)">
            <summary>
            Invoked when the specified actor waits to receive an event of a specified type.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventType">The type of the event being waited for.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnWaitEvent(Microsoft.Coyote.Actors.ActorId,System.String,System.Type[])">
            <summary>
            Invoked when the specified actor waits to receive an event of one of the specified types.
            </summary>
            <param name="id">The id of the actor that is entering the wait state.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="eventTypes">The types of the events being waited for, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnStateTransition(Microsoft.Coyote.Actors.ActorId,System.String,System.Boolean)">
            <summary>
            Invoked when the specified state machine enters or exits a state.
            </summary>
            <param name="id">The id of the actor entering or exiting the state.</param>
            <param name="stateName">The name of the state being entered or exited.</param>
            <param name="isEntry">If true, this is called for a state entry; otherwise, exit.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnGotoState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine performs a goto transition to the specified state.
            </summary>
            <param name="id">The id of the actor.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnPushState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine is being pushed to a state.
            </summary>
            <param name="id">The id of the actor being pushed to the state.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="newStateName">The target state of the transition.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnPopState(Microsoft.Coyote.Actors.ActorId,System.String,System.String)">
            <summary>
            Invoked when the specified state machine has popped its current state.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="currentStateName">The name of the current state.</param>
            <param name="restoredStateName">The name of the state being re-entered, if any.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnDefaultEventHandler(Microsoft.Coyote.Actors.ActorId,System.String)">
            <summary>
            Invoked when the specified actor is idle (there is nothing to dequeue) and the default
            event handler is about to be executed.
            </summary>
            <param name="id">The id of the actor that the state will execute in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnEventHandlerTerminated(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.DequeueStatus)">
            <summary>
            Invoked when the event handler of the specified actor terminated.
            </summary>
            <param name="id">The id of the actor with the handler that terminated.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="dequeueStatus">The status returned as the result of the last dequeue operation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnHalt(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Invoked when the specified actor has been halted.
            </summary>
            <param name="id">The id of the actor that has been halted.</param>
            <param name="inboxSize">Approximate size of the inbox.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnPopStateUnhandledEvent(Microsoft.Coyote.Actors.ActorId,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Invoked when the specified event cannot be handled in the current state, its exit
            handler is executed and then the state is popped and any previous "current state"
            is reentered. This handler is called when that pop has been done.
            </summary>
            <param name="id">The id of the actor that the pop executed in.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="e">The event that cannot be handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnExceptionThrown(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified actor throws an exception without handling it.
            </summary>
            <param name="id">The id of the actor that threw the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnExceptionHandled(Microsoft.Coyote.Actors.ActorId,System.String,System.String,System.Exception)">
            <summary>
            Invoked when the specified actor has handled a thrown exception.
            </summary>
            <param name="id">The id of the actor that handled the exception.</param>
            <param name="stateName">The state name, if the actor is a state machine and a state exists, else null.</param>
            <param name="actionName">The name of the action being executed.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnCreateTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been created.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntimeLog.OnStopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Invoked when the specified actor timer has been stopped.
            </summary>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Actor">
            <summary>
            Type that implements an actor. Inherit from this class to declare a custom actor.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/overview">Programming
            model: asynchronous actors</see> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.ActionCache">
            <summary>
            Cache of actor types to a map of event types to action declarations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.ActionCacheLocks">
            <summary>
            A set of lockable objects used to protect static initialization of the ActionCache while
            also enabling multithreaded initialization of different Actor types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.SingleEventTypeArray">
            <summary>
            A cached array that contains a single event type.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.Context">
            <summary>
            The actor execution context.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.Id">
            <summary>
            Unique id that identifies this actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.Operation">
            <summary>
            Unique operation that is used to control the actor execution during systematic testing.
            </summary>
            <remarks>
            This is null in production.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.Inbox">
            <summary>
            The inbox of the actor. Incoming events are enqueued here.
            Events are dequeued to be processed.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.ActionMap">
            <summary>
            Map from event types to cached action delegates.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.Timers">
            <summary>
            Map that contains the active timers.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.CurrentStatus">
            <summary>
            The current execution status of the actor.
            </summary>
            <remarks>
            It is marked volatile so that the runtime can read it concurrently.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.ExecutionStatus">
            <summary>
            The current execution status of the actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.CurrentStateName">
            <summary>
            Gets the name of the current state, if there is one.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.IsEventHandlerRunning">
            <summary>
            True if the event handler of the actor is running, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.IsHalted">
            <summary>
            Checks if the actor is halted.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.EventGroup">
            <summary>
            The <see cref="P:Microsoft.Coyote.Actors.Actor.EventGroup"/> currently associated with the actor, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.CurrentEventGroup">
            <summary>
            An optional <see cref="P:Microsoft.Coyote.Actors.Actor.EventGroup"/> associated with the current event being handled.
            </summary>
            <remarks>
            This is an optional argument provided to <see cref="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)"/>
            or <see cref="M:Microsoft.Coyote.Actors.IActorRuntime.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.Logger">
            <summary>
            The logger installed to the runtime.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/logging">Logging</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Actor.HashedState">
            <summary>
            User-defined hashed state of the actor. Override to improve the
            accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Actor"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Configure(Microsoft.Coyote.Actors.ActorExecutionContext,Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.ActorOperation,Microsoft.Coyote.Actors.IEventQueue,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Configures the actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Initializes the actor with the specified optional event.
            </summary>
            <param name="initialEvent">Optional event used for initialization.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.CreateActor(System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified type and with the specified optional
            <see cref="T:Microsoft.Coyote.Actors.Event"/>. This <see cref="T:Microsoft.Coyote.Actors.Event"/> can only be used to access
            its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional initialization event.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The unique actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.CreateActor(System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified type and name, and with the specified
            optional <see cref="T:Microsoft.Coyote.Actors.Event"/>. This <see cref="T:Microsoft.Coyote.Actors.Event"/> can only be used to
            access its payload, and cannot be handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional initialization event.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The unique actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Actors.Event"/>. This event
            can only be used to access its payload, and cannot be handled.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional initialization event.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Actors.Event"/> to a target.
            </summary>
            <param name="id">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with this Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Type,System.Func{Microsoft.Coyote.Actors.Event,System.Boolean})">
            <summary>
            Waits to receive an <see cref="T:Microsoft.Coyote.Actors.Event"/> of the specified type
            that satisfies an optional predicate.
            </summary>
            <param name="eventType">The event type.</param>
            <param name="predicate">The optional predicate.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Type[])">
            <summary>
            Waits to receive an <see cref="T:Microsoft.Coyote.Actors.Event"/> of the specified types.
            </summary>
            <param name="eventTypes">The event types to wait for.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Tuple{System.Type,System.Func{Microsoft.Coyote.Actors.Event,System.Boolean}}[])">
            <summary>
            Waits to receive an <see cref="T:Microsoft.Coyote.Actors.Event"/> of the specified types
            that satisfy the specified predicates.
            </summary>
            <param name="events">Event types and predicates.</param>
            <returns>The received event.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.StartTimer(System.TimeSpan,Microsoft.Coyote.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Starts a timer that sends a <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent"/> to this actor after the
            specified due time. The timer accepts an optional payload to be used during timeout.
            The timer is automatically disposed after it timeouts. To manually stop and dispose
            the timer, invoke the <see cref="M:Microsoft.Coyote.Actors.Actor.StopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)"/> method.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/timers">Using timers in actors</see> for more information.
            </remarks>
            <param name="startDelay">The amount of time to wait before sending the timeout event.</param>
            <param name="customEvent">Optional custom event to raise instead of the default TimerElapsedEvent.</param>
            <returns>Handle that contains information about the timer.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.StartPeriodicTimer(System.TimeSpan,System.TimeSpan,Microsoft.Coyote.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Starts a periodic timer that sends a <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent"/> to this actor after
            the specified due time, and then repeats after each specified period. The timer accepts
            an optional payload to be used during timeout. The timer can be stopped by invoking the
            <see cref="M:Microsoft.Coyote.Actors.Actor.StopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)"/> method.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/timers">Using timers in actors</see> for more information.
            </remarks>
            <param name="startDelay">The amount of time to wait before sending the first timeout event.</param>
            <param name="period">The time interval between timeout events.</param>
            <param name="customEvent">Optional custom event to raise instead of the default TimerElapsedEvent.</param>
            <returns>Handle that contains information about the timer.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.StopTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Stops and disposes the specified timer.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/timers">Using timers in actors</see> for more information.
            </remarks>
            <param name="info">Handle that contains information about the timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RandomBoolean">
            <summary>
            Returns a nondeterministic boolean choice, that can be controlled during testing.
            </summary>
            <returns>The controlled nondeterministic choice.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RandomInteger(System.Int32)">
            <summary>
            Returns a nondeterministic integer, that can be controlled during testing. The value
            is used to generate an integer in the range [0..maxValue).
            </summary>
            <param name="maxValue">The max value.</param>
            <returns>The controlled nondeterministic integer.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Monitor``1(Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.Event"/>.
            </summary>
            <typeparam name="T">Type of the monitor.</typeparam>
            <param name="e">The <see cref="T:Microsoft.Coyote.Specifications.Monitor.Event"/> to send to the monitor.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Monitor(System.Type,Microsoft.Coyote.Specifications.Monitor.Event)">
            <summary>
            Invokes the specified monitor with the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor.Event"/>.
            </summary>
            <param name="type">Type of the monitor.</param>
            <param name="e">The <see cref="T:Microsoft.Coyote.Specifications.Monitor.Event"/> to send to the monitor.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean,System.String,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks if the assertion holds, and if not, throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RaiseHaltEvent">
            <summary>
            Raises a <see cref='T:Microsoft.Coyote.Actors.HaltEvent'/> to halt the actor at the end of the current action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnInitializeAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor is initialized with an optional event.
            </summary>
            <param name="initialEvent">Optional event used for initialization.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventDequeuedAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor successfully dequeues an event from its inbox.
            This method is not called when the dequeue happens via a receive statement.
            </summary>
            <param name="e">The event that was dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventIgnored(Microsoft.Coyote.Actors.Event)">
            <summary>
            Callback that is invoked when the actor ignores an event and removes it from its inbox.
            </summary>
            <param name="e">The event that was ignored.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventDeferred(Microsoft.Coyote.Actors.Event)">
            <summary>
            Callback that is invoked when the actor defers dequeing an event from its inbox.
            </summary>
            <param name="e">The event that was deferred.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventHandledAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor finishes handling a dequeued event, unless
            the handler of the dequeued event caused the actor to halt (either normally or due to an exception).
            The actor will either become idle or dequeue the next event from its inbox.
            </summary>
            <param name="e">The event that was handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventUnhandledAsync(Microsoft.Coyote.Actors.Event,System.String)">
            <summary>
            Asynchronous callback that is invoked when the actor receives an event that it is not
            prepared to handle. The callback is invoked first, after which the actor will necessarily
            throw an <see cref="T:Microsoft.Coyote.Actors.UnhandledEventException"/>.
            </summary>
            <param name="e">The event that was unhandled.</param>
            <param name="state">The state when the event was dequeued.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnExceptionHandledAsync(System.Exception,Microsoft.Coyote.Actors.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor handles an exception.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="e">The event being handled when the exception was thrown.</param>
            <returns>The action that the runtime should take.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnHaltAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor halts.
            </summary>
            <param name="e">The event being handled when the actor halted.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Enqueue(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Enqueues the specified event and its metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RunEventHandlerAsync">
            <summary>
            Runs the event handler. The handler terminates if there is no next
            event to process or if the actor has halted.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.HandleEventAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Handles the specified <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.InvokeActionAsync(Microsoft.Coyote.Actors.CachedDelegate,Microsoft.Coyote.Actors.Event)">
            <summary>
            Invokes the specified action delegate.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.InvokeUserCallbackAsync(System.String,Microsoft.Coyote.Actors.Event,System.String)">
            <summary>
            Invokes the specified event handler user callback.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.InvokeOnFailureExceptionFilter(Microsoft.Coyote.Actors.CachedDelegate,System.Exception)">
            <summary>
            An exception filter that calls <see cref="E:Microsoft.Coyote.Runtime.CoyoteRuntime.OnFailure"/>,
            which can choose to fast-fail the app to get a full dump.
            </summary>
            <param name="action">The action being executed when the failure occurred.</param>
            <param name="ex">The exception being tested.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.TryHandleActionInvocationExceptionAsync(System.Exception,System.String)">
            <summary>
            Tries to handle an exception thrown during an action invocation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.IsEventIgnored(Microsoft.Coyote.Actors.Event)">
            <summary>
            Checks if the specified event is ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.IsEventDeferred(Microsoft.Coyote.Actors.Event)">
            <summary>
            Checks if the specified event is deferred.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.IsDefaultHandlerInstalled">
            <summary>
            Checks if there is a default handler installed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.GetHashedState(Microsoft.Coyote.Runtime.SchedulingPolicy)">
            <summary>
            Returns the hashed state of this actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.RegisterTimer(System.TimeSpan,System.TimeSpan,Microsoft.Coyote.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Registers a new timer using the specified configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.UnregisterTimer(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Unregisters the specified timer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.SetupEventHandlers">
            <summary>
            Extracts user declarations and sets up the event handlers.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.GetActionWithName(System.String)">
            <summary>
            Returns the action with the specified name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReportActivityCoverage(Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo)">
            <summary>
            Reports the activity coverage of this actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.AssertActionValidity(System.Reflection.MethodInfo)">
            <summary>
            Checks the validity of the specified action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.FormatFairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns the formatted strint to be used with a fair nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEnqueueEvent(Microsoft.Coyote.Actors.Event)">
            <summary>
            Invoked when an event has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnRaiseEvent(Microsoft.Coyote.Actors.Event)">
            <summary>
            Invoked when an event has been raised.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnWaitTask(System.Threading.Tasks.Task)">
            <summary>
            Invoked when the actor is waiting for the specified task to complete.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnWaitEvent(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Invoked when the actor is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnReceiveEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Invoked when an event that the actor is waiting to receive has been enqueued.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnReceiveEventWithoutWaiting(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Invoked when an event that the actor is waiting to receive has already been in the
            event queue when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnReceiveInvoked">
            <summary>
            Invoked when <see cref="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Type[])"/> or one of its overloaded methods was called.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnIgnoreEvent(Microsoft.Coyote.Actors.Event)">
            <summary>
            Callback that is invoked when the actor ignores an event and removes it from its inbox.
            </summary>
            <param name="e">The event that was ignored.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnDeferEvent(Microsoft.Coyote.Actors.Event)">
            <summary>
            Callback that is invoked when the actor defers dequeing an event from its inbox.
            </summary>
            <param name="e">The event that was deferred.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnDropEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventInfo)">
            <summary>
            Invoked when an event has been dropped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnExceptionHandler(System.Exception,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Callback that is invoked when the actor throws an exception.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="methodName">The handler (outermost) that threw the exception.</param>
            <param name="e">The event being handled when the exception was thrown.</param>
            <returns>True if the exception was handled, else false if it should continue to get thrown.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnUnhandledEventExceptionHandler(Microsoft.Coyote.Actors.UnhandledEventException,Microsoft.Coyote.Actors.Event)">
            <summary>
            Callback that is invoked when the actor receives an event that it cannot handle.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="e">The unhandled event.</param>
            <returns>True if the the actor should gracefully halt, else false if the exception
            should continue to get thrown.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnException(System.Exception,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Callback that is invoked when the actor throws an exception. By default,
            the actor throws the exception causing the runtime to fail.
            </summary>
            <param name="ex">The exception thrown by the actor.</param>
            <param name="methodName">The handler (outermost) that threw the exception.</param>
            <param name="e">The event being handled when the exception was thrown.</param>
            <returns>The action that the runtime should take.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.HaltAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Halts the actor.
            </summary>
            <param name="e">The event being handled when the actor halts.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.ToString">
            <summary>
            Returns a string that represents the current actor.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Actor.UserCallbackType">
            <summary>
            The type of a user callback.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring which action should be invoked
            to handle a dequeued event of the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute.Action">
            <summary>
            The name of the action to invoke.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Actor.OnEventDoActionAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="actionName">The name of the action to invoke.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorExecutionContext">
            <summary>
            The execution context of an actor program.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.EventHandlerSyncObject">
            <summary>
            Object used to synchronize access to the runtime event handlers.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.Configuration">
            <summary>
            The configuration used by the runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.Runtime">
            <summary>
            The runtime associated with this context.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.ActorMap">
            <summary>
            Map from unique actor ids to actors.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.EnabledActors">
            <summary>
            Set of enabled actors.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.CoverageInfo">
            <summary>
            Data structure containing information regarding testing coverage.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.Trace">
            <summary>
            Actions taken and actors in the form of {Action, Sender, Receiver}.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.LogWriter">
            <summary>
            Responsible for writing to the installed <see cref="T:Microsoft.Coyote.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.LogManager">
            <summary>
            Manages all registered <see cref="T:Microsoft.Coyote.Actors.IActorRuntimeLog"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.Logger">
            <inheritdoc/>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.QuiescenceCompletionSource">
            <summary>
            Completes when actor quiescence is reached.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.IsActorQuiescenceAwaited">
            <summary>
            True if the runtime is waiting for actor quiescence.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.QuiescenceSyncObject">
            <summary>
            Synchronizes access to the logic checking for actor quiescence.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.IsRunning">
            <summary>
            True if the actor program is running, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.IsExecutionControlled">
            <summary>
            If true, the actor execution is controlled, else false.
            </summary>
        </member>
        <member name="E:Microsoft.Coyote.Actors.ActorExecutionContext.OnActorHalted">
            <inheritdoc/>
        </member>
        <member name="E:Microsoft.Coyote.Actors.ActorExecutionContext.OnEventDropped">
            <inheritdoc/>
        </member>
        <member name="E:Microsoft.Coyote.Actors.ActorExecutionContext.OnFailure">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Actors.ActorLogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorExecutionContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.WithRuntime(Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Installs the specified <see cref="T:Microsoft.Coyote.Runtime.CoyoteRuntime"/>. Only one runtime can be installed
            at a time, and this method can only be called once.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Microsoft#Coyote#Runtime#IRuntimeExtension#RunTest(System.Delegate,System.Threading.Tasks.Task@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorId(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorIdFromName(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorAndExecuteAsync(System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorAndExecuteAsync(System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor"/> of the specified <see cref="T:System.Type"/>. The method
            returns only when the actor is initialized and the <see cref="T:Microsoft.Coyote.Actors.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetOrCreateActorOperation(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Actor)">
            <summary>
            Returns the operation for the specified actor id, or creates a new
            operation if it does not exist yet.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Actors.Event"/> to an actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Actors.Event"/> to an actor. Returns immediately if the target was
            already running. Otherwise blocks until the target handles the event and reaches quiescence.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.EnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.Actor@)">
            <summary>
            Enqueues an event to the actor with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RunActorEventHandler(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous actor event handler.
            This is a fire and forget invocation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RunActorEventHandlerAsync(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event,System.Boolean)">
            <summary>
            Runs a new asynchronous actor event handler.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.OnActorEventHandlerStarted(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Invoked when the event handler of the specified actor starts.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.OnActorEventHandlerCompleted(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Invoked when the event handler of the specified actor completes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.CreateActorTimer(Microsoft.Coyote.Actors.Timers.TimerInfo,Microsoft.Coyote.Actors.Actor)">
            <summary>
            Creates a new timer that sends a <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent"/> to its owner actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetCurrentEventGroup(Microsoft.Coyote.Actors.ActorId)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetActorExecutionStatus(Microsoft.Coyote.Actors.ActorId)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetCurrentActorIds">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetCurrentActorTypes">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetCurrentActorCount">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetActorWithId``1(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Gets the actor of type <typeparamref name="TActor"/> with the specified id,
            or null if no such actor exists.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetNextOperationId">
            <summary>
            Returns the next available unique operation id.
            </summary>
            <returns>Value representing the next available unique operation id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RandomBoolean">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetNondeterministicBooleanChoice(System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RandomInteger(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetNondeterministicIntegerChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogInvokedAction(Microsoft.Coyote.Actors.Actor,System.Reflection.MethodInfo,System.String,System.String)">
            <summary>
            Logs that the specified actor invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogEnqueuedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified actor enqueued an <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogDequeuedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventInfo,System.Boolean)">
            <summary>
            Logs that the specified actor dequeued an <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogDefaultEventDequeued(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Logs that the specified actor dequeued the default <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogRaisedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified actor raised an <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogHandleRaisedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified actor is handling a raised <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogHandleHaltEvent(Microsoft.Coyote.Actors.Actor,System.Int32)">
            <summary>
            Logs that the specified actor is handling a raised <see cref="T:Microsoft.Coyote.Actors.HaltEvent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogReceiveCalled(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Logs that the specified actor called <see cref="M:Microsoft.Coyote.Actors.Actor.ReceiveEventAsync(System.Type[])"/>
            or one of its overloaded methods.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogReceivedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified actor enqueued an event that it was waiting to receive.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogReceivedEventWithoutWaiting(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event)">
            <summary>
            Logs that the specified actor received an event without waiting because the event
            was already in the inbox when the actor invoked the receive statement.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogWaitEvent(Microsoft.Coyote.Actors.Actor,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Logs that the specified actor is waiting to receive an event of one of the specified types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogEventHandlerTerminated(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.DequeueStatus)">
            <summary>
            Logs that the event handler of the specified actor terminated.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogEnteredState(Microsoft.Coyote.Actors.StateMachine)">
            <summary>
            Logs that the specified state machine entered a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogExitedState(Microsoft.Coyote.Actors.StateMachine)">
            <summary>
            Logs that the specified state machine exited a state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogPopState(Microsoft.Coyote.Actors.StateMachine)">
            <summary>
            Logs that the specified state machine invoked pop.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogInvokedOnEntryAction(Microsoft.Coyote.Actors.StateMachine,System.Reflection.MethodInfo)">
            <summary>
            Logs that the specified state machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.LogInvokedOnExitAction(Microsoft.Coyote.Actors.StateMachine,System.Reflection.MethodInfo)">
            <summary>
            Logs that the specified state machine invoked an action.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Microsoft#Coyote#Runtime#IRuntimeExtension#BuildCoverageInfo">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Microsoft#Coyote#Runtime#IRuntimeExtension#GetCoverageInfo">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Microsoft#Coyote#Runtime#IRuntimeExtension#GetCoverageGraph">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.GetActorProgramCounter(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Returns the program counter of the specified actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RegisterMonitor``1">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Monitor``1(Microsoft.Coyote.Specifications.Monitor.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.InvokeMonitor(System.Type,Microsoft.Coyote.Specifications.Monitor.Event,System.String,System.String,System.String)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.Coyote.Specifications.Monitor"/> with the specified <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean,System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean,System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Assert(System.Boolean,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.AssertExpectedCallerActor(Microsoft.Coyote.Actors.Actor,System.String)">
            <summary>
            Asserts that the actor calling an actor method is also the actor that is currently executing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RaiseOnFailureEvent(System.Exception)">
            <summary>
            Raises the <see cref="E:Microsoft.Coyote.Actors.ActorExecutionContext.OnFailure"/> event with the specified <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.HandleActorHalted(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Handle the halted actor with the specified <see cref="T:Microsoft.Coyote.Actors.ActorId"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.HandleDroppedEvent(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Handle the specified dropped <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.WrapAndThrowException(System.Exception,System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/> exception containing the specified exception.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RegisterLog(Microsoft.Coyote.Runtime.IRuntimeLog)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.RemoveLog(Microsoft.Coyote.Runtime.IRuntimeLog)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Microsoft#Coyote#Runtime#IRuntimeExtension#WaitUntilQuiescenceAsync">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Stop">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Dispose(System.Boolean)">
            <summary>
            Disposes runtime resources.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorExecutionContext.Mock">
            <summary>
            The mocked execution context of an actor program.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.ActorIds">
            <summary>
            Set of all created actor ids.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.NameValueToActorId">
            <summary>
            Map that stores all unique names and their corresponding actor ids.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.ProgramCounterMap">
            <summary>
            Map of program counters used for state-caching to distinguish
            scheduling from non-deterministic choices.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.IsExecutionControlled">
            <summary>
            If true, the actor execution is controlled, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.Actors.ActorLogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorExecutionContext.Mock"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorIdFromName(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Actors.Event"/>. This event
            can only be used to access its payload, and cannot be handled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, using the specified
            unbound actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Actors.Event"/>. This event
            can only be used to access its payload, and cannot be handled. The method returns only
            when the actor is initialized and the <see cref="T:Microsoft.Coyote.Actors.Event"/> (if any) is handled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor"/> of the specified <see cref="T:System.Type"/>. The method
            returns only when the actor is initialized and the <see cref="T:Microsoft.Coyote.Actors.Event"/> (if any)
            is handled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,System.String,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor"/> of the specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Actors.Event"/> to an actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Actors.Event"/> to an actor. Returns immediately if the target was
            already running. Otherwise blocks until the target handles the event and reaches quiescence.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.EnqueueEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions,Microsoft.Coyote.Actors.Actor@)">
            <summary>
            Enqueues an event to the actor with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.EnqueueEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Enqueues an event to the actor with the specified id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.RunActorEventHandler(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event,System.Boolean,Microsoft.Coyote.Actors.Actor)">
            <summary>
            Runs a new asynchronous event handler for the specified actor.
            This is a fire and forget invocation.
            </summary>
            <param name="actor">The actor that executes this event handler.</param>
            <param name="initialEvent">Optional event for initializing the actor.</param>
            <param name="isFresh">If true, then this is a new actor.</param>
            <param name="syncCaller">Caller actor that is blocked for quiescence.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.CreateActorTimer(Microsoft.Coyote.Actors.Timers.TimerInfo,Microsoft.Coyote.Actors.Actor)">
            <summary>
            Creates a new timer that sends a <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent"/> to its owner actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.GetCurrentEventGroup(Microsoft.Coyote.Actors.ActorId)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.GetNondeterministicBooleanChoice(System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.GetNondeterministicIntegerChoice(System.Int32,System.String,System.String)">
            <summary>
            Returns a controlled nondeterministic integer choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogDequeuedEvent(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventInfo,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogDefaultEventDequeued(Microsoft.Coyote.Actors.Actor)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogHandleHaltEvent(Microsoft.Coyote.Actors.Actor,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogReceiveCalled(Microsoft.Coyote.Actors.Actor)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogReceivedEventWithoutWaiting(Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogWaitEvent(Microsoft.Coyote.Actors.Actor,System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.LogPopState(Microsoft.Coyote.Actors.StateMachine)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.GetActorProgramCounter(Microsoft.Coyote.Actors.ActorId)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.IncrementActorProgramCounter(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Increments the program counter of the specified actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.ResetProgramCounter(Microsoft.Coyote.Actors.Actor)">
            <summary>
            Resets the program counter of the specified actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.AssertExpectedCallerActor(Microsoft.Coyote.Actors.Actor,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorExecutionContext.Mock.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorExecutionStatus">
            <summary>
            The execution status of an actor.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionStatus.None">
            <summary>
            No status is available.
            </summary>
            <remarks>
            An actor has no status if it was not created by the current
            runtime, or it has halted and the runtime disposed it.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionStatus.Active">
            <summary>
            The actor is active.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionStatus.Halting">
            <summary>
            The actor is halting.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorExecutionStatus.Halted">
            <summary>
            The actor is halted.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorFactory">
            <summary>
            Factory for creating actor instances.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorFactory.ActorConstructorCache">
            <summary>
            Cache storing actors constructors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorFactory.Create(System.Type)">
            <summary>
            Creates a new <see cref="T:Microsoft.Coyote.Actors.Actor"/> instance of the specified type.
            </summary>
            <param name="type">The type of the actors.</param>
            <returns>The created actor instance.</returns>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorId">
            <summary>
            Unique actor id.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorId.Context">
            <summary>
            The execution context of the actor with this id.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorId.Runtime">
            <summary>
            The runtime that executes the actor with this id.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorId.Value">
            <summary>
            Unique id, when <see cref="F:Microsoft.Coyote.Actors.ActorId.NameValue"/> is empty.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorId.NameValue">
            <summary>
            Unique id, when non-empty.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorId.Type">
            <summary>
            The type of the actor associated with this id.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorId.Name">
            <summary>
            Name used for logging.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.ActorId.IsNameUsedForHashing">
            <summary>
            True if <see cref="F:Microsoft.Coyote.Actors.ActorId.NameValue"/> is used as the unique id, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.#ctor(System.Type,System.UInt64,System.String,Microsoft.Coyote.Actors.ActorExecutionContext,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorId"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.Bind(Microsoft.Coyote.Actors.ActorExecutionContext)">
            <summary>
            Bind the actor id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.ToString">
            <summary>
            Returns a string that represents the current actor id.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.Equals(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.ActorId"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.ActorId"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.CompareTo(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Compares the specified <see cref="T:Microsoft.Coyote.Actors.ActorId"/> with the current
            <see cref="T:Microsoft.Coyote.Actors.ActorId"/> for ordering or sorting purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.System#IEquatable{Microsoft#Coyote#Actors#ActorId}#Equals(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.ActorId"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.ActorId"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorId.System#IComparable{Microsoft#Coyote#Actors#ActorId}#CompareTo(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Compares the specified <see cref="T:Microsoft.Coyote.Actors.ActorId"/> with the current
            <see cref="T:Microsoft.Coyote.Actors.ActorId"/> for ordering or sorting purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorOperation">
            <summary>
            Represents an actor operation that can be controlled during testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorOperation.Actor">
            <summary>
            The actor that executes this operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorOperation.#ctor(System.UInt64,System.String,Microsoft.Coyote.Actors.Actor,Microsoft.Coyote.Runtime.CoyoteRuntime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorOperation"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorOperation.GetHashedState(Microsoft.Coyote.Runtime.SchedulingPolicy)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.IActorRuntime">
            <summary>
            Interface that exposes runtime methods for creating and executing actors.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/overview">Programming
            model: asynchronous actors</see> for more information.
            </remarks>
        </member>
        <member name="E:Microsoft.Coyote.Actors.IActorRuntime.OnActorHalted">
            <summary>
            Callback that is fired when an actor has halted and the runtime has stopped managing it.
            </summary>
        </member>
        <member name="E:Microsoft.Coyote.Actors.IActorRuntime.OnEventDropped">
            <summary>
            Callback that is fired when an event is dropped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorId(System.Type,System.String)">
            <summary>
            Creates a fresh actor id that has not yet been bound to any actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorIdFromName(System.Type,System.String)">
            <summary>
            Creates a actor id that is uniquely tied to the specified unique name. The
            returned actor id can either be a fresh id (not yet bound to any actor), or
            it can be bound to a previously created actor. In the second case, this actor
            id can be directly used to communicate with the corresponding actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Unique name used to create or get the actor id.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActor(System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and with the specified
            optional <see cref="T:Microsoft.Coyote.Actors.Event"/>. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Actors.Event)"/>
            method on the new actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActor(System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, and with the
            specified optional <see cref="T:Microsoft.Coyote.Actors.Event"/>. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Actors.Event)"/>
            method on the new actor.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActor(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified type, using the specified <see cref="T:Microsoft.Coyote.Actors.ActorId"/>.
            This method optionally passes an <see cref="T:Microsoft.Coyote.Actors.Event"/>. This event is given to the
            InitializeAsync method on the new actor.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>The result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorAndExecuteAsync(System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and with the specified
            optional <see cref="T:Microsoft.Coyote.Actors.Event"/>. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Actors.Event)"/>
            method on the new actor. The method returns only when the actor is initialized and
            the <see cref="T:Microsoft.Coyote.Actors.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorAndExecuteAsync(System.Type,System.String,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/> and name, and with the
            specified optional <see cref="T:Microsoft.Coyote.Actors.Event"/>. This event is given to the <see cref="M:Microsoft.Coyote.Actors.Actor.InitializeAsync(Microsoft.Coyote.Actors.Event)"/>
            method on the new actor. The method returns only when the actor is
            initialized and the <see cref="T:Microsoft.Coyote.Actors.Event"/> (if any) is handled.
            </summary>
            <param name="type">Type of the actor.</param>
            <param name="name">Optional name used for logging.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.CreateActorAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,System.Type,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup)">
            <summary>
            Creates a new actor of the specified <see cref="T:System.Type"/>, using the specified unbound
            actor id, and passes the specified optional <see cref="T:Microsoft.Coyote.Actors.Event"/>. This event is given to
            the InitializeAsync method on the new actor. The method returns only when
            the actor is initialized and the <see cref="T:Microsoft.Coyote.Actors.Event"/> (if any)
            is handled.
            </summary>
            <param name="id">Unbound actor id.</param>
            <param name="type">Type of the actor.</param>
            <param name="initialEvent">Optional event used during initialization.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <returns>Task that represents the asynchronous operation. The task result is the actor id.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.SendEvent(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an asynchronous <see cref="T:Microsoft.Coyote.Actors.Event"/> to an actor.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with this Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.SendEventAndExecuteAsync(Microsoft.Coyote.Actors.ActorId,Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.EventGroup,Microsoft.Coyote.Actors.SendOptions)">
            <summary>
            Sends an <see cref="T:Microsoft.Coyote.Actors.Event"/> to an actor. Returns immediately if the target was already
            running. Otherwise blocks until the target handles the event and reaches quiescense.
            </summary>
            <param name="targetId">The id of the target.</param>
            <param name="e">The event to send.</param>
            <param name="eventGroup">An optional event group associated with the new Actor.</param>
            <param name="options">Optional configuration of a send operation.</param>
            <returns>Task that represents the asynchronous operation. The task result is true if
            the event was handled, false if the event was only enqueued.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.GetCurrentEventGroup(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Returns the current <see cref="T:Microsoft.Coyote.Actors.EventGroup"/> of the actor with the specified id. Returns null
            if the id is not set, or if the <see cref="T:Microsoft.Coyote.Actors.ActorId"/> is not associated with this runtime. During
            testing, the runtime asserts that the specified actor is currently executing.
            </summary>
            <param name="currentActorId">The id of the currently executing actor.</param>
            <returns>The current EventGroup or null.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.GetActorExecutionStatus(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Returns the execution status of the actor with the specified <see cref="T:Microsoft.Coyote.Actors.ActorId"/>.
            </summary>
            <param name="id">The id of the actor.</param>
            <returns>The execution status.</returns>
            <remarks>
            This method is not thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.GetCurrentActorIds">
            <summary>
            Returns the <see cref="T:Microsoft.Coyote.Actors.ActorId"/> of all active actors currently managed by this runtime.
            </summary>
            <returns>The id of all active actors.</returns>
            <remarks>
            This method is not thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.GetCurrentActorTypes">
            <summary>
            Returns the distinct types of all active actors currently managed by this runtime.
            </summary>
            <returns>The distinct types of all active actors.</returns>
            <remarks>
            This method is not thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.IActorRuntime.GetCurrentActorCount">
            <summary>
            Returns the current count of active actors managed by this runtime.
            </summary>
            <returns>The current count of active actors.</returns>
            <remarks>
            This method is not thread-safe.
            </remarks>
        </member>
        <member name="T:Microsoft.Coyote.Actors.NameResolver">
            <summary>
            Utility class for resolving names.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.NameResolver.StateNamesCache">
            <summary>
            Cache of state names.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.NameResolver.GetQualifiedStateName(System.Type)">
            <summary>
            Returns the qualified (i.e. <see cref="T:Microsoft.Coyote.Actors.StateMachine.StateGroup"/>) name of the specified
            state machine or monitor state, or the empty string if there is no such name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.NameResolver.GetStateNameForLogging(System.Type)">
            <summary>
            Returns the state name to be used for logging purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.RuntimeFactory">
            <summary>
            Provides methods for creating a <see cref="T:Microsoft.Coyote.Actors.IActorRuntime"/> runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.RuntimeFactory.Create">
            <summary>
            Creates a new actor runtime.
            </summary>
            <returns>The created actor runtime.</returns>
            <remarks>
            Only one actor runtime can be used per process. If you create a new actor runtime
            it replaces the previously installed one. This is a thread-safe operation.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.RuntimeFactory.Create(Microsoft.Coyote.Configuration)">
            <summary>
            Creates a new actor runtime with the specified <see cref="T:Microsoft.Coyote.Configuration"/>.
            </summary>
            <param name="configuration">The runtime configuration to use.</param>
            <returns>The created actor runtime.</returns>
            <remarks>
            Only one actor runtime can be used per process. If you create a new actor runtime
            it replaces the previously installed one. This is a thread-safe operation.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.RuntimeFactory.Create(Microsoft.Coyote.Configuration,Microsoft.Coyote.Actors.ActorLogManager,Microsoft.Coyote.Runtime.SchedulingPolicy)">
            <summary>
            Creates a new actor runtime with the specified <see cref="T:Microsoft.Coyote.Configuration"/> for the specified <see cref="T:Microsoft.Coyote.Runtime.SchedulingPolicy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.RuntimeFactory.CreateLogManager(Microsoft.Coyote.Logging.LogWriter)">
            <summary>
            Creates a new runtime log manager that writes to the specified log writer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorOperationScheduler.Setup(Microsoft.Coyote.Configuration,Microsoft.Coyote.Runtime.SchedulingPolicy,Microsoft.Coyote.IRandomValueGenerator)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Coyote.Runtime.OperationScheduler"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SendOptions">
            <summary>
            Represents a send event configuration that is used during testing.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SendOptions.Default">
            <summary>
            The default send options.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SendOptions.MustHandle">
            <summary>
            True if this event must always be handled, else false.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SendOptions.Assert">
            <summary>
            Asserts that there must not be more than N instances of the
            event in the inbox queue of the receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SendOptions.HashedState">
            <summary>
            User-defined hash of the event. The default value is 0. Override to
            improve the accuracy of stateful techniques during testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SendOptions.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SendOptions"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SendOptions.ToString">
            <summary>
            A string that represents the current options.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine">
            <summary>
            Type that implements a state machine actor. Inherit from this class to declare
            a custom actor with states, state transitions and event handlers.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/state-machines">State machines</see>
            for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.ActionCache">
            <summary>
            Cache of state machine types to a map of action names to action declarations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.ActionCacheLocks">
            <summary>
            A set of lockable objects used to protect static initialization of the ActionCache while
            also enabling multithreaded initialization of different StateMachine types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.StateTypeCache">
            <summary>
            Cache of state machine types to a set of all possible states types.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.StateInstanceCache">
            <summary>
            Cache of state machine types to a set of all available state instances.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.StateStack">
            <summary>
            A stack of states. The state on the top of the stack represents the current state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.InheritableEventHandlerMap">
            <summary>
            A map from event type to a Stack of HandlerInfo where the stack contains the inheritable
            event handlers defined by each state that has been pushed onto the StateStack (if any).
            The HandlerInfo also remembers which state the handler was defined on so that when the
            handler is invoked the IActorRuntimeLog can be given that information.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.EventHandlerMap">
            <summary>
            A map from event type to EventHandlerDeclaration for those EventHandlerDeclarations that
            are not inheritable on the state stack.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.EmptyEventHandlerMap">
            <summary>
            This is just so we don't have to allocate an empty map more than once.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.StateMachineActionMap">
            <summary>
            Map from action names to cached action delegates for all states in this state machine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.PendingTransition">
            <summary>
            Newly created Transition that hasn't been returned from InvokeActionAsync yet.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.StateMachine.CurrentState">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.InitializeAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Initializes the actor with the specified optional event.
            </summary>
            <param name="initialEvent">Optional event used for initialization.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)">
            <summary>
            Raises the specified <see cref="T:Microsoft.Coyote.Actors.Event"/> at the end of the current action.
            </summary>
            <remarks>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)"/>, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="e">The event to raise.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1">
            <summary>
            Raise a special event that performs a goto state operation at the end of the current action.
            </summary>
            <remarks>
            Goto state pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> and pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> on the active state stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventGotoState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)"/>, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <typeparam name="TState">Type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent(System.Type)">
            <summary>
            Raise a special event that performs a goto state operation at the end of the current action.
            </summary>
            <remarks>
            Goto state pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> and pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> on the active state stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventGotoState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)"/>, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="state">Type of the state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1">
            <summary>
            Raise a special event that performs a push state operation at the end of the current action.
            </summary>
            <remarks>
            Pushing a state does not pop the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/>, instead it pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> on the active state stack
            so that you can have multiple active states.  In this case events can be handled by all active states on the stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventPushState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)"/>, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <typeparam name="TState">Type of the state.</typeparam>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent(System.Type)">
            <summary>
            Raise a special event that performs a push state operation at the end of the current action.
            </summary>
            <remarks>
            Pushing a state does not pop the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/>, instead it pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> on the active state stack
            so that you can have multiple active states.  In this case events can be handled by all active states on the stack.
            This is shorthand for the following code:
            <code>
            class Event E { }
            [OnEventPushState(typeof(E), typeof(S))]
            this.RaiseEvent(new E());
            </code>
            This event is not handled until the action that calls this method returns control back
            to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            Only one of the following can be called per action:
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)"/>, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent"/>.
            An Assert is raised if you accidentally try and do two of these operations in a single action.
            </remarks>
            <param name="state">Type of the state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent">
             <summary>
             Raise a special event that performs a pop state operation at the end of the current action.
             </summary>
             <remarks>
             Popping a state pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> that was pushed using <see cref='M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent(System.Type)'/> or an OnEventPushStateAttribute.
             An assert is raised if there are no states left to pop.
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            
             Only one of the following can be called per action:
             <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)"/>, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1"/> or
             <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent"/>.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent">
             <summary>
             Raises a <see cref='T:Microsoft.Coyote.Actors.HaltEvent'/> to halt the actor at the end of the current action.
             </summary>
             <remarks>
             This event is not handled until the action that calls this method returns control back
             to the Coyote runtime.  It is handled before any other events are dequeued from the inbox.
            
             Only one of the following can be called per action:
             <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)"/>, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1"/>,  <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1"/> or
             <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent"/>.
             An Assert is raised if you accidentally try and do two of these operations in a single action.
             </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.OnStateChanged">
            <summary>
            Notification that the current state has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.OnEventHandledAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Asynchronous callback that is invoked when the actor finishes handling a dequeued
            event, unless the handler of the dequeued event raised an event or caused the actor
            to halt (either normally or due to an exception). Unless this callback raises an
            event, the actor will either become idle or dequeue the next event from its inbox.
            </summary>
            <param name="e">The event that was handled.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.HandleEventAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Handles the specified <see cref="T:Microsoft.Coyote.Actors.Event"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ExecuteCurrentStateOnEntryAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Executes the on-entry action of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ExecuteCurrentStateOnExitAsync(System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Executes the on-exit action of the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ApplyEventHandlerTransition(Microsoft.Coyote.Actors.StateMachine.Transition)">
            <summary>
            Applies the specified event handler transition.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.CheckDanglingTransition">
            <summary>
            Notifies that a Transition was created but not returned to the StateMachine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.GotoStateAsync(System.Type,System.String,Microsoft.Coyote.Actors.Event)">
            <summary>
            Performs a goto transition to the specified state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.PushStateAsync(System.Type,Microsoft.Coyote.Actors.Event)">
            <summary>
            Performs a push transition to the specified state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.PopStateAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Performs a pop transition from the specified state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.DoStatePush(Microsoft.Coyote.Actors.StateMachine.State)">
            <summary>
            Configures the state transitions of the state machine when a state is pushed into the stack.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.DoStatePop">
            <summary>
            Configures the state transitions of the state machine
            when a state is popped.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.GetInheritedEventHandler(Microsoft.Coyote.Actors.Event,Microsoft.Coyote.Actors.StateMachine.HandlerInfo@)">
            <summary>
            Get the appropriate inherited event handler for the given event.
            </summary>
            <param name="e">The event we want to handle.</param>
            <param name="info">The HandlerInfo in the state stack.</param>
            <returns>True if a handler is found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.IsEventIgnored(Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.IsEventDeferred(Microsoft.Coyote.Actors.Event)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.IsDefaultHandlerInstalled">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.GetHashedState(Microsoft.Coyote.Runtime.SchedulingPolicy)">
            <summary>
            Returns the hashed state of this state machine.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.SetupEventHandlers">
            <summary>
            Extracts user declarations and setups the event handlers and state transitions.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.GetStateTypeAtStackIndex(System.Int32)">
            <summary>
            Returns the type of the state at the specified state
            stack index, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ExtractStateTypes(System.Type)">
            <summary>
            Processes a type, looking for states.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ReportActivityCoverage(Microsoft.Coyote.Actors.Coverage.ActorCoverageInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.AssertStateValidity">
            <summary>
            Checks the state machine for state related errors.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.FormatFairRandom(System.String,System.String,System.Int32)">
            <summary>
            Returns the formatted strint to be used with a fair nondeterministic boolean choice.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.ReportUnhandledException(System.Exception,System.String)">
            <summary>
            Wraps the unhandled exception inside an <see cref="T:Microsoft.Coyote.Runtime.AssertionFailureException"/>
            exception, and throws it to the user.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.Transition">
            <summary>
            Defines the <see cref="T:Microsoft.Coyote.Actors.StateMachine"/> transition that is the
            result of executing an event handler.  Transitions are created by using
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1"/>, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)"/>, <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1"/> or
            <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent"/> and <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent"/>.
            The Transition is processed by the Coyote runtime when
            an event handling method of a StateMachine returns a Transition object.
            This means such a method can only do one such Transition per method call.
            If the method wants to do a conditional transition it can return
            Transition.None to indicate no transition is to be performed.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/state-machines">State machines</see> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.TypeValue">
            <summary>
            The type of the transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.State">
            <summary>
            The target state of the transition, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Event">
            <summary>
            The event participating in the transition, if there is one.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.None">
            <summary>
            This special transition represents a transition that does not change the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.Transition.#ctor(Microsoft.Coyote.Actors.StateMachine.Transition.Type,System.Type,Microsoft.Coyote.Actors.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.Transition"/> struct.
            </summary>
            <param name="type">The type of the transition.</param>
            <param name="state">The target state of the transition, if there is one.</param>
            <param name="e">The event participating in the transition, if there is one.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.Transition.Type">
            <summary>
            Defines the type of a <see cref="T:Microsoft.Coyote.Actors.StateMachine"/> transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.None">
            <summary>
            A transition that does not change the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/>.
            This is the value used by <see cref="F:Microsoft.Coyote.Actors.StateMachine.Transition.None"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.RaiseEvent">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseEvent(Microsoft.Coyote.Actors.Event)"/> that raises an <see cref="F:Microsoft.Coyote.Actors.StateMachine.Transition.Event"/> bypassing
            the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> inbox.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.GotoState">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseGotoStateEvent``1"/> that pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/>
            and pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> on the
            stack of <see cref="T:Microsoft.Coyote.Actors.StateMachine"/> states.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.PushState">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePushStateEvent``1"/> that pushes the specified <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/>
            on the stack of <see cref="T:Microsoft.Coyote.Actors.StateMachine"/> states.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.PopState">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaisePopStateEvent"/> that pops the current <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/>
            from the stack of <see cref="T:Microsoft.Coyote.Actors.StateMachine"/> states.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.Transition.Type.Halt">
            <summary>
            A transition created by <see cref="M:Microsoft.Coyote.Actors.StateMachine.RaiseHaltEvent"/> that halts the <see cref="T:Microsoft.Coyote.Actors.StateMachine"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.HandlerInfo">
            <summary>
            A struct used to track event handlers that are pushed or popped on the StateStack.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.HandlerInfo.State">
            <summary>
            The state that provided this EventHandler.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.HandlerInfo.StackDepth">
            <summary>
            Records where this State is in the StateStack.  This information is needed to implement WildCardEvent
            semantics.  A specific Handler closest to the top of the stack (higher StackDepth) wins over a
            WildCardEvent further down the stack (lower StackDepth).
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.HandlerInfo.Handler">
            <summary>
            The event handler for a given event Type defined by the State.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State">
            <summary>
            Abstract class representing a state.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/state-machines">State machines</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.StateMachine.State.EntryAction">
            <summary>
            The entry action of the state.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.StateMachine.State.ExitAction">
            <summary>
            The exit action of the state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.InheritableEventHandlers">
            <summary>
            Map containing all event handler declarations.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.EventHandlers">
            <summary>
            Map containing all non-inheritable event handler declarations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.StateMachine.State.IsStart">
            <summary>
            True if this is the start state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InitializeState">
            <summary>
            Initializes the state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallGotoTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares goto event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritGotoTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits goto event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallPushTransitions(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares push event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritPushTransitions(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits push event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallActionBindings(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Installs action bindings, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritActionBindings(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits action bindings from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallIgnoreHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares ignore event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritIgnoreHandlers(System.Type,System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits ignore event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InstallDeferHandlers(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Declares defer event handlers, if there are any.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.InheritDeferHandlers(System.Type,System.Collections.Generic.HashSet{System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Inherits defer event handlers from a base state, if there is one.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.CheckEventHandlerAlreadyDeclared(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already declared.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.CheckEventHandlerAlreadyInherited(System.Type,System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Checks if an event handler has been already inherited.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.StartAttribute">
            <summary>
            Attribute for declaring the state that a state machine transitions upon creation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnEntryAttribute">
            <summary>
            Attribute for declaring what action to perform when entering a state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEntryAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEntryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEntryAttribute"/> class.
            </summary>
            <param name="actionName">The name of the action to execute.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnExitAttribute">
            <summary>
            Attribute for declaring what action to perform when exiting a state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnExitAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnExitAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnExitAttribute"/> class.
            </summary>
            <param name="actionName">The name of the action to execute.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute">
            <summary>
            Attribute for declaring a goto state transition when the state machine
            is in the specified state and dequeues an event of the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.State">
            <summary>
            The type of the state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.Action">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="stateType">The type of the state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventGotoStateAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="stateType">The type of the state.</param>
            <param name="actionName">Name of action to perform on-exit.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute">
            <summary>
            Attribute for declaring a push state transition when the state machine
            is in the specified state and dequeues an event of the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute.State">
            <summary>
            The type of the state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventPushStateAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="stateType">The type of the state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute">
            <summary>
            Attribute for declaring which action should be invoked when the state machine
            is in the specified state to handle a dequeued event of the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute.Event">
            <summary>
            The type of the dequeued event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute.Action">
            <summary>
            The name of the action to invoke.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.OnEventDoActionAttribute"/> class.
            </summary>
            <param name="eventType">The type of the dequeued event.</param>
            <param name="actionName">The name of the action to invoke.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.DeferEventsAttribute">
            <summary>
            Attribute for declaring what events should be deferred in a state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.DeferEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.DeferEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.DeferEventsAttribute"/> class.
            </summary>
            <param name="eventTypes">Event types.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.State.IgnoreEventsAttribute">
            <summary>
            Attribute for declaring what events should be ignored in a state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.StateMachine.State.IgnoreEventsAttribute.Events">
            <summary>
            Event types.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.StateMachine.State.IgnoreEventsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.StateMachine.State.IgnoreEventsAttribute"/> class.
            </summary>
            <param name="eventTypes">Event types.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.StateMachine.StateGroup">
            <summary>
            Abstract class used for representing a group of related states.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent">
            <summary>
            Event used to communicate with a shared counter actor.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType">
            <summary>
            Supported shared counter operations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.Operation">
            <summary>
            The operation stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.Value">
            <summary>
            The shared counter value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.Comparand">
            <summary>
            Comparand value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.Sender">
            <summary>
            The sender actor stored in this event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.#ctor(Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType,System.Int32,System.Int32,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.IncrementEvent">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Increment"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.DecrementEvent">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Decrement"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.SetEvent(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Set"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.GetEvent(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Get"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.AddEvent(Microsoft.Coyote.Actors.ActorId,System.Int32)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.Add"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.CompareExchangeEvent(Microsoft.Coyote.Actors.ActorId,System.Int32,System.Int32)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterEvent.OperationType.CompareExchange"/> operation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterResponseEvent">
            <summary>
            Event containing the value of a shared counter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterResponseEvent.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterResponseEvent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterResponseEvent"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent">
            <summary>
            Event used to communicate with a shared counter actor.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType">
            <summary>
            Supported shared dictionary operations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Operation">
            <summary>
            The operation stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Key">
            <summary>
            The shared dictionary key stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Value">
            <summary>
            The shared dictionary value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.ComparisonValue">
            <summary>
            The shared dictionary comparison value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Sender">
            <summary>
            The sender actor stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.Comparer">
            <summary>
            The comparer stored in this event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.#ctor(Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType,System.Object,System.Object,System.Object,Microsoft.Coyote.Actors.ActorId,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.InitializeEvent(System.Object)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.Initialize"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.TryAddEvent(System.Object,System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.TryAdd"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.TryUpdateEvent(System.Object,System.Object,System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.TryUpdate"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.GetEvent(System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.Get"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.TryGetEvent(System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.TryGet"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.SetEvent(System.Object,System.Object)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.Set"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.CountEvent(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.Count"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.TryRemoveEvent(System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryEvent.OperationType.TryRemove"/> operation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryResponseEvent`1">
            <summary>
            Event containing the value of a shared dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryResponseEvent`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryResponseEvent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryResponseEvent`1"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent">
            <summary>
            Event used to communicate with a shared register actor.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType">
            <summary>
            Supported shared register operations.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.Operation">
            <summary>
            The operation stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.Value">
            <summary>
            The shared register value stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.Func">
            <summary>
            The shared register func stored in this event.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.Sender">
            <summary>
            The sender actor stored in this event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.#ctor(Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType,System.Object,System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.UpdateEvent(System.Object,Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType.Update"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.SetEvent(System.Object)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType.Set"/> operation.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.GetEvent(Microsoft.Coyote.Actors.ActorId)">
            <summary>
            Creates a new event for the <see cref="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterEvent.OperationType.Get"/> operation.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterResponseEvent`1">
            <summary>
            Event containing the value of a shared register.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterResponseEvent`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterResponseEvent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterResponseEvent`1"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter">
            <summary>
            A thread-safe counter that can be shared in-memory by actors.
            </summary>
            <remarks>
            See also <see href="/coyote/concepts/actors/sharing-objects">Sharing Objects</see>.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Counter">
            <summary>
            The value of the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Create(Microsoft.Coyote.Actors.IActorRuntime,System.Int32)">
            <summary>
            Creates a new shared counter.
            </summary>
            <param name="runtime">The actor runtime.</param>
            <param name="value">The initial value.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Increment">
            <summary>
            Increments the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Decrement">
            <summary>
            Decrements the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.GetValue">
            <summary>
            Gets the current value of the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Add(System.Int32)">
            <summary>
            Adds a value to the counter atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Exchange(System.Int32)">
            <summary>
            Sets the counter to a value atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.CompareExchange(System.Int32,System.Int32)">
            <summary>
            Sets the counter to a value atomically if it is equal to a given value.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter"/> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.CounterActor">
            <summary>
            Actor modeling the shared counter.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Context">
            <summary>
            The execution context associated with this shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.#ctor(System.Int32,Microsoft.Coyote.Actors.ActorExecutionContext.Mock)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Increment">
            <summary>
            Increments the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Decrement">
            <summary>
            Decrements the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.GetValue">
            <summary>
            Gets the current value of the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Add(System.Int32)">
            <summary>
            Adds a value to the counter atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.Exchange(System.Int32)">
            <summary>
            Sets the counter to a value atomically.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounter.Mock.CompareExchange(System.Int32,System.Int32)">
            <summary>
            Sets the counter to a value atomically if it is equal to a given value.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedCounterActor">
            <summary>
            A shared counter modeled using an actor for testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedCounterActor.Counter">
            <summary>
            The value of the shared counter.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterActor.OnInitializeAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Initializes the actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedCounterActor.ProcessEvent(Microsoft.Coyote.Actors.Event)">
            <summary>
            Processes the next dequeued event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary">
            <summary>
            A thread-safe dictionary that can be shared in-memory by actors.
            </summary>
            <remarks>
            See also <see href="/coyote/concepts/actors/sharing-objects">Sharing Objects</see>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Create``2(Microsoft.Coyote.Actors.IActorRuntime)">
            <summary>
            Creates a new shared dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="runtime">The actor runtime.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},Microsoft.Coyote.Actors.IActorRuntime)">
            <summary>
            Creates a new shared dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="comparer">The key comparer.</param>
            <param name="runtime">The actor runtime.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2"/> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.DictionaryActor">
            <summary>
            Actor modeling the shared dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.Context">
            <summary>
            The execution context associated with this shared dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.#ctor(Microsoft.Coyote.Actors.ActorExecutionContext.Mock,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key to the dictionary, if it doesn't already exist in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates the value for an existing key in the dictionary, if that key has a specific value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.TryRemove(`0,`1@)">
            <summary>
            Removes the specified key from the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary.Mock`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2">
            <summary>
            A thread-safe dictionary that can be shared in-memory by actors.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.Dictionary">
            <summary>
            The dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.TryAdd(`0,`1)">
            <summary>
            Adds a new key to the dictionary, if it doesn't already exist in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates the value for an existing key in the dictionary, if that key has a specific value.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Removes the specified key from the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.SharedObjects.SharedDictionary`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryActor`2">
            <summary>
            A shared dictionary modeled using an actor for testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryActor`2.Dictionary">
            <summary>
            The internal shared dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryActor`2.OnInitializeAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Initializes the actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedDictionaryActor`2.ProcessEvent(Microsoft.Coyote.Actors.Event)">
            <summary>
            Processes the next dequeued event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister">
            <summary>
            A thread-safe register that can be shared in-memory by actors.
            </summary>
            <remarks>
            See also <see href="/coyote/concepts/actors/sharing-objects">Sharing Objects</see>.
            </remarks>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Create``1(Microsoft.Coyote.Actors.IActorRuntime,``0)">
            <summary>
            Creates a new shared register.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="runtime">The actor runtime.</param>
            <param name="value">The initial value.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1">
            <summary>
            Mock implementation of <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1"/> that can be controlled during systematic testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.RegisterActor">
            <summary>
            Actor modeling the shared register.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.Context">
            <summary>
            The execution context associated with this shared register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.#ctor(Microsoft.Coyote.Actors.ActorExecutionContext.Mock,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.Update(System.Func{`0,`0})">
            <summary>
            Reads and updates the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.GetValue">
            <summary>
            Gets current value of the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister.Mock`1.SetValue(`0)">
            <summary>
            Sets current value of the register.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1">
            <summary>
            A thread-safe register that can be shared in-memory by actors.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.Value">
            <summary>
            Current value of the register.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.SynchronizationObject">
            <summary>
            Object used for synchronizing accesses to the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.Update(System.Func{`0,`0})">
            <summary>
            Reads and updates the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.GetValue">
            <summary>
            Gets current value of the register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegister`1.SetValue(`0)">
            <summary>
            Sets current value of the register.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterActor`1">
            <summary>
            A shared register modeled using an actor for testing.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterActor`1.Value">
            <summary>
            The value of the shared register.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterActor`1.OnInitializeAsync(Microsoft.Coyote.Actors.Event)">
            <summary>
            Initializes the actor.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.SharedObjects.SharedRegisterActor`1.ProcessEvent(Microsoft.Coyote.Actors.Event)">
            <summary>
            Processes the next dequeued event.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.GotoStateTransition">
            <summary>
            Defines a goto state transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.GotoStateTransition.TargetState">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.GotoStateTransition.Lambda">
            <summary>
            An optional lambda function that executes after the
            on-exit handler of the exiting state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.GotoStateTransition.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.GotoStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
            <param name="lambda">Lambda function that executes after the on-exit handler of the exiting state.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.GotoStateTransition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.GotoStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.PushStateTransition">
            <summary>
            Defines a push state transition.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.PushStateTransition.TargetState">
            <summary>
            The target state.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.PushStateTransition.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.PushStateTransition"/> class.
            </summary>
            <param name="targetState">The target state.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorBasedInterleavingStrategy">
            <summary>
            Abstract exploration strategy used during controlled testing.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedInterleavingStrategy.#ctor(Microsoft.Coyote.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorBasedInterleavingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedRandomStrategy.NextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedRandomStrategy.NextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedRandomStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedRandomStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorBasedDFSStrategy">
            <summary>
            A depth-first search exploration strategy.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.ScheduleStack">
            <summary>
            Stack of scheduling choices.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.BoolNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.IntNondetStack">
            <summary>
            Stack of nondeterministic choices.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.SchIndex">
            <summary>
            Current schedule index.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NondetIndex">
            <summary>
            Current nondeterministic index.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.#ctor(Microsoft.Coyote.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorBasedDFSStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.Microsoft#Coyote#Actors#IActorBasedStrategy#InitializeNextIteration(System.UInt32,Microsoft.Coyote.Actors.ActorExecutionTrace,Microsoft.Coyote.Runtime.ExecutionTrace)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NextBoolean(Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NextInteger(Microsoft.Coyote.Runtime.ControlledOperation,System.Int32,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.DebugPrintSchedule">
            <summary>
            Prints the schedule, if debug is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.Reset">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.SChoice">
            <summary>
            A scheduling choice. Contains an id and a boolean that is
            true if the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.SChoice.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.SChoice"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NondetBooleanChoice">
            <summary>
            A nondeterministic choice. Contains a boolean value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NondetBooleanChoice.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NondetBooleanChoice"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NondetIntegerChoice">
            <summary>
            A nondeterministic choice. Contains an integer value that
            corresponds to the choice and a boolean that is true if
            the choice has been previously explored.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NondetIntegerChoice.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.ActorBasedDFSStrategy.NondetIntegerChoice"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.InterleavedFuzzingStrategy">
            <summary>
            A fuzzing strategy class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.InterleavedFuzzingStrategy.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.InterleavedFuzzingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.InterleavedFuzzingStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.InterleavedFuzzingStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.InterleavedFuzzingStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.InterleavedRoundRobinStrategy">
            <summary>
            A fuzzing strategy class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.InterleavedRoundRobinStrategy.#ctor(Microsoft.Coyote.Configuration,Microsoft.Coyote.IRandomValueGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.InterleavedRoundRobinStrategy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.InterleavedRoundRobinStrategy.NextOperation(System.Collections.Generic.IEnumerable{Microsoft.Coyote.Runtime.ControlledOperation},Microsoft.Coyote.Runtime.ControlledOperation,System.Boolean,Microsoft.Coyote.Runtime.ControlledOperation@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.InterleavedRoundRobinStrategy.GetName">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Coyote.Actors.InterleavedRoundRobinStrategy.GetDescription">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.ActorTimer">
            <summary>
            A timer that can send timeout events to its owner actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Timers.ActorTimer.Info">
            <inheritdoc/>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.ActorTimer.Owner">
            <summary>
            The actor that owns this timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.ActorTimer.InternalTimer">
            <summary>
            The internal timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.ActorTimer.TimeoutEvent">
            <summary>
            The timeout event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.ActorTimer.IsDisposed">
            <summary>
            True if this timer is disposed, else false.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.#ctor(Microsoft.Coyote.Actors.Timers.TimerInfo,Microsoft.Coyote.Actors.Actor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.ActorTimer"/> class.
            </summary>
            <param name="info">Stores information about this timer.</param>
            <param name="owner">The actor that owns this timer.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.HandleTimeout(System.Object)">
            <summary>
            Handles the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.Equals(Microsoft.Coyote.Actors.Timers.ActorTimer)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.ActorId"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.ActorId"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.ActorTimer.Dispose">
            <summary>
            Disposes the resources held by this timer.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.IActorTimer">
            <summary>
            Interface of a timer that can send timeout events to its owner actor.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Timers.IActorTimer.Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer">
            <summary>
            A mock timer that replaces <see cref="T:Microsoft.Coyote.Actors.Timers.ActorTimer"/> during testing.
            It is implemented as a state machine.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.TimerInfo">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Microsoft#Coyote#Actors#Timers#IActorTimer#Info">
            <summary>
            Stores information about this timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Owner">
            <summary>
            The actor that owns this timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.TimeoutEvent">
            <summary>
            The timeout event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Delay">
            <summary>
            Adjusts the probability of firing a timeout event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Setup(Microsoft.Coyote.Actors.Event)">
            <summary>
            Initializes the timer with the specified configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.HandleTimeout">
            <summary>
            Handles the timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Equals(Microsoft.Coyote.Actors.Timers.ActorTimer)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.ActorId"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.ActorId"/>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>True if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.MockStateMachineTimer.Dispose">
            <summary>
            Disposes the resources held by this timer.
            </summary>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent">
            <summary>
            Defines a timer elapsed event that is sent from a timer to the actor that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent.Info">
            <summary>
            Stores information about the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent.Owner">
            <summary>
            The actor that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent.Delay">
            <summary>
            Adjusts the probability of firing a timeout event.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent.#ctor(Microsoft.Coyote.Actors.Timers.TimerInfo,Microsoft.Coyote.Actors.Actor,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.Mocks.TimerSetupEvent"/> class.
            </summary>
            <param name="info">Stores information about the timer.</param>
            <param name="owner">The actor that owns the timer.</param>
            <param name="delay">Adjusts the probability of firing a timeout event.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent">
            <summary>
            Defines a timer elapsed event that is sent from a timer to the actor that owns the timer.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/timers">Using timers in actors</see> for more information.
            </remarks>
        </member>
        <member name="P:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent.Info">
            <summary>
            Stores information about the timer.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent.#ctor(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.TimerElapsedEvent"/> class.
            </summary>
            <param name="info">Stores information about the timer.</param>
        </member>
        <member name="T:Microsoft.Coyote.Actors.Timers.TimerInfo">
            <summary>
            Stores information about a timer that can send timeout events to its owner actor.
            </summary>
            <remarks>
            See <see href="/coyote/concepts/actors/timers">Using timers in actors</see> for more information.
            </remarks>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.Id">
            <summary>
            The unique id of the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.OwnerId">
            <summary>
            The id of the actor that owns the timer.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.DueTime">
            <summary>
            The amount of time to wait before sending the first timeout event.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.Period">
            <summary>
            The time interval between timeout events.
            </summary>
        </member>
        <member name="F:Microsoft.Coyote.Actors.Timers.TimerInfo.CustomEvent">
            <summary>
            The optional custom event to raise instead of the default TimerElapsedEvent.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.#ctor(Microsoft.Coyote.Actors.ActorId,System.TimeSpan,System.TimeSpan,Microsoft.Coyote.Actors.Timers.TimerElapsedEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo"/> class.
            </summary>
            <param name="ownerId">The id of the actor that owns this timer.</param>
            <param name="dueTime">The amount of time to wait before sending the first timeout event.</param>
            <param name="period">The time interval between timeout events.</param>
            <param name="customEvent">Optional custom event to raise instead of a default TimerElapsedEvent.</param>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.Equals(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Coyote.Actors.Timers.TimerInfo.System#IEquatable{Microsoft#Coyote#Actors#Timers#TimerInfo}#Equals(Microsoft.Coyote.Actors.Timers.TimerInfo)">
            <summary>
            Indicates whether the specified <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo"/> is equal
            to the current <see cref="T:Microsoft.Coyote.Actors.Timers.TimerInfo"/>.
            </summary>
        </member>
    </members>
</doc>
